<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fitzeng</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://fitzeng.org/"/>
  <updated>2018-01-23T14:47:46.407Z</updated>
  <id>http://fitzeng.org/</id>
  
  <author>
    <name>fitzeng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MarkDown 插入数学公式实验大集合</title>
    <link href="http://fitzeng.org/2018/01/23/LaTexFormula/"/>
    <id>http://fitzeng.org/2018/01/23/LaTexFormula/</id>
    <published>2018-01-23T03:27:00.000Z</published>
    <updated>2018-01-23T14:47:46.407Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script>

<h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h2><blockquote>
<p>最近在学习一些机器学习相关的知识，想把自己学习的东西通过 MD 的形式在线记录下来，但是之前一直没有开始行动，因为里面的公式什么的感觉实在是麻烦。于是今天打算花点时间了解一下<a href="http://blog.csdn.net/xiahouzuoxin/article/details/26478179" target="_blank" rel="external"><code>如何在 markdown 中插入数学公式</code></a>，发现其实很简单，大概花一个小时左右就能知道如何编写了。</p>
</blockquote>
<a id="more"></a>
<h2 id="1-基础认识"><a href="#1-基础认识" class="headerlink" title="1. 基础认识"></a>1. 基础认识</h2><blockquote>
<p>笔者认为所谓插入数学公式其实就是引入一种规则，然后通过<code>模板？</code>渲染成公式，不知道这个理解对不对，不对望指正。其实你以前可能就看到过有的博客本该出现公式的时候不显示，点击后会链接到一个 new tab 然后显示一张公式的图片，有时却出现一大堆的代码。这里就是通过这段代码解析成公式然后显示的。</p>
</blockquote>
<p>这里我们选取 MathJax 引擎。<br>引入脚本，把下面代码插入 MD 文件里面，如果你怕这份在线文件源别人访问不到的话，可以把这个下下来自己做一个源，这样比较稳定缺点是要自己手动更新源。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>好了到这里就可以插入公式了，如果你懂 LaTeX 的话那看一两个例子就知道了，不懂也没关系，自己写一写代码就知道了，可以找一个可以预览 MD 的工具一直尝试。</p>
<h3 id="1-1-插入方式"><a href="#1-1-插入方式" class="headerlink" title="1.1 插入方式"></a>1.1 插入方式</h3><blockquote>
<p>这里分两种，一种是行间插入，另一种是另取一行</p>
</blockquote>
<h4 id="1-1-1-行间插入"><a href="#1-1-1-行间插入" class="headerlink" title="1.1.1 行间插入"></a>1.1.1 行间插入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">\\(a + b\\)</div></pre></td></tr></table></figure>
<p>这里是行间插入公式 a + b : \(a + b\)，特点就是通过<code>(</code> 和 <code>)</code> 包含公式，然后为了模板引擎能够区分该 <code>(</code> 不是普通文本的 <code>(</code> 而是公式的 <code>(</code>，通过 <code>\\</code> 转义一下。这样应该就很好理解这个语法构成了。注意这里方式不唯一，这是笔者喜欢的方式，其他的使用方式自行搜索。下面的介绍同样是这样。</p>
<h4 id="1-1-2-另取一行"><a href="#1-1-2-另取一行" class="headerlink" title="1.1.2 另取一行"></a>1.1.2 另取一行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$$a + b$$</div></pre></td></tr></table></figure>
<p>这里是另取一行$$a + b$$ 特点就是通过<code>$$</code>包含公式。</p>
<p>笔者认为第二种方式更好，以下没看 JS 源码纯属猜测：行间的需要考虑到当前行的行高并对公式进行处理，而另取一行就更简单一些，可能解析起来更快。最最最最最最主要是看起来漂亮 ^_^ 不太要考虑空间不够换行。</p>
<h3 id="1-2-基本类型的插入"><a href="#1-2-基本类型的插入" class="headerlink" title="1.2 基本类型的插入"></a>1.2 基本类型的插入</h3><blockquote>
<p>这里对 <a href="http://www.cnblogs.com/houkai/p/3399646.html" target="_blank" rel="external">@houkai ：LATEX数学公式基本语法</a> 的思路稍加修改，然后进行介绍。</p>
</blockquote>
<h4 id="1-2-1-上、下标"><a href="#1-2-1-上、下标" class="headerlink" title="1.2.1 上、下标"></a>1.2.1 上、下标</h4><p>先看结果再总结语法吧。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$$x_1$$</div><div class="line"></div><div class="line">$$x_1^2$$</div><div class="line"></div><div class="line">$$x^2_1$$</div><div class="line"></div><div class="line">$$x_&#123;22&#125;^&#123;(n)&#125;$$</div><div class="line"></div><div class="line">$$&#123;&#125;^*x^*$$</div><div class="line"></div><div class="line">$$x_&#123;balabala&#125;^&#123;bala&#125;&amp;&amp;</div></pre></td></tr></table></figure>
<p>$$x_1$$</p>
<p>$$x_1^2$$</p>
<p>$$x^2_1$$</p>
<p>$$x_{22}^{(n)}$$</p>
<p>$${}^*x^*$$</p>
<p>$$x_{balabala}^{bala}$$</p>
<p>可以看到 <code>x</code> 元素的上标通过 <code>^</code> 符号后接的内容体现，下表通过 <code>_</code> 符号后接的内容体现，多于一位是要加 <code>{}</code> 包裹的。<br>笔者习惯先下标后上标的写法，和我的书写习惯一致：<code>x_{balabala}^{bala}</code>，不管你使用哪一种风格，最好自己注意统一，不要混用。</p>
<h4 id="1-2-2-分式"><a href="#1-2-2-分式" class="headerlink" title="1.2.2 分式"></a>1.2.2 分式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$$\frac&#123;x+y&#125;&#123;2&#125;$$</div><div class="line"></div><div class="line">$$\frac&#123;1&#125;&#123;1+\frac&#123;1&#125;&#123;2&#125;&#125;$$</div></pre></td></tr></table></figure>
<p>$$\frac{x+y}{2}$$</p>
<p>$$\frac{1}{1+\frac{1}{2}}$$</p>
<p>这里就出现了一个 <code>frac{}{}</code> 函数的东西，同样，为了区分这是函数不是几个字母，通过 <code>\frac</code> 转义，于是 <code>frac</code> 被解析成函数，然后第一个 <code>{}</code> 里面的被解析成分子，第二个 <code>{}</code> 被解析成分母。这里可以试试分数的行间解析\(\frac{1}{1+\frac{1}{2}}\)。我要看行间填充效果我要看行间填充效果我要看行间填充效果我要看行间填充效果我要看行间填充效果我要看行间填充效果我要看行间填充效果我要看行间填充效果我要看行间填充效果我要看行间填充效果我要看行间填充效果我要看行间填充效果。</p>
<h4 id="1-2-3-根式"><a href="#1-2-3-根式" class="headerlink" title="1.2.3 根式"></a>1.2.3 根式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$$\sqrt&#123;2&#125;&lt;\sqrt[3]&#123;3&#125;$$</div><div class="line"></div><div class="line">$$\sqrt&#123;1+\sqrt[p]&#123;1+a^2&#125;&#125;$$</div><div class="line"></div><div class="line">$$\sqrt&#123;1+\sqrt[^p\!]&#123;1+a^2&#125;&#125;$$</div></pre></td></tr></table></figure>
<p>$$\sqrt{2}&lt;\sqrt[3]{3}$$</p>
<p>$$\sqrt{1+\sqrt[p]{1+a^2}}$$</p>
<p>$$\sqrt{1+\sqrt[^p]{1+a^2}}$$</p>
<p>读到这里你已经了解了函数的概念，那么这历久很简单了，语法就是 <code>sqrt[]{}</code> 。<code>[]</code> 中代表是几次根式，<code>{}</code> 代表根号下的表达式。第二和第三个的区别在于为了美观微调位置 ^_^。</p>
<h4 id="1-2-4-求和、积分"><a href="#1-2-4-求和、积分" class="headerlink" title="1.2.4 求和、积分"></a>1.2.4 求和、积分</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$$\sum_&#123;k=1&#125;^&#123;n&#125;\frac&#123;1&#125;&#123;k&#125;$$</div><div class="line"></div><div class="line">\\(\sum_&#123;k=1&#125;^n\frac&#123;1&#125;&#123;k&#125;\\)</div><div class="line"></div><div class="line">$$\int_a^b f(x)dx$$</div><div class="line"></div><div class="line">\\(\int_a^b f(x)dx\\)</div></pre></td></tr></table></figure>
<p>$$\sum_{k=1}^{n}\frac{1}{k}$$</p>
<p>\(\sum_{k=1}^n\frac{1}{k}\)</p>
<p>$$\int_{a}^b f(x)dx$$</p>
<p>\(\int_a^b f(x)dx\)</p>
<p>这里很容易看出求和函数表达式 <code>sum_{起点}^{终点}表达式</code>，积分函数表达式 <code>int_下限^上限 被积函数d被积量</code>。还有一个有趣的是行间的公式都被压缩了。</p>
<h4 id="1-2-5-空格"><a href="#1-2-5-空格" class="headerlink" title="1.2.5 空格"></a>1.2.5 空格</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">紧贴 $a\\!b$</div><div class="line">没有空格 $ab$</div><div class="line">小空格 a\,b</div><div class="line">中等空格 a\;b</div><div class="line">大空格 a\ b</div><div class="line">quad空格 $a\quad b$</div><div class="line">两个quad空格 $a\qquad b$</div></pre></td></tr></table></figure>
<p>$$a\!b$$<br>$$ab$$<br>$$a\,b$$<br>$$a\;b$$<br>$$a\ b$$<br>$$a\quad b$$<br>$$a\qquad b$$</p>
<p>这个直接看上面的文字，介绍很清楚，主要指微调距离，使得公式更加漂亮。请比较下面的积分公式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$$\int_a^b f(x)\mathrm&#123;d&#125;x$$</div><div class="line"></div><div class="line">$$\int_a^b f(x)\,\mathrm&#123;d&#125;x$$</div></pre></td></tr></table></figure>
<p>$$\int_a^b f(x)\mathrm{d}x$$</p>
<p>$$\int_a^b f(x)\,\mathrm{d}x$$</p>
<h4 id="1-2-6-公式界定符"><a href="#1-2-6-公式界定符" class="headerlink" title="1.2.6 公式界定符"></a>1.2.6 公式界定符</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">\\( ( \\)</div><div class="line">\\( ) \\)</div><div class="line">\\( [ \\)</div><div class="line">\\( ] \\)</div><div class="line">\\( \\&#123; \\)</div><div class="line">\\( \\&#125; \\)</div><div class="line">\\( | \\)</div><div class="line">\\( \\| \\)</div></pre></td></tr></table></figure>
<p>主要符号有<br>\( ( \)<br>\( ) \)<br>\( [ \)<br>\( ] \)<br>\( \{ \)<br>\( \} \)<br>\( | \)<br>\( \| \)<br>那么如何使用呢？<br>通过 <code>\left</code> 和 <code>\right</code> 后面跟界定符来对同时进行界定。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$$\left(\sum_&#123;k=\frac&#123;1&#125;&#123;2&#125;&#125;^&#123;N^2&#125;\frac&#123;1&#125;&#123;k&#125;\right)$$</div></pre></td></tr></table></figure>
<p>$$\left(\sum_{k=\frac{1}{2}}^{N^2}\frac{1}{k}\right)$$</p>
<h4 id="1-2-7-矩阵"><a href="#1-2-7-矩阵" class="headerlink" title="1.2.7 矩阵"></a>1.2.7 矩阵</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$$\begin&#123;matrix&#125;1 &amp; 2\\\\3 &amp;4\end&#123;matrix&#125;$$</div><div class="line"></div><div class="line">$$\begin&#123;pmatrix&#125;1 &amp; 2\\\\3 &amp;4\end&#123;pmatrix&#125;$$</div><div class="line"></div><div class="line">$$\begin&#123;bmatrix&#125;1 &amp; 2\\\\3 &amp;4\end&#123;bmatrix&#125;$$</div><div class="line"></div><div class="line">$$\begin&#123;Bmatrix&#125;1 &amp; 2\\\\3 &amp;4\end&#123;Bmatrix&#125;$$</div><div class="line"></div><div class="line">$$\begin&#123;vmatrix&#125;1 &amp; 2\\\\3 &amp;4\end&#123;vmatrix&#125;$$</div><div class="line"></div><div class="line">$$\left|\begin&#123;matrix&#125;1 &amp; 2\\\\3 &amp;4\end&#123;matrix&#125;\right|$$</div><div class="line"></div><div class="line">$$\begin&#123;Vmatrix&#125;1 &amp; 2\\\\3 &amp;4\end&#123;Vmatrix&#125;$$</div></pre></td></tr></table></figure>
<p>$$\begin{matrix}1 &amp; 2\\3 &amp;4\end{matrix}$$</p>
<p>$$\begin{pmatrix}1 &amp; 2\\3 &amp;4\end{pmatrix}$$</p>
<p>$$\begin{bmatrix}1 &amp; 2\\3 &amp;4\end{bmatrix}$$</p>
<p>$$\begin{Bmatrix}1 &amp; 2\\3 &amp;4\end{Bmatrix}$$</p>
<p>$$\begin{vmatrix}1 &amp; 2\\3 &amp;4\end{vmatrix}$$</p>
<p>$$\left|\begin{matrix}1 &amp; 2\\3 &amp;4\end{matrix}\right|$$</p>
<p>$$\begin{Vmatrix}1 &amp; 2\\3 &amp;4\end{Vmatrix}$$</p>
<p>类似于 left right，这里是 begin 和 end。而且里面有具体的矩阵语法，<code>&amp;</code> 区分行间元素，<code>\\\\</code> 代表换行。可以理解为 HTML 的标签之类的。</p>
<h4 id="1-2-8-排版数组"><a href="#1-2-8-排版数组" class="headerlink" title="1.2.8 排版数组"></a>1.2.8 排版数组</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">\mathbf&#123;X&#125; =</div><div class="line">\left( \begin&#123;array&#125;&#123;ccc&#125;</div><div class="line">x\_&#123;11&#125; &amp; x\_&#123;12&#125; &amp; \ldots \\\\</div><div class="line">x\_&#123;21&#125; &amp; x\_&#123;22&#125; &amp; \ldots \\\\</div><div class="line">\vdots &amp; \vdots &amp; \ddots</div><div class="line">\end&#123;array&#125; \right)</div></pre></td></tr></table></figure>
<p>$$<br>\mathbf{X} =<br>\left( \begin{array}{ccc}<br>x_{11} &amp; x_{12} &amp; \ldots \\<br>x_{21} &amp; x_{22} &amp; \ldots \\<br>\vdots &amp; \vdots &amp; \ddots<br>\end{array} \right)<br>$$</p>
<h2 id="2-常用公式举例"><a href="#2-常用公式举例" class="headerlink" title="2. 常用公式举例"></a>2. 常用公式举例</h2><blockquote>
<p>持续更新……</p>
</blockquote>
<h3 id="2-1-多行公式"><a href="#2-1-多行公式" class="headerlink" title="2.1 多行公式"></a>2.1 多行公式</h3><blockquote>
<p>主要是各种方程的表达</p>
</blockquote>
<h4 id="2-1-1-长公式"><a href="#2-1-1-长公式" class="headerlink" title="2.1.1 长公式"></a>2.1.1 长公式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$$</div><div class="line">\begin&#123;multline&#125;</div><div class="line">x = a+b+c+&#123;&#125; \\\\</div><div class="line">d+e+f+g</div><div class="line">\end&#123;multline&#125;</div><div class="line">$$</div><div class="line"></div><div class="line">$$</div><div class="line">\begin&#123;aligned&#125;</div><div class="line">x =&#123;&#125;&amp; a+b+c+&#123;&#125; \\\\</div><div class="line">&amp;d+e+f+g</div><div class="line">\end&#123;aligned&#125;</div><div class="line">$$</div></pre></td></tr></table></figure>
<p>不对齐</p>
<p>$$<br>\left| \begin{multline}<br>x = a+b+c+{} \\<br>d+e+f+g<br>\end{multline} \right|<br>$$</p>
<p>对齐</p>
<p>$$<br>\left| \begin{aligned}<br>x ={}&amp; a+b+c+{} \\<br>&amp;d+e+f+g<br>\end{aligned} \right|<br>$$</p>
<h4 id="2-1-2-公式组"><a href="#2-1-2-公式组" class="headerlink" title="2.1.2 公式组"></a>2.1.2 公式组</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$$</div><div class="line">\begin&#123;gather&#125;</div><div class="line">a = b+c+d \\\\</div><div class="line">x = y+z</div><div class="line">\end&#123;gather&#125;</div><div class="line">$$</div><div class="line"></div><div class="line">$$</div><div class="line">\begin&#123;align&#125;</div><div class="line">a &amp;= b+c+d \\\\</div><div class="line">x &amp;= y+z</div><div class="line">\end&#123;align&#125;</div><div class="line">$$</div></pre></td></tr></table></figure>
<p>$$<br>\begin{gather}<br>a = b+c+d \\<br>x = y+z<br>\end{gather}<br>$$</p>
<p>$$<br>\begin{align}<br>a &amp;= b+c+d \\<br>x &amp;= y+z<br>\end{align}<br>$$</p>
<h4 id="2-1-3-分段函数"><a href="#2-1-3-分段函数" class="headerlink" title="2.1.3 分段函数"></a>2.1.3 分段函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$$</div><div class="line">y=\begin&#123;cases&#125;</div><div class="line">-x,\quad x\leq 0 \\\\</div><div class="line">x,\quad x&gt;0</div><div class="line">\end&#123;cases&#125;</div><div class="line">$$</div></pre></td></tr></table></figure>
<p>$$<br>y=\begin{cases}<br>-x,\quad x\leq 0 \\<br>x,\quad x&gt;0<br>\end{cases}<br>$$</p>
<p>里面用到了 \(\leq\) 符号，下一章会介绍常用数学符号。</p>
<h3 id="2-2-数组的其他使用"><a href="#2-2-数组的其他使用" class="headerlink" title="2.2 数组的其他使用"></a>2.2 数组的其他使用</h3><h4 id="2-2-1-划线"><a href="#2-2-1-划线" class="headerlink" title="2.2.1 划线"></a>2.2.1 划线</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$$</div><div class="line">\left(\begin&#123;array&#125;&#123;|c|c|&#125;</div><div class="line">1 &amp; 2 \\\\</div><div class="line">\\hline</div><div class="line">3 &amp; 4</div><div class="line">\end&#123;array&#125;\right)</div><div class="line">$$</div></pre></td></tr></table></figure>
<p>$$<br>\left( \begin{array}{|c|c|}<br>1 &amp; \ldots \\<br>\hline<br>\vdots &amp; \ddots<br>\end{array} \right)<br>$$</p>
<h4 id="2-2-2-制表"><a href="#2-2-2-制表" class="headerlink" title="2.2.2 制表"></a>2.2.2 制表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$$</div><div class="line">\begin&#123;array&#125;&#123;|c|c|&#125;</div><div class="line">\hline</div><div class="line">&#123;1111111111&#125; &amp; 2 \\\\</div><div class="line">\hline</div><div class="line">3 &amp; 4 \\\\</div><div class="line">\hline</div><div class="line">\end&#123;array&#125;</div><div class="line">$$</div></pre></td></tr></table></figure>
<p>$$<br>\begin{array}{|c|c|}<br>\hline<br>{1111111111} &amp; 2 \\<br>\hline<br>{balabala} &amp; 你好啊 {}^\land\_{}^\land \\<br>\hline<br>\end{array}<br>$$</p>
<p>可以看到，其实其他很多东西都可以很灵活的表达出来。碰到其他有趣的我会继续写出来的。</p>
<h2 id="3-常用数学符号"><a href="#3-常用数学符号" class="headerlink" title="3. 常用数学符号"></a>3. 常用数学符号</h2><blockquote>
<p>这里提供一个<a href="http://files.cnblogs.com/houkai/LATEX%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7%E8%A1%A8.rar" target="_blank" rel="external">文档下载</a>，如果上面的链接失效，也可以到我的 <a href="https://github.com/mk43/BlogResource/blob/master/LaTex/LATEX%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7%E8%A1%A8.pdf" target="_blank" rel="external">GitHub 下载 pdf 版</a>。下面举几个例子。</p>
</blockquote>
<h3 id="3-1-希腊字母"><a href="#3-1-希腊字母" class="headerlink" title="3.1 希腊字母"></a>3.1 希腊字母</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">$$</div><div class="line">\begin&#123;array&#125;&#123;|c|c|c|c|c|c|c|c|&#125;</div><div class="line">\hline</div><div class="line">&#123;\alpha&#125; &amp; &#123;\backslash alpha&#125; &amp; &#123;\theta&#125; &amp; &#123;\backslash theta&#125; &amp; &#123;o&#125; &amp; &#123;o&#125; &amp; &#123;\upsilon&#125; &amp; &#123;\backslash upsilon&#125; \\\\</div><div class="line">\hline</div><div class="line">&#123;\beta&#125; &amp; &#123;\backslash beta&#125; &amp; &#123;\vartheta&#125; &amp; &#123;\backslash vartheta&#125; &amp; &#123;\pi&#125; &amp; &#123;\backslash pi&#125; &amp; &#123;\phi&#125; &amp; &#123;\backslash phi&#125; \\\\</div><div class="line">\hline</div><div class="line">&#123;\gamma&#125; &amp; &#123;\backslash gamma&#125; &amp; &#123;\iota&#125; &amp; &#123;\backslash iota&#125; &amp; &#123;\varpi&#125; &amp; &#123;\backslash varpi&#125; &amp; &#123;\varphi&#125; &amp; &#123;\backslash varphi&#125; \\\\</div><div class="line">\hline</div><div class="line">&#123;\delta&#125; &amp; &#123;\backslash delta&#125; &amp; &#123;\kappa&#125; &amp; &#123;\backslash kappa&#125; &amp; &#123;\rho&#125; &amp; &#123;\backslash rho&#125; &amp; &#123;\chi&#125; &amp; &#123;\backslash chi&#125; \\\\</div><div class="line">\hline</div><div class="line">&#123;\epsilon&#125; &amp; &#123;\backslash epsilon&#125; &amp; &#123;\lambda&#125; &amp; &#123;\backslash lambda&#125; &amp; &#123;\varrho&#125; &amp; &#123;\backslash varrho&#125; &amp; &#123;\psi&#125; &amp; &#123;\backslash psi&#125; \\\\</div><div class="line">\hline</div><div class="line">&#123;\varepsilon&#125; &amp; &#123;\backslash varepsilon&#125; &amp; &#123;\mu&#125; &amp; &#123;\backslash mu&#125; &amp; &#123;\sigma&#125; &amp; &#123;\backslash sigma&#125; &amp; &#123;\omega&#125; &amp; &#123;\backslash omega&#125; \\\\</div><div class="line">\hline</div><div class="line">&#123;\zeta&#125; &amp; &#123;\backslash zeta&#125; &amp; &#123;\nu&#125; &amp; &#123;\backslash nu&#125; &amp; &#123;\varsigma&#125; &amp; &#123;\backslash varsigma&#125; &amp; &#123;&#125; &amp; &#123;&#125; \\\\</div><div class="line">\hline</div><div class="line">&#123;\eta&#125; &amp; &#123;\backslash eta&#125; &amp; &#123;\xi&#125; &amp; &#123;\backslash xi&#125; &amp; &#123;\tau&#125; &amp; &#123;\backslash tau&#125; &amp; &#123;&#125; &amp; &#123;&#125; \\\\</div><div class="line">\hline</div><div class="line">&#123;\Gamma&#125; &amp; &#123;\backslash Gamma&#125; &amp; &#123;\Lambda&#125; &amp; &#123;\backslash Lambda&#125; &amp; &#123;\Sigma&#125; &amp; &#123;\backslash Sigma&#125; &amp; &#123;\Psi&#125; &amp; &#123;\backslash Psi&#125; \\\\</div><div class="line">\hline</div><div class="line">&#123;\Delta&#125; &amp; &#123;\backslash Delta&#125; &amp; &#123;\Xi&#125; &amp; &#123;\backslash Xi&#125; &amp; &#123;\Upsilon&#125; &amp; &#123;\backslash Upsilon&#125; &amp; &#123;\Omega&#125; &amp; &#123;\backslash Omega&#125; \\\\</div><div class="line">\hline</div><div class="line">&#123;\Omega&#125; &amp; &#123;\backslash Omega&#125; &amp; &#123;\Pi&#125; &amp; &#123;\backslash Pi&#125; &amp; &#123;\Phi&#125; &amp; &#123;\backslash Phi&#125; &amp; &#123;&#125; &amp; &#123;&#125; \\\\</div><div class="line">\hline</div><div class="line">\end&#123;array&#125;</div><div class="line">$$</div></pre></td></tr></table></figure>
<p>$$<br>\begin{array}{|c|c|c|c|c|c|c|c|}<br>\hline<br>{\alpha} &amp; {\backslash alpha} &amp; {\theta} &amp; {\backslash theta} &amp; {o} &amp; {o} &amp; {\upsilon} &amp; {\backslash upsilon} \\<br>\hline<br>{\beta} &amp; {\backslash beta} &amp; {\vartheta} &amp; {\backslash vartheta} &amp; {\pi} &amp; {\backslash pi} &amp; {\phi} &amp; {\backslash phi} \\<br>\hline<br>{\gamma} &amp; {\backslash gamma} &amp; {\iota} &amp; {\backslash iota} &amp; {\varpi} &amp; {\backslash varpi} &amp; {\varphi} &amp; {\backslash varphi} \\<br>\hline<br>{\delta} &amp; {\backslash delta} &amp; {\kappa} &amp; {\backslash kappa} &amp; {\rho} &amp; {\backslash rho} &amp; {\chi} &amp; {\backslash chi} \\<br>\hline<br>{\epsilon} &amp; {\backslash epsilon} &amp; {\lambda} &amp; {\backslash lambda} &amp; {\varrho} &amp; {\backslash varrho} &amp; {\psi} &amp; {\backslash psi} \\<br>\hline<br>{\varepsilon} &amp; {\backslash varepsilon} &amp; {\mu} &amp; {\backslash mu} &amp; {\sigma} &amp; {\backslash sigma} &amp; {\omega} &amp; {\backslash omega} \\<br>\hline<br>{\zeta} &amp; {\backslash zeta} &amp; {\nu} &amp; {\backslash nu} &amp; {\varsigma} &amp; {\backslash varsigma} &amp; {} &amp; {} \\<br>\hline<br>{\eta} &amp; {\backslash eta} &amp; {\xi} &amp; {\backslash xi} &amp; {\tau} &amp; {\backslash tau} &amp; {} &amp; {} \\<br>\hline<br>{\Gamma} &amp; {\backslash Gamma} &amp; {\Lambda} &amp; {\backslash Lambda} &amp; {\Sigma} &amp; {\backslash Sigma} &amp; {\Psi} &amp; {\backslash Psi} \\<br>\hline<br>{\Delta} &amp; {\backslash Delta} &amp; {\Xi} &amp; {\backslash Xi} &amp; {\Upsilon} &amp; {\backslash Upsilon} &amp; {\Omega} &amp; {\backslash Omega} \\<br>\hline<br>{\Omega} &amp; {\backslash Omega} &amp; {\Pi} &amp; {\backslash Pi} &amp; {\Phi} &amp; {\backslash Phi} &amp; {} &amp; {} \\<br>\hline<br>\end{array}<br>$$</p>
<p>写太累了😂😂😂。。。其他的详见 <a href="https://github.com/mk43/BlogResource/blob/master/LaTex/LATEX%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7%E8%A1%A8.pdf" target="_blank" rel="external">PDF</a>。</p>
<h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><blockquote>
<p>通过这样梳理一下基本的公式都能插入了，而且也会如何查资料。对于自己日后学习 LaTeX 写论文有很大帮助。以下建议带有很强的主观性，仅供参考。</p>
</blockquote>
<ul>
<li>公式一律使用另取一行，并且上下都空一行</li>
<li>一个公式一个语句，不要写在一个 <code>$$***$$</code> 里，保证<code>独立性</code>，一个公式错误不影响另一个公式。</li>
<li>风格统一，不要混用。比如上下标的写法：<code>x_{balabala}^{bala}</code></li>
<li>行间字母可以使用 <code>\\(a\\)</code> 代替 <code>a</code> ，养成自己的写作风格。</li>
</ul>
<p>最后：我的 <a href="http://fitzeng.org/">Blog</a> 和 <a href="https://github.com/mk43" target="_blank" rel="external">GitHub</a>，感谢阅读。</p>
<h2 id="5-参考资料"><a href="#5-参考资料" class="headerlink" title="5. 参考资料"></a>5. 参考资料</h2><blockquote>
<p>十分感谢以下作者的无私分享。</p>
</blockquote>
<ol>
<li><a href="http://blog.csdn.net/xiahouzuoxin/article/details/26478179" target="_blank" rel="external">Markdown中插入数学公式的方法</a></li>
<li><a href="http://www.cnblogs.com/houkai/p/3399646.html" target="_blank" rel="external">LATEX数学公式基本语法</a></li>
<li><a href="https://liam0205.me/2014/09/08/latex-introduction/" target="_blank" rel="external">一份其实很短的 LaTeX 入门文档</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;script type=&quot;text/javascript&quot; src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0. 前言&quot;&gt;&lt;/a&gt;0. 前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;最近在学习一些机器学习相关的知识，想把自己学习的东西通过 MD 的形式在线记录下来，但是之前一直没有开始行动，因为里面的公式什么的感觉实在是麻烦。于是今天打算花点时间了解一下&lt;a href=&quot;http://blog.csdn.net/xiahouzuoxin/article/details/26478179&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;如何在 markdown 中插入数学公式&lt;/code&gt;&lt;/a&gt;，发现其实很简单，大概花一个小时左右就能知道如何编写了。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Math" scheme="http://fitzeng.org/tags/Math/"/>
    
      <category term="MarkDown" scheme="http://fitzeng.org/tags/MarkDown/"/>
    
      <category term="Formula" scheme="http://fitzeng.org/tags/Formula/"/>
    
      <category term="LaTeX" scheme="http://fitzeng.org/tags/LaTeX/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlow 入门</title>
    <link href="http://fitzeng.org/2018/01/03/TensorFlowIntroduction/"/>
    <id>http://fitzeng.org/2018/01/03/TensorFlowIntroduction/</id>
    <published>2018-01-03T03:27:00.000Z</published>
    <updated>2018-01-23T11:46:45.192Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>写在前面：还没开始填坑 😂😂😂</p>
</blockquote>
<a id="more"></a>
<h2 id="0-TensorFlow-介绍"><a href="#0-TensorFlow-介绍" class="headerlink" title="0 TensorFlow 介绍"></a>0 TensorFlow 介绍</h2><blockquote>
</blockquote>
<h3 id="0-1-什么是-TensorFlow"><a href="#0-1-什么是-TensorFlow" class="headerlink" title="0.1 什么是 TensorFlow ?"></a>0.1 什么是 TensorFlow ?</h3><blockquote>
</blockquote>
<h3 id="0-2-TensorFlow-可以做什么"><a href="#0-2-TensorFlow-可以做什么" class="headerlink" title="0.2 TensorFlow 可以做什么 ?"></a>0.2 TensorFlow 可以做什么 ?</h3><p>&gt;</p>
<h3 id="0-3-TensorFlow-安装"><a href="#0-3-TensorFlow-安装" class="headerlink" title="0.3 TensorFlow 安装"></a>0.3 TensorFlow 安装</h3><blockquote>
</blockquote>
<h2 id="1-初识-TensorFlow"><a href="#1-初识-TensorFlow" class="headerlink" title="1 初识 TensorFlow"></a>1 初识 TensorFlow</h2><blockquote>
<h3 id="1-1-基础语法"><a href="#1-1-基础语法" class="headerlink" title="1.1 基础语法"></a>1.1 基础语法</h3></blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;写在前面：还没开始填坑 😂😂😂&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Math" scheme="http://fitzeng.org/tags/Math/"/>
    
      <category term="TensorFlow" scheme="http://fitzeng.org/tags/TensorFlow/"/>
    
      <category term="MachineLearning" scheme="http://fitzeng.org/tags/MachineLearning/"/>
    
      <category term="Python" scheme="http://fitzeng.org/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>GitNote</title>
    <link href="http://fitzeng.org/2017/12/16/GitNote/"/>
    <id>http://fitzeng.org/2017/12/16/GitNote/</id>
    <published>2017-12-16T03:27:00.000Z</published>
    <updated>2017-12-17T06:36:06.885Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h2><blockquote>
<p>在使用 Git 时有一种感觉就是只会 <code>add | commit | push</code> 三个命令。因为这三个命令似乎足以把代码提交到 GitHub 上，即使是碰到某个问题，也可以直接 Google。但是对于其中的逻辑和版本管理的精髓没有体会到，而只是作为一个在线代码仓库在使用，这样做也没有什么不可以，但是如果能系统的了解为什么要有版本管理工具，以及版本管理工具能够给我们提供怎么样的管理服务，对于使用工具的我们来说有很大帮助。不用记住命令，只是以后遇到问题时知道这个工具有实现的方式就足够了。</p>
<p>现在我系统的看了一下官方的 Git 入门教程 <a href="https://www.nowcoder.com/courses/2#chapter-14" target="_blank" rel="external">Git 官方教程（中字）</a> 里面通过描述对命令的使用情景进而选择命令进行操作的方式，使得命令很容易理解也容易加深记忆。比起单一的命令用文字解释这种方式，对于不熟悉 Git 的人来说是十分友好的。但是，看完容易忘，所以写了这篇整理笔记用作辅助查询。</p>
</blockquote>
<a id="more"></a>
<h2 id="1-基本命令"><a href="#1-基本命令" class="headerlink" title="1. 基本命令"></a>1. 基本命令</h2><h3 id="1-1-了解帮助命令"><a href="#1-1-了解帮助命令" class="headerlink" title="1.1 了解帮助命令"></a>1.1 了解帮助命令</h3><ul>
<li><code>git help</code> : 查看命令</li>
<li><code>git help add</code> : 查看 <code>git add</code> 命令的具体解释</li>
</ul>
<h3 id="1-2-仓库初始化"><a href="#1-2-仓库初始化" class="headerlink" title="1.2 仓库初始化"></a>1.2 仓库初始化</h3><ul>
<li><code>git init</code> : 创建 <code>.git</code>, 适合在已存在项目追加版本控制</li>
<li><code>git init projectname</code> : 创建 <code>projectname/.git</code>, 适合项目开始时加入版本控制</li>
</ul>
<h3 id="1-3-文件基本操作"><a href="#1-3-文件基本操作" class="headerlink" title="1.3 文件基本操作"></a>1.3 文件基本操作</h3><ul>
<li><code>git add filename/*</code> : 添加文件[产生暂存文件]</li>
<li><code>git commmit -m &quot;message&quot;</code> : 将添加的文件提交到本地仓库[产生提交文件]</li>
<li><code>git rm filename</code> : 移除文件，使用 <code>rm filename</code> 的有暂存</li>
<li><code>git add -u .</code> : 如果之前使用非 git 命令删除文件，可以使用这个命令把当前目录的文件重新遍历清除</li>
<li><code>git rm --cache filename</code> : 暂存但是不参与跟踪</li>
<li><code>git mv filepath newfilepath</code> : 移动文件</li>
<li><code>git rm filepath &amp;&amp; git add newfilepath</code> : 移动文件，之前使用非 git 命令移动文件</li>
<li><code>git add -A .</code> : 如果之前使用非 git 命令移动文件，可以使用这个命令把当前目录的文件重新遍历移动，和 <code>rm</code> 命令类似</li>
<li><code>git reset etc...</code> : 历史提交管理(回退，合并…)，checkout 更关注文件</li>
</ul>
<h3 id="1-4-查看文件修改"><a href="#1-4-查看文件修改" class="headerlink" title="1.4 查看文件修改"></a>1.4 查看文件修改</h3><ul>
<li><code>git status</code> : 查看文件信息</li>
<li><code>git diff</code> : 查看修改[工作树和暂存文件]</li>
<li><code>git diff --staged</code> : 查看修改[暂存文件和最近提交文件]</li>
<li><code>git diff HEAD</code> : 查看修改[工作树和最近提交文件]</li>
<li><code>git diff --word-diff</code> : 查看修改的单词用颜色标出</li>
<li><code>git diff --stat</code> : 查看修改的文件名</li>
</ul>
<blockquote>
<p>参考资料 <a href="http://www.cnblogs.com/feeland/p/4500721.html" target="_blank" rel="external">0. Git 学习（三）本地仓库操作——git add &amp; commit</a> 了解 git 版本库实现</p>
</blockquote>
<h3 id="1-5-查看提交-Log"><a href="#1-5-查看提交-Log" class="headerlink" title="1.5 查看提交 Log"></a>1.5 查看提交 Log</h3><ul>
<li><code>git log</code> : 显示提交信息</li>
<li><code>git log --oneline</code> : 显示提交 Message</li>
<li><code>git log --stat</code> : 显示提交文件名级详细修改信息</li>
<li><code>git log --patch</code> : 显示提交文件内容级详细修改信息 </li>
<li><code>git log --graph</code> : 用图显示提交记录</li>
<li><code>git log --graph --all --decorate --oneline</code> : 去除冗余信息，更加直观显示每条分支每次提交</li>
<li><code>git log --stat -- filename</code> : 文件提交记录（不记录路径移动）</li>
<li><code>git log --stat -M --follow -- filename</code> : 看到完整的文件操作过程</li>
</ul>
<h3 id="1-6-忽略文件"><a href="#1-6-忽略文件" class="headerlink" title="1.6 忽略文件"></a>1.6 忽略文件</h3><ul>
<li><code>touch .gitignore</code> : 创建文件(次级目录也可以创建)</li>
<li><code>vim .gitignore</code> : 编辑文件添加 ignore 文件。<code>*.log | tmp/ | .sass-cache etc...</code></li>
<li><code>git ls-files --others --ignored --exclude-standard</code> : 查看被 ignore 的文件</li>
<li><code>git reflog</code> : 详细修改日志</li>
</ul>
<h3 id="1-7-分支操作"><a href="#1-7-分支操作" class="headerlink" title="1.7 分支操作"></a>1.7 分支操作</h3><ul>
<li><code>git branch branchname</code> : 创建分支</li>
<li><code>git branch</code> : 显示分支</li>
<li><code>git branch -d branchname</code> : 删除分支</li>
<li><code>git branch -D branchname</code> : 删除未合并分支</li>
<li><code>git checkout branchname</code> : 切换分支</li>
<li><code>git checkout commitID</code> : 工作树切换到 commitID 时</li>
<li><code>git checkout -- filename</code> : 清理掉最后一次提交内容</li>
<li><code>git checkout -b branchname</code> : 创建新分支并且进入该分支</li>
<li><code>git merge branchname</code> : 和并 branchname 分支到目前所在分支(合并时文件冲突要手动解决)</li>
<li><code>git merge --abort</code> : 清除工作目录和暂存区</li>
<li><code>git merge squash branchname</code> : 将合并的分支改变变成一个 commit</li>
<li><code>git rebase branchname</code> : 将当前分支历史提交合并到 branchname 分支</li>
</ul>
<blockquote>
<p>参考资料 <a href="https://github.com/geeeeeeeeek/git-recipes/wiki/5.1-%E4%BB%A3%E7%A0%81%E5%90%88%E5%B9%B6%EF%BC%9AMerge%E3%80%81Rebase-%E7%9A%84%E9%80%89%E6%8B%A9" target="_blank" rel="external">2. 代码合并：Merge、Rebase 的选择</a></p>
</blockquote>
<h3 id="1-8-远程操作"><a href="#1-8-远程操作" class="headerlink" title="1.8 远程操作"></a>1.8 远程操作</h3><ul>
<li><code>git remote add origin  https://github.com/accountname/projectname</code></li>
<li><code>git remote set-url origin newUrl</code> : 改变 URL</li>
<li><code>git remote rm origin</code> : 删除</li>
<li><code>git remote -v</code> : 查看 URL</li>
<li><code>git fetch origin</code> : 抓取远程分支，本地会有一个 <code>remotehostname/branchname</code> 的分支，一般用于查看伙伴代码</li>
<li><code>git pull origin</code> : 和 fetch 类似，但是是取回远程更新和本地合并。相当于先 fetch 再 merge。</li>
<li><code>git push origin</code> : push 到远程仓库</li>
</ul>
<blockquote>
<p>参考资料 <a href="http://www.ruanyifeng.com/blog/2014/06/git_remote.html" target="_blank" rel="external">1. Git远程操作详解</a></p>
</blockquote>
<h2 id="2-总结"><a href="#2-总结" class="headerlink" title="2. 总结"></a>2. 总结</h2><blockquote>
<p>其实在开始把 Git 整个命令流程学习下来之前，对 Git 理解十分浅显，使用命令也是抱着试试看的心态，错了搜索解决方法重试，对了就不追究原因了。这种方式感觉更加浪费时间，而且很可能多次遇到重复问题。觉得以后学习某个东西还是得大概了解整个系统才好，想快速入门未尝不可，但是闲下来的时候要去多问问为什么，这样有了宏观的概念，出了问题说不定能自己摸索着解决。还有一点，实践确实是比单一的阅读或看视频更加记忆深刻，对命令的理解也是同理，所以最好都敲一遍。</p>
</blockquote>
<ul>
<li><a href="https://github.com/mk43" target="_blank" rel="external">GitHub</a></li>
<li><a href="http://fitzeng.org">Blog</a></li>
<li><a href="https://juejin.im/user/5791a7a30a2b580061a0e352" target="_blank" rel="external">掘金</a></li>
</ul>
<p>多谢阅读 ^_^</p>
<h2 id="3-参考资料"><a href="#3-参考资料" class="headerlink" title="3. 参考资料"></a>3. 参考资料</h2><ul>
<li><a href="https://www.nowcoder.com/courses/2#chapter-14" target="_blank" rel="external">-1. GitHub&amp;Git入门基础</a></li>
<li><a href="http://www.cnblogs.com/feeland/p/4500721.html" target="_blank" rel="external">0. Git 学习（三）本地仓库操作——git add &amp; commit</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2014/06/git_remote.html" target="_blank" rel="external">1. Git远程操作详解</a></li>
<li><a href="https://github.com/geeeeeeeeek/git-recipes/wiki/5.1-%E4%BB%A3%E7%A0%81%E5%90%88%E5%B9%B6%EF%BC%9AMerge%E3%80%81Rebase-%E7%9A%84%E9%80%89%E6%8B%A9" target="_blank" rel="external">2. 代码合并：Merge、Rebase 的选择</a></li>
<li><a href="https://github.com/geeeeeeeeek/git-recipes" target="_blank" rel="external">3. GitHub 高质量的Git中文教程</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0. 前言&quot;&gt;&lt;/a&gt;0. 前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在使用 Git 时有一种感觉就是只会 &lt;code&gt;add | commit | push&lt;/code&gt; 三个命令。因为这三个命令似乎足以把代码提交到 GitHub 上，即使是碰到某个问题，也可以直接 Google。但是对于其中的逻辑和版本管理的精髓没有体会到，而只是作为一个在线代码仓库在使用，这样做也没有什么不可以，但是如果能系统的了解为什么要有版本管理工具，以及版本管理工具能够给我们提供怎么样的管理服务，对于使用工具的我们来说有很大帮助。不用记住命令，只是以后遇到问题时知道这个工具有实现的方式就足够了。&lt;/p&gt;
&lt;p&gt;现在我系统的看了一下官方的 Git 入门教程 &lt;a href=&quot;https://www.nowcoder.com/courses/2#chapter-14&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git 官方教程（中字）&lt;/a&gt; 里面通过描述对命令的使用情景进而选择命令进行操作的方式，使得命令很容易理解也容易加深记忆。比起单一的命令用文字解释这种方式，对于不熟悉 Git 的人来说是十分友好的。但是，看完容易忘，所以写了这篇整理笔记用作辅助查询。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Git" scheme="http://fitzeng.org/tags/Git/"/>
    
      <category term="GitHub" scheme="http://fitzeng.org/tags/GitHub/"/>
    
      <category term="Tool" scheme="http://fitzeng.org/tags/Tool/"/>
    
  </entry>
  
  <entry>
    <title>一个小白使用 devstack 部署 openstack 的心路历程</title>
    <link href="http://fitzeng.org/2017/11/04/deployOpenstackByDevstack/"/>
    <id>http://fitzeng.org/2017/11/04/deployOpenstackByDevstack/</id>
    <published>2017-11-04T03:27:00.000Z</published>
    <updated>2017-11-04T04:57:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h2><blockquote>
<p>作为一个想要入门云计算的人来说，大多数人的第一步就是学习 openstack，而学习 openstack 的人面临的第一步就是第一个‘难题’，使用自动化部署工具 devstack 部署 openstack 环境。第一次接触这个东西，花了两天多时间在 Ubuntu Server 和 Ubuntu Desktop 的 16.04 版本上成功部署。有很多人说 Desktop 版有很多坑，亲测问题确实比 Server 版多，但都是可解决的。其中最对初学者不友好的就是网络问题，下面会介绍为什么。所以如果你自己买了国外的 VPS 那就好办了，因为有个骚操作要用到，如果你网速好可能你遇不到这些问题就可以忽略。</p>
<p>下面会分两个部分介绍，都会将 Server 和 Desktop 上的部署过程描述一遍。<br>教程推荐 <a href="https://docs.openstack.org/devstack/latest/" target="_blank" rel="external">官方的 Doc</a>和<a href="https://zhuanlan.zhihu.com/p/28996062" target="_blank" rel="external">避坑指南</a><br>教程这个东西对于初学者不宜太多，容易乱，只要有一个正确的执行框架就好。碰到其他 bug 直接 Google 就好。</p>
</blockquote>
<a id="more"></a>
<p>然后介绍下我的环境吧</p>
<ul>
<li>Mac 10.12.6</li>
<li>VirtualBox 5.1.28</li>
<li>Ubuntu Server 16.04 4G+20G (临时测试 devstack，听说坑少)</li>
<li>Ubuntu Desktop 16.04 4G+80G (平时使用)</li>
<li>VPS(最好有) (由于是乞丐版，不适合直接部署和平时学习)</li>
</ul>
<h2 id="1-Ubuntu-Server-版"><a href="#1-Ubuntu-Server-版" class="headerlink" title="1.Ubuntu Server 版"></a>1.Ubuntu Server 版</h2><h3 id="安装-Ubuntu-Server"><a href="#安装-Ubuntu-Server" class="headerlink" title="安装 Ubuntu Server"></a>安装 Ubuntu Server</h3><p>首先肯定是要在 Virtual Box 安装 Ubuntu Server 了，这一步略过。相信你已经是接触过一段时间虚拟机的人了，但是一点注意，竟可能分多一点内存和硬盘。由于我不打算日后再这 Server 版使用，所以我的配置是 4G + 20G</p>
<h3 id="SSH-登录虚拟机"><a href="#SSH-登录虚拟机" class="headerlink" title="SSH 登录虚拟机"></a>SSH 登录虚拟机</h3><p>当你创建完成之后面临的一个问题就是那个界面太丑了。。。所以如果可以在宿主机上操作就好了，SSH 正好满足你。<br>至于 SSH 不通使用不了的自己查查资料吧，这里我主要介绍网卡配置，我使用了两个网卡：<br>第一个：<br><img src="/2017/11/04/deployOpenstackByDevstack/wk1.png" alt=""><br><img src="/2017/11/04/deployOpenstackByDevstack/wk1port.png" alt=""><br>做端口映射，将主机的 2222 映射到虚拟机的 22，这条是为了以后使用 SSH。<br>第二个：<br><img src="/2017/11/04/deployOpenstackByDevstack/wk2.png" alt=""><br>配完之后再在全局配置中设置你所选中的网卡启用 DHCP。对于网卡各种连接模式不熟的可以查查资料了解一下。</p>
<p>然后连接就是直接在主机下使用  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -p 2222 fitzeng@127.0.0.1</div></pre></td></tr></table></figure>
<p>fitzeng 改成你的用户名。<br>如果你出现各种问题连不上可以注意一下两点：<br>1.防火墙<br>2.把 <code>~/.ssh</code> 文件夹下的 <code>known_hosts</code> 文件删了再重连</p>
<h3 id="开始部署"><a href="#开始部署" class="headerlink" title="开始部署"></a>开始部署</h3><blockquote>
<p>这里的主教程以官方提供的为准，并且那些注意点我会更新。</p>
</blockquote>
<p>部署的脚本要求是拥有 root 权限的非 root 用户。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">sudo useradd -s /bin/bash -d /opt/stack -m stack</div><div class="line"></div><div class="line">echo &quot;stack ALL=(ALL) NOPASSWD: ALL&quot; | sudo tee /etc/sudoers.d/stack</div><div class="line">sudo su - stack</div><div class="line"></div><div class="line">cd /opt/stack</div><div class="line">git clone https://git.openstack.org/openstack-dev/devstack</div><div class="line">cd devstack</div></pre></td></tr></table></figure>
<p>如果上面 clone 太慢或者 clone 不下来的话可以试试 github 的源。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/openstack-dev/devstack.git</div></pre></td></tr></table></figure>
<p>然后就是添加配置了，如果不懂推荐直接使用官方页面介绍的。或者使用以下命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cp samples/local.conf ./</div><div class="line">vim local.conf</div></pre></td></tr></table></figure>
<p>如果你幸运，讲道理最后执行 <code>./stack.sh</code> 直接一路到底。。。但是还有很多坑正在等待着我们。<br>但但是有一个很好的是他的 Log 和报错十分清新，很快可以定位问题所在，有时候直接搜 Log 都会出现解决方法。<br>如果脚本直接退出提示没有 HOST_IP。那么直接在 <code>local.conf</code> 后面添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">HOST_IP=x.x.x.x</div><div class="line">GIT_BASE=https://github.com</div></pre></td></tr></table></figure>
<p>HOST_IP具体是什么在你的虚拟机上 ifconfig 查看。然后推荐把 git 源换成 github 的。<br>这里你可以检测一下你的源有没有问题 <code>apt-get update</code> 有的话直接把有问题的源在 <code>/etc/apt/sources.list.d/</code> 目录下移除，移除前建议备份一下。然后推荐 <code>apt-get upgrade</code> 一下，Python 版本保持默认的 2.7.X 就好，如果出现什么和 Python 3.4 不匹配的 Log 直接忽略。如果你换成 3.4 很多库会出问题。如果你是 Python 3.X，可以把 <code>/user/bin/</code> 下的 Python2.X 链接到该目录下的 Python 文件。这时执行 <code>python -V</code> 就能看到结果了。</p>
<p>但但但是，上面只是解决了有形的 Bug，还有就是无形的 Bug，你将面临网络问题，如果你想顺畅点可以直接更换源。<br>修改 pip 源</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mkdir ~/.pip</div><div class="line">vim ~/.pip/pip.conf</div><div class="line"></div><div class="line">填入：</div><div class="line">[global]</div><div class="line">trusted-host=mirrors.aliyun.com</div><div class="line">index-url=http://mirrors.aliyun.com/pypi/simple</div></pre></td></tr></table></figure>
<p>修改 sources.list：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</div><div class="line">sudo vim /etc/apt/sources.list</div><div class="line"></div><div class="line">填入：</div><div class="line"># deb cdrom:[Ubuntu 16.04 LTS _Xenial Xerus_ - Release amd64 (20160420.1)]/ xenial main restricted</div><div class="line">deb-src http://archive.ubuntu.com/ubuntu xenial main restricted #Added by software-properties</div><div class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted</div><div class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted multiverse universe #Added by software-properties</div><div class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted</div><div class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted multiverse universe #Added by software-properties</div><div class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial universe</div><div class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates universe</div><div class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial multiverse</div><div class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates multiverse</div><div class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse</div><div class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse #Added by software-properties</div><div class="line">deb http://archive.canonical.com/ubuntu xenial partner</div><div class="line">deb-src http://archive.canonical.com/ubuntu xenial partner</div><div class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted</div><div class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted multiverse universe #Added by software-properties</div><div class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security universe</div><div class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security multiverse</div></pre></td></tr></table></figure>
<p>都改成 aliyun 的。到这时候如果你的网络没什么问题，可能会出点环境小问题，dkpg 和各种包等之类的问题，一搜网上基本都有解决方案。</p>
<p>但但但是，如果你的网速下载某些包不超 10Kb/s 那就要用骚操作了。。。因为会一直卡着，网一断又得重新开始，先 unstack，clean 再 stack，十分不友好。出现问题大多是在下载某个 git 仓库和某些包的时候。尤其是 <code>nova</code> <code>horizon</code> 之类的，大小到了 300+M。</p>
<p>这里介绍一个方法：<br>思路是先 SSH 上你的国外 VPS，下载你的 git 仓库或其他文件。然后再 SCP 到你的虚拟机上。主要是这样不会中断，而且无形中就可以是多线程操作，开几个终端 SCP 好几个文件。<br>看看速度对比效果吧，<br>虚拟机上下载：<br><img src="/2017/11/04/deployOpenstackByDevstack/horizon2.png" alt=""><br>VPS 上下载：<br><img src="/2017/11/04/deployOpenstackByDevstack/horizon.png" alt=""><br>之后自己 SCP 就好了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo scp -P 10800 -r root@xx.xx.xx.xx:/fitzeng/horizon /etc/stack/</div></pre></td></tr></table></figure>
<p>-r 是 cp 文件夹，然后端口，IP 填你自己的后面跟目录。这里可能也有点慢，但是比之前的好而且稳定。</p>
<p><img src="/2017/11/04/deployOpenstackByDevstack/nova.png" alt=""><br><img src="/2017/11/04/deployOpenstackByDevstack/cirros.png" alt=""><br>这一切操作都源于友好的 log 机制，看上面的图片我们可以知道下载地址和存放目录，所以，知道这些手段就多了起来。<br>网速够快也可以直接在本地 clone。<br><img src="/2017/11/04/deployOpenstackByDevstack/nova2.png" alt=""></p>
<p>有了这些操作基本就意味着你解决了网络问题，借助 google 基本可以解决其他库和环境的问题。<br>成功图上传一波：<br><img src="/2017/11/04/deployOpenstackByDevstack/finish.png" alt=""></p>
<h2 id="2-Ubuntu-Desktop-版"><a href="#2-Ubuntu-Desktop-版" class="headerlink" title="2.Ubuntu Desktop 版"></a>2.Ubuntu Desktop 版</h2><p>基本步骤是和前面一致的，出的问题可能就是你之前在 Ubuntu 上装过各种软件(我装的 Sogou 输入法，里面的 fcitx 源影响了速度，甚至有时候直接卡这不动)，更改了软件源或者做过其它的工具更改，按照前面的配置亲测可行。如果你之前在 Ubuntu Server 版上装过，直接把文件 SCP 过来，如果虚拟机之间不能通讯，可以先 SCP 到宿主机，再从宿主机通过文件共享的方式共享到 Ubuntu Desktop。<br>然后运行就可以了，有了前面的基础就很简单了。</p>
<p>那就看直接看结果吧：<br><img src="/2017/11/04/deployOpenstackByDevstack/d1.png" alt=""><br><img src="/2017/11/04/deployOpenstackByDevstack/d2.png" alt=""><br><img src="/2017/11/04/deployOpenstackByDevstack/d3.png" alt=""><br><img src="/2017/11/04/deployOpenstackByDevstack/d4.png" alt=""></p>
<h2 id="3-后记"><a href="#3-后记" class="headerlink" title="3.后记"></a>3.后记</h2><p>说实话，这不太算技术文章，纯属个人记录。本来不太想写，但是感觉国内环境对开发者有点不友好，如果这篇文章能对初学者有部分帮助我就满意了，能够使初学者继续学习下去。然后这是部署完之后写的，部署的过程远不如写的这么轻松，但是我现在有信心去解决部署过程中碰到的问题，这才是重点。希望你也是。每个人的环境都不一样，出现的问题也不可能一样，所以如果你照上面做了还没有解决可以留言大家一起讨论。</p>
<p>最后：<br>多谢阅读<br>祝大家一遍过 ^_^</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0.前言&quot;&gt;&lt;/a&gt;0.前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;作为一个想要入门云计算的人来说，大多数人的第一步就是学习 openstack，而学习 openstack 的人面临的第一步就是第一个‘难题’，使用自动化部署工具 devstack 部署 openstack 环境。第一次接触这个东西，花了两天多时间在 Ubuntu Server 和 Ubuntu Desktop 的 16.04 版本上成功部署。有很多人说 Desktop 版有很多坑，亲测问题确实比 Server 版多，但都是可解决的。其中最对初学者不友好的就是网络问题，下面会介绍为什么。所以如果你自己买了国外的 VPS 那就好办了，因为有个骚操作要用到，如果你网速好可能你遇不到这些问题就可以忽略。&lt;/p&gt;
&lt;p&gt;下面会分两个部分介绍，都会将 Server 和 Desktop 上的部署过程描述一遍。&lt;br&gt;教程推荐 &lt;a href=&quot;https://docs.openstack.org/devstack/latest/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方的 Doc&lt;/a&gt;和&lt;a href=&quot;https://zhuanlan.zhihu.com/p/28996062&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;避坑指南&lt;/a&gt;&lt;br&gt;教程这个东西对于初学者不宜太多，容易乱，只要有一个正确的执行框架就好。碰到其他 bug 直接 Google 就好。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="devstack" scheme="http://fitzeng.org/tags/devstack/"/>
    
      <category term="openstack" scheme="http://fitzeng.org/tags/openstack/"/>
    
  </entry>
  
  <entry>
    <title>完美解决 Linux 的【dpkg： warning： files list file for package &#39;XXXXXXX&#39; missing, assuming package has no files currently installed】Bug</title>
    <link href="http://fitzeng.org/2017/11/04/linuxDpkgBug/"/>
    <id>http://fitzeng.org/2017/11/04/linuxDpkgBug/</id>
    <published>2017-11-04T03:27:00.000Z</published>
    <updated>2017-11-04T15:12:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h2><blockquote>
<p>估计是之前动了或者损坏了 <code>/var/lib/dpkg/info</code> 里面的文件，每次执行 apt 类的命令总是输出一大段东西，在网上找了很多资料，有解决方案，但是不全。。。很多都是失败的。最后我发现 reinstall 可以解决，所以打算写个脚本执行文件。</p>
</blockquote>
<a id="more"></a>
<h2 id="1-解决方法"><a href="#1-解决方法" class="headerlink" title="1.解决方法"></a>1.解决方法</h2><h3 id="1-1-创建一下三个文件"><a href="#1-1-创建一下三个文件" class="headerlink" title="1.1 创建一下三个文件"></a>1.1 创建一下三个文件</h3><ul>
<li>fixit.py</li>
<li>fix.sh</li>
<li>txt</li>
</ul>
<h3 id="1-2-填写内容"><a href="#1-2-填写内容" class="headerlink" title="1.2 填写内容"></a>1.2 填写内容</h3><p>先来最简单的 <code>fix.sh</code>，不用填写内容，是空文件。</p>
<p>接着就写 <code>txt</code>，直接把错误日志复制进去，如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">dpkg: warning: files list file for package &apos;libodbc1:amd64&apos; missing; assuming package has no files currently installed</div><div class="line">dpkg: warning: files list file for package &apos;dh-autoreconf&apos; missing; assuming package has no files currently installed</div><div class="line">dpkg: warning: files list file for package &apos;erlang-webtool&apos; missing; assuming package has no files currently installed</div><div class="line">dpkg: warning: files list file for package &apos;libhtml-template-perl&apos; missing; assuming package has no files currently installed</div><div class="line">.......</div><div class="line">dpkg: warning: files list file for package &apos;libvirt-dev:amd64&apos; missing; assuming package has no files currently installed</div><div class="line">dpkg: warning: files list file for package &apos;autopoint&apos; missing; assuming package has no files currently installed</div><div class="line">dpkg: warning: files list file for package &apos;libconfig-general-perl&apos; missing; assuming package has no files currently installed</div><div class="line">dpkg: warning: files list file for package &apos;ubuntu-cloud-keyring&apos; missing; assuming package has no files currently installed</div><div class="line">dpkg: warning: files list file for package &apos;tgt&apos; missing; assuming package has no files currently installed</div><div class="line">dpkg: warning: files list file for package &apos;libfdt1:amd64&apos; missing; assuming package has no files currently installed</div></pre></td></tr></table></figure>
<p>下面写 <code>fixit.py</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line"># -*- coding: utf-8 -*-</div><div class="line"></div><div class="line">__author__ = &apos;Fitzeng&apos;</div><div class="line"></div><div class="line">import re</div><div class="line"></div><div class="line">def main():</div><div class="line">    fix = open(&apos;fix.sh&apos;, &apos;w+&apos;)</div><div class="line">    for line in open(&quot;txt&quot;):</div><div class="line">        pkg = re.match(re.compile(&apos;&apos;&apos;dpkg: warning: files list file for package &apos;(.+)&apos; &apos;&apos;&apos;), line)</div><div class="line">        if pkg:</div><div class="line">            cmd = &quot;sudo apt-get install --reinstall &quot; + pkg.group(1)</div><div class="line">            fix.write(cmd + &apos;\n&apos;)</div><div class="line"></div><div class="line">if __name__ == &quot;__main__&quot;:</div><div class="line">    main()</div></pre></td></tr></table></figure>
<h3 id="1-3-执行命令"><a href="#1-3-执行命令" class="headerlink" title="1.3 执行命令"></a>1.3 执行命令</h3><p>如果权限不够可以直接先 <code>chmod 777 *</code>，然后执行 <code>python fixit.py</code>，这时 <code>fix.sh</code> 就变成下面的样子了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install --reinstall libodbc1:amd64</div><div class="line">sudo apt-get install --reinstall dh-autoreconf</div><div class="line">sudo apt-get install --reinstall erlang-webtool</div><div class="line">sudo apt-get install --reinstall libhtml-template-perl</div><div class="line">sudo apt-get install --reinstall erlang-base</div><div class="line"></div><div class="line">.......</div><div class="line"></div><div class="line">sudo apt-get install --reinstall qemu-system-misc</div><div class="line">sudo apt-get install --reinstall libvirt-dev:amd64</div><div class="line">sudo apt-get install --reinstall autopoint</div><div class="line">sudo apt-get install --reinstall libconfig-general-perl</div><div class="line">sudo apt-get install --reinstall ubuntu-cloud-keyring</div><div class="line">sudo apt-get install --reinstall tgt</div><div class="line">sudo apt-get install --reinstall libfdt1:amd64</div></pre></td></tr></table></figure>
<p>最后执行 <code>./fix.sh</code>。</p>
<p>然后就是等待执行结束了。</p>
<p>效果如下，一行一行 <code>dpkg: warning:</code> 在减少。<br><img src="/2017/11/04/linuxDpkgBug/debuging.png" alt=""><br><img src="/2017/11/04/linuxDpkgBug/debuging1.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0.前言&quot;&gt;&lt;/a&gt;0.前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;估计是之前动了或者损坏了 &lt;code&gt;/var/lib/dpkg/info&lt;/code&gt; 里面的文件，每次执行 apt 类的命令总是输出一大段东西，在网上找了很多资料，有解决方案，但是不全。。。很多都是失败的。最后我发现 reinstall 可以解决，所以打算写个脚本执行文件。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://fitzeng.org/tags/linux/"/>
    
      <category term="dpkg" scheme="http://fitzeng.org/tags/dpkg/"/>
    
  </entry>
  
  <entry>
    <title>Restart</title>
    <link href="http://fitzeng.org/2017/09/22/restart/"/>
    <id>http://fitzeng.org/2017/09/22/restart/</id>
    <published>2017-09-22T03:27:00.000Z</published>
    <updated>2017-09-23T14:55:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h2><blockquote>
<p>我的求职生活是从今年的 04-16 找实习开始到 09-22 拿到优招(秋招) Offer结束，中间共经历过了三家公司面试，面试经验不足，而且最近的面试已距现在两个多月了，细节记不清了，所以这不太算是面经，只是我个人对我自己找工作这小半年的总结以及我对找工作这件事的认识。首先说明我不是大神，只能从平静叙述整个找工作的过程，希望你能从中体会到一点什么就很满意了，在此先祝大家找工作顺利！</p>
</blockquote>
<a id="more"></a>
<h2 id="1-面试过程"><a href="#1-面试过程" class="headerlink" title="1. 面试过程"></a>1. 面试过程</h2><blockquote>
<p>自己要介绍自己在三家公司的面试过程，不涉及面试题目什么的，纯属叙述整个心理过程。不过后面我会补充一些资料和我参考的一些其他面试者的面经。</p>
</blockquote>
<p>下面我根据邮件理一下时间线：</p>
<h4 id="第一家公司（腾讯）实习-跪"><a href="#第一家公司（腾讯）实习-跪" class="headerlink" title="第一家公司（腾讯）实习-跪"></a>第一家公司（腾讯）实习-跪</h4><p><code>一面：04-16</code><br>大概记忆就是啥都问，读过我以前文章的都知道，我以前是写 Android 的，但是他问了 Linux，C/C++，操作系统，JVM，设计模式，算法，Andriod，还有一些小智力测试题。目前我只能记清这些知识点，这个过程是一开始问了十多分钟项目，再问问 Android 基础(答得很烂)，再问 JVM(也很烂😭)，接着就给我一张纸上面两道题手写代码，面试官就喝水去了，然后我没意识到有两面题，只做了第一面的两道告诉面试官我做好了，他过来了，我跟他讲解代码（因为字迹实在难看清😂），在他的引导下慢慢把第二题进行优化。接着就是问问计算机基础的一些知识。面了有将近一个小时，这是我第一次面试，流了一身的汗。<br>我对面试结果是很不乐观的，因为我是在 04-1X 才知道这是已经接近实习招聘尾声。基本上大多数公司的内推什么的都弄完了，而我也是后知后觉，04-14 晚上做简历，因为听说腾讯 04-15 截止投递实习简历，到 04-15 早上，我做完简历就投了。可能是里面有一些学长学姐吧，当天下午就收到内推通知并告知完善简历，接着晚上就收到通知明天去面试。整个感觉很惊喜，但是其实后来跪了之后想想其实是自己没有做好准备，根本不知道准备实习人家从三月份就开始找了，所以有信息来源很重要。本来以为一面要挂的结果第二天晚上就通知过了并且过一天第二面。</p>
<p><code>二面：04-18</code><br>这一面很崩，后来才知道可能是压力面。说实话，第一面能过之后我已经放松了很多。二面内容和 Android 一毛钱关系都没有。同样一开始聊聊项目，然后桌子上有一堆大概十厘米厚的 A4 纸，拿一张，口述一道题然后写代码，这里提醒下大家如果遇到这种情况，最好在动笔前问清楚问题条件，比如我一动笔写了一点然后问他字符串是以什么形式存储的，然后他回答了 char *，接着给我感觉有点不太舒服，气氛很严肃，但是我又问了一个问题：是写伪代码还是？结果崩了，他立马说，都这时候了还写什么伪代码！好，我默默的划掉，又写了一段代码，由于混在一起，我就把代码又抄了一遍，但是有些语句一开始抄漏所以出现了两句代码在一行的情况。。。他看了边叹气边说：“这些的什么，乱七八糟的，缩进XXXXXXXXX”，然后我弱弱地说要不我再抄一遍把格式调调？结果他说还调什么调，浪费我时间！😂😂😂😂😂😂把我吓坏了，然后弱弱的给他讲解了代码，由于代码写的还不错，这里他没揪我的小辫子。然后他又说给你来一道博弈题？？？我黑人问号，我面的是 Android 吗？口述完题目后，他看到了我有点高兴，问我是不是看过类似的题目？我诚实的回答是。结果他说给你出道简单一点的题？？？？？念完题目之后我一脸懵逼，结果最后我对题目的看法和面试官不符，然后挂了。总结就是：抱歉，我不会演戏。。。当时想如果我稍微冷静一点，把博弈题拿下应该这面能过吧，但是没有如果。。。</p>
<h4 id="第二家公司（华为）1-实习-跪"><a href="#第二家公司（华为）1-实习-跪" class="headerlink" title="第二家公司（华为）1. 实习-跪"></a>第二家公司（华为）1. 实习-跪</h4><p><code>技术面：05-13</code><br>由于面试官不是做 Android，给我感觉连 Java 相关都不是，所以全程在聊天，什么你家在哪里？为什么不读研？你能接受加班吗？之类的。。。。大概二十多分钟，结束得很轻松。</p>
<p><code>综合面：05-13</code><br>由于技术面没问技术，所以这面大概就是和前面问的问题差多，时间也是差不多，感觉很水。。。</p>
<p>补充：前面都是同一天面完，感觉很诡异，不太像面试。。。回到学校后，过几天面试状态就是录用排序中。算是面试过了，然后一两周过后有同班的同学收到实习 offer，而我没消息。直到听说实习 offer 都发完了我才知道我挂了。所以说华为的面试通过和 offer 还有一段资源池的距离。后来一个学长 hr 来到学校找同学谈话，这时我被告知技术面给了个 B+。。。这个对我后面影响挺大的，然后综合面是 OK 的。所以面试时算过，本来也可以给 offer 但是没有岗位，只招一个 Android 实习的 🙂。但是这时候我还可以用这个安慰自己，不是你差，是市场需求，这是没办法的事。后续的是就是学长跟我谈了谈人生规划啊，然后推荐我参加优招。后面就是优招的故事了；</p>
<h4 id="第三家公司（阿里）实习-跪"><a href="#第三家公司（阿里）实习-跪" class="headerlink" title="第三家公司（阿里）实习-跪"></a>第三家公司（阿里）实习-跪</h4><p><code>一面：05-20</code><br>阿里是在线面试，给我的感觉是面过最难的，问得我无从回答，因为我基本没有项目经验，什么说说你在开发中碰到印象最深刻的问题是什么？遇到网上怎么也查不到答案的问题怎么办？还有你对 RN（当时只知道有个 RN 开发，并不清楚是什么） 开发怎么看？反正我答不上来，所以直接毙了。后面他问我有什么问题问他，我问他他对我面试感觉怎么样？他说我基础不行，然后我又问了要怎么学习？他说 Java 要学好，反射注解什么的。总之就是基础要扎实。。。</p>
<h4 id="第二家公司（华为）2-优招-过"><a href="#第二家公司（华为）2-优招-过" class="headerlink" title="第二家公司（华为）2. 优招-过"></a>第二家公司（华为）2. 优招-过</h4><p><code>补技术面：07-14</code><br>由于前面的实习面试给了个 B+，所以这次要补一个技术面。面试官也不是做 Android 的，不过是和 Java 相关的，所以基本就是问我 Java 了。也是开始聊聊项目和生活，然后问问 Java 内存泄漏，GC，接着考考算法，一道迷宫的题目，说下用深度优先和广度优先遍历的实现思想，进而问如果要找出一条最少步骤的路走出迷宫怎么办？基本都答上来了，最后他说我问你一个 Java 问题，我以为会很难。结果他说被 final 关键字修饰的类会怎么样？我迟疑了一下，说了答案。。。然后面试就结束了。给我的感觉应该是能过的。</p>
<p><code>BOSS 面：07-14</code><br>等了好久，最后排队排不上上午的了，然后发了餐券去吃了个饭回来面试。面试过程和实习面试时差不多，但是那个面试官的级别感觉挺高的，白头发特别多，估计 50+ 吧，最后加了个群，面试结束了。感觉没什么感觉，当时面试的研究生特别多，所以我感觉可能要 GG。</p>
<p>等了两个多月后，等到 09-21 发来的签约短信，09-22 以白菜价签了三方。是自己满意的城市加上整个暑假都在学校，09 月份投了十多家公司和做了 7-8份笔试题，心太累实在是不想等了。。。签的过程中有个更改城市的小插曲，hr 很好，忙到晚上 7 点多才结束，在这表示感谢。还有一个小插曲是当天有一个腾讯的面试，这是我的收到的第一个秋招面试，由于签了华为的三方，所以也没有去面了，准确说，其实我没有秋招，除了投了十几分简历和做了几次笔试。</p>
<h2 id="2-面试准备"><a href="#2-面试准备" class="headerlink" title="2. 面试准备"></a>2. 面试准备</h2><blockquote>
<p>这里主要叙述我的暑假和九月上旬这个面试准备过程和自己对面是准备的看法。</p>
</blockquote>
<p>说实话，没有实习 offer 对我算是有点打击的。所以我就打算暑假不回家好好复习基础知识，我觉得对于一个本科生来说，基础扎实才是你的优势，对于这里可能每个人看法不一，对于每个方向可能有差距吧，这里我只是平静地表达我的观点。</p>
<p>所以我基本放下 Android 了，只是挑热点面试问题过过。说下我做过的努力：</p>
<p>1.<a href="https://juejin.im/post/598454dcf265da3e26095dca" target="_blank" rel="external">重拾数据结构</a><br>2.<a href="https://juejin.im/post/59a7b8c9f265da24777a07da" target="_blank" rel="external">重拾操作系统</a><br>3.<a href="https://juejin.im/post/59ad4cd56fb9a02477075780" target="_blank" rel="external">重读 JVM</a><br>4.<a href="http://fitzeng.org/2017/07/08/AndroidBlogCollection/">Android Blog Collection</a><br>5.<a href="http://fitzeng.org/2017/09/11/handler/">Handler 机制再了解</a></p>
<p>以上是以 Blog 形式进行了总结的，还有部分书籍没有总结的。</p>
<p><img src="/2017/09/22/restart/books.png" alt=""></p>
<p>里面的看了有 30% 吧，都是采取不重要的粗读重要的精读模式。电子版下载 <a href="http://pan.baidu.com/s/1o7LcZCe" target="_blank" rel="external">链接 : http://pan.baidu.com/s/1o7LcZCe</a> 密码 : 0p0c 。希望大家有条件去支持纸质书吧，我对知识创造者还是很尊重的，因为自己发现写 Blog 每个礼拜一篇都写不来，但是对于部分学习计算机的人来说，书确实有点多，也要花很多钱，所以取舍之下就是有条件的现在支持原作者，没条件的以后有条件了再支持。好像偏题了。。。</p>
<p>期间看过 Android 开发艺术探索，Android 群英传，Android 进阶之光。之前还看过 编程之美，编程珠玑，编程之法，都没有自己敲代码实现，所以处于有思路但不能写代码实现的状态。然后就是一些专业课课本了。对于读书这件事我觉得没有必要为一个知识点死磕，我一般就是往后翻，基本两天跳着‘看’完一本书。时间固定的情况下宁愿跳着多看几遍，也不追求一遍仔细看完。因为你面临的结果就是记不住，没有重点的重复刺激下知识网络建立不起来。往往阅读到后面，前面的疑问就会迎刃而解。</p>
<p>然后说说岗位吧，以后我可能就不会再写和 Android 相关的文章了，签的工作是云计算所以打算学学 Python 和 OpenStack 之类的，从新开始接触一个新的领域。所以如果你不是对一个岗位持有非做不可的态度，其实我觉得那就不要太在意那些花哨的东西，注重基础的积累。比如之前面试有问我学过什么框架吗？我说没学过，然后这个话题就跳过了。当然学过加分，没学过我觉得不减分吧，毕竟应届生。但是一个 Java 基础的语言特性答不上来那就有点说不过去了。而且框架的精髓在读源码之后转化为自己的理解从而应用在自己代码中，而不是会使用框架，这种价值不大。如果你是大神，基础扎实，那这些就是你的进阶，你的加分项，本质不一样。就像试卷的必答题答完了肯定是去答选做题，但是有些人连必答题都没做完就跟着别人翻卷子是不是有点。。。总之就是注重语言本身，而不是语言衍生品。</p>
<p>接着说说面经，这是很好的东西，但是也是很不好的东西，看你的认知。有人对面经的态度是题库，觉得看完记着我面试就能过了，同一个问题，不同的人说相同的答案面试官也能知道哪个厉害哪个水。大家可以试试对一个自己不理解的技术问题尝试解释会怎样？你一迟疑，面试官就会反问你，最后只有一个字崩！而且那些面经提供的答案往往是符合作者的思考思路，不一定对你适用。所以我对面经的态度是类似于考纲，至于考纲和题库的区别留给读者思考吧。</p>
<p>然后我面试准备过程中参考的好的‘考纲’</p>
<ol>
<li><a href="http://www.jianshu.com/p/f661953ba032" target="_blank" rel="external">[干货，阅后进BAT不是梦] 面试心得与总结—BAT、网易、蘑菇街</a></li>
<li>自己动手丰衣足食，前面一篇是我认为的好面经，可以作为查找参考。</li>
</ol>
<h2 id="3-最后"><a href="#3-最后" class="headerlink" title="3. 最后"></a>3. 最后</h2><p>如果你觉得对你有帮助就点下赞吧，让更多的人看到，希望能帮到更多的人。这是我第一篇求赞的文章，因为确实想和大家分享我的想法。谢谢。</p>
<p>再如果你有相同或者不同的意见，欢迎评论区留言大家互相讨论呀~</p>
<p>然后国际惯例：<a href="http://fitzeng.org/">GitHub </a> &amp;&amp; <a href="https://github.com/mk43" target="_blank" rel="external"> Blog</a> 欢迎来观光 ^_^</p>
<p>多谢阅读！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0. 前言&quot;&gt;&lt;/a&gt;0. 前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;我的求职生活是从今年的 04-16 找实习开始到 09-22 拿到优招(秋招) Offer结束，中间共经历过了三家公司面试，面试经验不足，而且最近的面试已距现在两个多月了，细节记不清了，所以这不太算是面经，只是我个人对我自己找工作这小半年的总结以及我对找工作这件事的认识。首先说明我不是大神，只能从平静叙述整个找工作的过程，希望你能从中体会到一点什么就很满意了，在此先祝大家找工作顺利！&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Life" scheme="http://fitzeng.org/tags/Life/"/>
    
      <category term="Job" scheme="http://fitzeng.org/tags/Job/"/>
    
  </entry>
  
  <entry>
    <title>重识 Android</title>
    <link href="http://fitzeng.org/2017/09/19/reAndroid/"/>
    <id>http://fitzeng.org/2017/09/19/reAndroid/</id>
    <published>2017-09-19T03:27:00.000Z</published>
    <updated>2017-09-19T11:41:51.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Android 基础知识整理。</p>
</blockquote>
<a id="more"></a>
<h3 id="1-Activity"><a href="#1-Activity" class="headerlink" title="1. Activity"></a>1. Activity</h3><h4 id="1-1-Activity-生命周期"><a href="#1-1-Activity-生命周期" class="headerlink" title="1.1 Activity 生命周期"></a>1.1 Activity 生命周期</h4><p>状态：<code>running</code> <code>paused</code> <code>stopped</code> <code>killed</code></p>
<p>启动：onCreate() -&gt; onStart() -&gt; onResume()</p>
<p>点击 Home ：-&gt; onPause() -&gt; onStop()</p>
<p>重现：-&gt; onRestart() -&gt; onStart() -&gt; onResume()</p>
<p>退出：-&gt; onPause() -&gt; onStop() -&gt; onDestory()</p>
<p>进程优先级：<code>前台</code>(可交互) <code>可见</code>(失去焦点) <code>服务</code> <code>后台</code>(不可见) <code>空</code>(缓存用)</p>
<h4 id="1-2-Activity-任务栈"><a href="#1-2-Activity-任务栈" class="headerlink" title="1.2 Activity 任务栈"></a>1.2 Activity 任务栈</h4><p>standard：标准模式(每次都创建)</p>
<p>singleTop：栈顶复用模式(栈顶检测)</p>
<p>singleTask：栈内复用模式(栈内检测)</p>
<p>singleInstance：单实例模式(独立的任务栈)</p>
<h4 id="1-3-Activity-启动模式"><a href="#1-3-Activity-启动模式" class="headerlink" title="1.3 Activity 启动模式"></a>1.3 Activity 启动模式</h4><h4 id="1-4-Scheme-跳转协议"><a href="#1-4-Scheme-跳转协议" class="headerlink" title="1.4 Scheme 跳转协议"></a>1.4 Scheme 跳转协议</h4><h4 id="1-5-参考"><a href="#1-5-参考" class="headerlink" title="1.5 参考"></a>1.5 参考</h4><h3 id="2-Fragment"><a href="#2-Fragment" class="headerlink" title="2. Fragment"></a>2. Fragment</h3><h4 id="2-1-生命周期"><a href="#2-1-生命周期" class="headerlink" title="2.1 生命周期"></a>2.1 生命周期</h4><p>Create: 准备视图</p>
<p><code>onAttach</code>: Fragment 与 Activity 关联</p>
<p><code>onCreate</code>: 创建 Fragment 对象</p>
<p><code>onCreateView</code>: 创建视图</p>
<p><code>onActivityCreated</code>: Activity 对象创建完成</p>
<p>Start: 加载视图</p>
<p><code>onStart</code>: Fragment 可见</p>
<p>Resume: 获取焦点</p>
<p><code>onResume</code>: Fragment 可交互 </p>
<p>Pause 失去焦点</p>
<p><code>onPause</code>: Fragment 失去焦点</p>
<p>Stop 视图不可见</p>
<p><code>onStop</code>: Fragment 不可见</p>
<p>Destory 销毁对象</p>
<p><code>onDestoryView</code>: Fragment 视图销毁</p>
<p><code>onDestory</code>: 对象销毁</p>
<p><code>onDetach</code>: 解绑 Fragment 并销毁对象</p>
<blockquote>
<p>以上为个人理解，不是完整的视图加载过程，只是属于一个理解分析的过程。</p>
</blockquote>
<h4 id="2-2-Fragment-添加到-Activity-中"><a href="#2-2-Fragment-添加到-Activity-中" class="headerlink" title="2.2 Fragment 添加到 Activity 中"></a>2.2 Fragment 添加到 Activity 中</h4><p>静态加载：XML</p>
<p>动态加载： FragmentManager</p>
<ul>
<li><p>FragmentPagerAdapter(detach)</p>
<blockquote>
<p>适用于页面较少的情况，不销毁 Fragment 只与 Activity 脱离。</p>
</blockquote>
</li>
<li><p>FragmentStatePagerAdapter(remove)</p>
<blockquote>
<p>适用于页面较多的情况，直接移除 Fragment。</p>
</blockquote>
</li>
</ul>
<h4 id="2-3-Fragment-通信"><a href="#2-3-Fragment-通信" class="headerlink" title="2.3 Fragment 通信"></a>2.3 Fragment 通信</h4><ol>
<li>Fragment 中调用 Activity : 调用 getActivity()</li>
<li>Activity 中调用 Fragment : Fragment 回调函数</li>
<li>Fragment 中调用 Fragment : findFragmentById()</li>
</ol>
<h4 id="2-4-典型方法"><a href="#2-4-典型方法" class="headerlink" title="2.4 典型方法"></a>2.4 典型方法</h4><p><code>replace</code>: 替换 Fragment 实例 </p>
<p><code>add</code>: 添加 Fragment 实例 </p>
<p><code>remove</code>: 移除 Fragment 实例</p>
<h4 id="2-5参考"><a href="#2-5参考" class="headerlink" title="2.5参考"></a>2.5参考</h4><ol>
<li><a href="http://blog.csdn.net/android_tutor/article/details/5772285" target="_blank" rel="external">Android_Tutor : 两分钟彻底让你明白Android Activity生命周期(图文)!</a></li>
</ol>
<h3 id="3-Service"><a href="#3-Service" class="headerlink" title="3. Service"></a>3. Service</h3><h4 id="3-1-Service-和-Thread"><a href="#3-1-Service-和-Thread" class="headerlink" title="3.1 Service 和 Thread"></a>3.1 Service 和 Thread</h4><p>Service: 依托于所在的线程并且在后台运行，不可做耗时操作，否则会 ANR。<br>Thread: 主要是出处理耗时操作。</p>
<h3 id="4-BroadCast-Receiver"><a href="#4-BroadCast-Receiver" class="headerlink" title="4. BroadCast Receiver"></a>4. BroadCast Receiver</h3>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Android 基础知识整理。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://fitzeng.org/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Handler 机制再了解</title>
    <link href="http://fitzeng.org/2017/09/11/handler/"/>
    <id>http://fitzeng.org/2017/09/11/handler/</id>
    <published>2017-09-11T03:27:00.000Z</published>
    <updated>2017-09-12T01:32:21.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>这里主要是先了解整个消息传递的过程，知道这样做的好处和必要性。而不是直接介绍里面的几个关键类，然后介绍这个机制，这样容易头晕。而且网络上已经有很多这样的文章了，那些作者所站的高度对于我这种初学者来说有点高，我理解起来是比较稀里糊涂的，所以这里从一个问题出发，一步一步跟踪代码，这里只是搞清楚 handler 是怎么跨线程收发消息的，具体实现细节还是参考网上的那些大神的 Blog 比较权威。<br>PS. 本来是想分章节书写，谁知道这一套军体拳打下来收不住了，所以下面基本是以一种很流畅的过程解释而不是很跳跃，细心看应该会对理解 Handler 机制有所收获。</p>
</blockquote>
<a id="more"></a>
<p>Q1: 假如有一个耗时的数据处理，而且数据处理的结果是对 UI 更新影响的，而 Android 中 UI 更新不是线程安全的，所以规定只能在主线程中更新。</p>
<p>下面我们有两种选择：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">主线程版本：</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MainActivity"</span>;</div><div class="line">    <span class="keyword">private</span> Button btnTest;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.layout_test);</div><div class="line"></div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        btnTest = (Button) findViewById(R.id.btn_test);</div><div class="line">        btnTest.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line"></div><div class="line">                <span class="comment">// 假装数据处理</span></div><div class="line">                <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">                <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        Thread.sleep(<span class="number">1000</span>);</div><div class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                </div><div class="line">                <span class="comment">// 假装更新 UI</span></div><div class="line">                Log.d(TAG, <span class="string">"Handle it！"</span> + i);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>直接在主线程中处理数据，接着直接根据处理结果更新 UI。我想弊端大家都看到了，小则 UI 卡顿，大则造成 <a href="http://fitzeng.org/2017/04/07/RecurrentANR/">ANR</a>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">子线程版本：</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MainActivity"</span>;</div><div class="line">    <span class="keyword">private</span> Button btnTest;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.layout_test);</div><div class="line"></div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        btnTest = (Button) findViewById(R.id.btn_test);</div><div class="line">        btnTest.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                        <span class="comment">// 假装数据处理</span></div><div class="line">                        <span class="keyword">int</span> i;</div><div class="line">                        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">                            <span class="keyword">try</span> &#123;</div><div class="line">                                Thread.sleep(<span class="number">1000</span>);</div><div class="line">                            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                                e.printStackTrace();</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                        <span class="comment">// 返回处理结果</span></div><div class="line">                        handler.sendEmptyMessage(i);</div><div class="line">                    &#125;</div><div class="line">                &#125;).start();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Handler handler = <span class="keyword">new</span> Handler() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            <span class="comment">// 假装更新 UI</span></div><div class="line">            Log.d(TAG, <span class="string">"Handle MSG = "</span> + msg.what);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这是一种典型的处理方式，开一个子线程处理数据，通过 Android 中提供的 Handler 机制进行跨线程通讯，把处理结果返回给主线程，进而更新 UI。这里我们就是探讨 Handler 是如何把数据发送过去的。</p>
<p><img src="/2017/09/11/handler/subThread.png" alt=""></p>
<p>到这里，我们了解到的就是一个 Handler 的黑盒机制，子线程发送，主线程接收。接下来，我们不介绍什么 <code>ThreadLocal</code>、<code>Looper</code> 和 <code>MessageQueue</code>。而是直接从上面的代码引出它们的存在，从原理了解它们存在的必要性，然后在谈它们内部存在的细节。</p>
<p>一切罪恶源于 <code>handler.sendEmptyMessage();</code>，最终找到以下函数 <code>sendMessageAtTime(Message msg, long uptimeMillis)</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">Handler.class</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Enqueue a message into the message queue after all pending messages</div><div class="line"> * before the absolute time (in milliseconds) &lt;var&gt;uptimeMillis&lt;/var&gt;.</div><div class="line"> * &lt;b&gt;The time-base is &#123;<span class="doctag">@link</span> android.os.SystemClock#uptimeMillis&#125;.&lt;/b&gt;</div><div class="line"> * Time spent in deep sleep will add an additional delay to execution.</div><div class="line"> * You will receive it in &#123;<span class="doctag">@link</span> #handleMessage&#125;, in the thread attached</div><div class="line"> * to this handler.</div><div class="line"> * </div><div class="line"> * <span class="doctag">@param</span> uptimeMillis The absolute time at which the message should be</div><div class="line"> *         delivered, using the</div><div class="line"> *         &#123;<span class="doctag">@link</span> android.os.SystemClock#uptimeMillis&#125; time-base.</div><div class="line"> *         </div><div class="line"> * <span class="doctag">@return</span> Returns true if the message was successfully placed in to the </div><div class="line"> *         message queue.  Returns false on failure, usually because the</div><div class="line"> *         looper processing the message queue is exiting.  Note that a</div><div class="line"> *         result of true does not mean the message will be processed -- if</div><div class="line"> *         the looper is quit before the delivery time of the message</div><div class="line"> *         occurs then the message will be dropped.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sendMessageAtTime</span><span class="params">(Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</div><div class="line">    MessageQueue queue = mQueue;</div><div class="line">    <span class="keyword">if</span> (queue == <span class="keyword">null</span>) &#123;</div><div class="line">        RuntimeException e = <span class="keyword">new</span> RuntimeException(</div><div class="line">                <span class="keyword">this</span> + <span class="string">" sendMessageAtTime() called with no mQueue"</span>);</div><div class="line">        Log.w(<span class="string">"Looper"</span>, e.getMessage(), e);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> enqueueMessage(queue, msg, uptimeMillis);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>MessageQueue</code> 出来了，我们避免不了了。里面主要是 <code>Message next()</code> 和 <code>enqueueMessage(Message msg, long when)</code> 方法值得研究，但是现在还不是时候。</p>
<p>从 <code>MessageQueue queue = mQueue;</code> 中可以看出我们的 <code>handler</code> 对象里面包含一个 mQueue 对象。至于里面存的什么怎么初始化的现在也不用太关心。大概有个概念就是这是个消息队列，存的是消息就行，具体实现细节后面会慢慢水落石出。<br>后面的代码就是说如果 queue 为空则打印 log 返回 false；否则执行 <code>enqueueMessage(queue, msg, uptimeMillis);</code> 入队。那就好理解了，handler 发送信息其实是直接把信息封装进一个消息队列。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Handler.class</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(MessageQueue queue, Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</div><div class="line">    msg.target = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">if</span> (mAsynchronous) &#123;</div><div class="line">        msg.setAsynchronous(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> queue.enqueueMessage(msg, uptimeMillis);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里涉及 Message，先说下这个类的三个成员变量：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*package*/</span> Handler target;</div><div class="line">    </div><div class="line"><span class="comment">/*package*/</span> Runnable callback;</div><div class="line">    </div><div class="line"><span class="comment">/*package*/</span> Message next;</div></pre></td></tr></table></figure>
<p>所以 <code>msg.target = this;</code> 把当前 handler 传给了 msg。</p>
<p>中间的 if 代码先忽略，先走主线：执行了 <code>MessageQueue</code> 的 <code>enqueueMessage(msg, uptimeMillis);</code>方法。接着看源码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">MessageQueue.class</div><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(Message msg, <span class="keyword">long</span> when)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (msg.target == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Message must have a target."</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (msg.isInUse()) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(msg + <span class="string">" This message is already in use."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (mQuitting) &#123;</div><div class="line">            IllegalStateException e = <span class="keyword">new</span> IllegalStateException(</div><div class="line">                    msg.target + <span class="string">" sending message to a Handler on a dead thread"</span>);</div><div class="line">            Log.w(TAG, e.getMessage(), e);</div><div class="line">            msg.recycle();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        msg.markInUse();</div><div class="line">        msg.when = when;</div><div class="line">        Message p = mMessages;</div><div class="line">        <span class="keyword">boolean</span> needWake;</div><div class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span> || when == <span class="number">0</span> || when &lt; p.when) &#123;</div><div class="line">            <span class="comment">// New head, wake up the event queue if blocked.</span></div><div class="line">            msg.next = p;</div><div class="line">            mMessages = msg;</div><div class="line">            needWake = mBlocked;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// Inserted within the middle of the queue.  Usually we don't have to wake</span></div><div class="line">            <span class="comment">// up the event queue unless there is a barrier at the head of the queue</span></div><div class="line">            <span class="comment">// and the message is the earliest asynchronous message in the queue.</span></div><div class="line">            needWake = mBlocked &amp;&amp; p.target == <span class="keyword">null</span> &amp;&amp; msg.isAsynchronous();</div><div class="line">            Message prev;</div><div class="line">            <span class="keyword">for</span> (;;) &#123;</div><div class="line">                prev = p;</div><div class="line">                p = p.next;</div><div class="line">                <span class="keyword">if</span> (p == <span class="keyword">null</span> || when &lt; p.when) &#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (needWake &amp;&amp; p.isAsynchronous()) &#123;</div><div class="line">                    needWake = <span class="keyword">false</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            msg.next = p; <span class="comment">// invariant: p == prev.next</span></div><div class="line">            prev.next = msg;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// We can assume mPtr != 0 because mQuitting is false.</span></div><div class="line">        <span class="keyword">if</span> (needWake) &#123;</div><div class="line">            nativeWake(mPtr);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码有点长，不影响主线的小细节就不介绍了，那些也很容易看懂的，但是原理还是值得分析。<br><code>if (mQuitting)...</code>，直接看看源码初始化赋值的函数是在 <code>void quit(boolean safe)</code> 函数里面，这里猜测可能是退出消息轮训，消息轮训的退出方式也是值得深究，不过这里不影响主线就不看了。 <code>msg.markInUse(); msg.when = when;</code> 标记消息在用而且继续填充  msg，下面就是看注释了。我们前面介绍的 Message 成员变量 next 就起作用了，把 msg 链在一起了。所以这里的核心就是把 msg 以一种链表形式插进去。似乎这一波分析结束了，在这里划张图总结下：<br><img src="/2017/09/11/handler/sendMsg.png" alt=""><br>推荐自己根据所观察到的变量赋值进行绘制图画，这样印象更加深刻。</p>
<p>OK，消息是存进去了，而且也是在 handler 所在的线程中。那么到底怎么取出信息呢？也就是前面小例子</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Handler handler = <span class="keyword">new</span> Handler() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">        <span class="comment">// 假装更新 UI</span></div><div class="line">        Log.d(TAG, <span class="string">"Handle MSG = "</span> + msg.what);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><code>handleMessage()</code> 什么时候调用？这里基本断了线索。但是如果你之前哪怕看过类似的一篇文章应该都知道其实在 Android 启动时 main 函数就做了一些操作。这些操作是必要的，这也就是为什么我们不能直接在子线程中 <code>new Handler();</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"ActivityThreadMain"</span>);</div><div class="line">	SamplingProfilerIntegration.start();</div><div class="line">	</div><div class="line">	<span class="comment">// CloseGuard defaults to true and can be quite spammy.  We</span></div><div class="line">	<span class="comment">// disable it here, but selectively enable it later (via</span></div><div class="line">	<span class="comment">// StrictMode) on debug builds, but using DropBox, not logs.</span></div><div class="line">	CloseGuard.setEnabled(<span class="keyword">false</span>);</div><div class="line">	</div><div class="line">	Environment.initForCurrentUser();</div><div class="line">	</div><div class="line">	<span class="comment">// Set the reporter for event logging in libcore</span></div><div class="line">	EventLogger.setReporter(<span class="keyword">new</span> EventLoggingReporter());</div><div class="line">	</div><div class="line">	<span class="comment">// Make sure TrustedCertificateStore looks in the right place for CA certificates</span></div><div class="line">	<span class="keyword">final</span> File configDir = Environment.getUserConfigDirectory(UserHandle.myUserId());</div><div class="line">	TrustedCertificateStore.setDefaultUserDirectory(configDir);</div><div class="line">	</div><div class="line">	Process.setArgV0(<span class="string">"&lt;pre-initialized&gt;"</span>);</div><div class="line">	</div><div class="line">	Looper.prepareMainLooper(); <span class="comment">// -------1</span></div><div class="line">	</div><div class="line">	ActivityThread thread = <span class="keyword">new</span> ActivityThread();</div><div class="line">	thread.attach(<span class="keyword">false</span>);</div><div class="line">	</div><div class="line">	<span class="keyword">if</span> (sMainThreadHandler == <span class="keyword">null</span>) &#123;</div><div class="line">	    sMainThreadHandler = thread.getHandler(); <span class="comment">// -------2</span></div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">false</span>) &#123;</div><div class="line">	    Looper.myLooper().setMessageLogging(<span class="keyword">new</span></div><div class="line">	            LogPrinter(Log.DEBUG, <span class="string">"ActivityThread"</span>));</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">// End of event ActivityThreadMain.</span></div><div class="line">	Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">	Looper.loop(); <span class="comment">// -------3</span></div><div class="line">	</div><div class="line">	<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Main thread loop unexpectedly exited"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看出这里在获取 sMainThreadHandler 之前进行了 <code>Looper.prepareMainLooper();</code> 操作，之后进行了 <code>Looper.loop();</code> 操作。</p>
<p>下面开始分析：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">Loopr.class</div><div class="line"> <span class="comment">/** Initialize the current thread as a looper.</span></div><div class="line">  * This gives you a chance to create handlers that then reference</div><div class="line">  * this looper, before actually starting the loop. Be sure to call</div><div class="line">  * &#123;<span class="doctag">@link</span> #loop()&#125; after calling this method, and end it by calling</div><div class="line">  * &#123;<span class="doctag">@link</span> #quit()&#125;.</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</div><div class="line">    prepare(<span class="keyword">true</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (sThreadLocal.get() != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Only one Looper may be created per thread"</span>);</div><div class="line">    &#125;</div><div class="line">    sThreadLocal.set(<span class="keyword">new</span> Looper(quitAllowed));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Initialize the current thread as a looper, marking it as an</div><div class="line"> * application's main looper. The main looper for your application</div><div class="line"> * is created by the Android environment, so you should never need</div><div class="line"> * to call this function yourself.  See also: &#123;<span class="doctag">@link</span> #prepare()&#125;</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepareMainLooper</span><span class="params">()</span> </span>&#123;</div><div class="line">    prepare(<span class="keyword">false</span>);</div><div class="line">    <span class="keyword">synchronized</span> (Looper.class) &#123;</div><div class="line">        <span class="keyword">if</span> (sMainLooper != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"The main Looper has already been prepared."</span>);</div><div class="line">        &#125;</div><div class="line">        sMainLooper = myLooper();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Return the Looper object associated with the current thread.  Returns</div><div class="line"> * null if the calling thread is not associated with a Looper.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="meta">@Nullable</span> <span class="function">Looper <span class="title">myLooper</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> sThreadLocal.get();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>前两个方法是在自己创建 Looper 的时候用，第三个是主线程自己用的。由于这里消息传递以主线程为线索。<code>prepare(false);</code>说明了这是主线程，在 <code>sThreadLocal.set(new Looper(quitAllowed));</code> 中的 <code>quitAllowed</code> 为 false 则说明主线程的 MessageQueue 轮训不能 quit。这句代码里还有 ThreadLocal 的 set() 方法。先不深究实现，容易晕，这里需要知道的就是把一个 Looper 对象“放进”了 ThreadLocal，换句话说，通过 ThreadLocal 可以获取不同的 Looper。<br>最后的 <code>sThreadLocal.get();</code> 展示了 get 方法。说明到这时 Looper 已经存在啦。<br>现在看看 Looper 类的成员变量吧！</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Looper.class</div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Looper&gt; sThreadLocal = <span class="keyword">new</span> ThreadLocal&lt;Looper&gt;();</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Looper sMainLooper;  <span class="comment">// guarded by Looper.class</span></div><div class="line"></div><div class="line"><span class="keyword">final</span> MessageQueue mQueue;</div><div class="line"><span class="keyword">final</span> Thread mThread;</div></pre></td></tr></table></figure>
<p>在这里先介绍一下 ThreadLocal 的上帝视角吧。直接源码，可以猜测这是通过一个 <code>ThreadLocalMap</code> 的内部类对线程进行一种 map。传进来的泛型 T 正是我们的 looper。所以 ThreadLocal 可以根据当前线程查找该线程的 Looper，具体怎么查找推荐看源码，这里就不介绍了。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Returns the value in the current thread's copy of this</div><div class="line"> * thread-local variable.  If the variable has no value for the</div><div class="line"> * current thread, it is first initialized to the value returned</div><div class="line"> * by an invocation of the &#123;@link #initialValue&#125; method.</div><div class="line"> *</div><div class="line"> * @return the current thread's value of this thread-local</div><div class="line"> */</div><div class="line">public T get() &#123;</div><div class="line">    Thread t = Thread.currentThread();</div><div class="line">    ThreadLocalMap map = getMap(t);</div><div class="line">    if (map != null) &#123;</div><div class="line">        ThreadLocalMap.Entry e = map.getEntry(this);</div><div class="line">        if (e != null)</div><div class="line">            return (T)e.value;</div><div class="line">    &#125;</div><div class="line">    return setInitialValue();</div><div class="line">&#125;</div><div class="line"></div><div class="line"> * Sets the current thread's copy of this thread-local variable</div><div class="line"> * to the specified value.  Most subclasses will have no need to</div><div class="line"> * override this method, relying solely on the &#123;@link #initialValue&#125;</div><div class="line"> * method to set the values of thread-locals.</div><div class="line"> *</div><div class="line"> * @param value the value to be stored in the current thread's copy of</div><div class="line"> *        this thread-local.</div><div class="line"> */</div><div class="line">public void set(T value) &#123;</div><div class="line">    Thread t = Thread.currentThread();</div><div class="line">    ThreadLocalMap map = getMap(t);</div><div class="line">    if (map != null)</div><div class="line">        map.set(this, value);</div><div class="line">    else</div><div class="line">        createMap(t, value);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>分析到这里，handler 和 looper 都有了，但是消息还是没有取出来？<br>这是看第三句 <code>Looper.loop();</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">Looper.class</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Run the message queue in this thread. Be sure to call</div><div class="line"> * &#123;<span class="doctag">@link</span> #quit()&#125; to end the loop.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Looper me = myLooper();</div><div class="line">    <span class="keyword">if</span> (me == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No Looper; Looper.prepare() wasn't called on this thread."</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">final</span> MessageQueue queue = me.mQueue;</div><div class="line"></div><div class="line">    <span class="comment">// Make sure the identity of this thread is that of the local process,</span></div><div class="line">    <span class="comment">// and keep track of what that identity token actually is.</span></div><div class="line">    Binder.clearCallingIdentity();</div><div class="line">    <span class="keyword">final</span> <span class="keyword">long</span> ident = Binder.clearCallingIdentity();</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (;;) &#123;</div><div class="line">        Message msg = queue.next(); <span class="comment">// might block</span></div><div class="line">        <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// No message indicates that the message queue is quitting.</span></div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// This must be in a local variable, in case a UI event sets the logger</span></div><div class="line">        <span class="keyword">final</span> Printer logging = me.mLogging;</div><div class="line">        <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</div><div class="line">            logging.println(<span class="string">"&gt;&gt;&gt;&gt;&gt; Dispatching to "</span> + msg.target + <span class="string">" "</span> +</div><div class="line">                    msg.callback + <span class="string">": "</span> + msg.what);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">long</span> traceTag = me.mTraceTag;</div><div class="line">        <span class="keyword">if</span> (traceTag != <span class="number">0</span> &amp;&amp; Trace.isTagEnabled(traceTag)) &#123;</div><div class="line">            Trace.traceBegin(traceTag, msg.target.getTraceName(msg));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            msg.target.dispatchMessage(msg);</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span> (traceTag != <span class="number">0</span>) &#123;</div><div class="line">                Trace.traceEnd(traceTag);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</div><div class="line">            logging.println(<span class="string">"&lt;&lt;&lt;&lt;&lt; Finished to "</span> + msg.target + <span class="string">" "</span> + msg.callback);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Make sure that during the course of dispatching the</span></div><div class="line">        <span class="comment">// identity of the thread wasn't corrupted.</span></div><div class="line">        <span class="keyword">final</span> <span class="keyword">long</span> newIdent = Binder.clearCallingIdentity();</div><div class="line">        <span class="keyword">if</span> (ident != newIdent) &#123;</div><div class="line">            Log.wtf(TAG, <span class="string">"Thread identity changed from 0x"</span></div><div class="line">                    + Long.toHexString(ident) + <span class="string">" to 0x"</span></div><div class="line">                    + Long.toHexString(newIdent) + <span class="string">" while dispatching to "</span></div><div class="line">                    + msg.target.getClass().getName() + <span class="string">" "</span></div><div class="line">                    + msg.callback + <span class="string">" what="</span> + msg.what);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        msg.recycleUnchecked();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一开始也是获取 Looper，但是那么多 Looper 怎么知道这是哪个 Looper 呢？这先放着待会马上解释。把 loop() 函数主要功能搞懂再说。<br>接下来就是获取 Looper 中的 MessageQueue了，等等，这里提出一个疑问，前面说了 Handler 中也存在 MessageQueue，那这之间存在什么关系吗？（最后你会发现其实是同一个）<br>先往下看，一个死循环，也就是轮训消息喽，中间有一句 <code>msg.target.dispatchMessage(msg);</code> 而前面介绍 msg.target 是 handler 型参数。所以和 handler 联系上了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Handler.class</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Handle system messages here.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatchMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (msg.callback != <span class="keyword">null</span>) &#123;</div><div class="line">        handleCallback(msg);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (mCallback.handleMessage(msg)) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        handleMessage(msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>逻辑很简单，总之就是调动了我们重写的 handleMessage() 方法。</p>
<p>Step 1：<code>Looper.prepare();</code></p>
<blockquote>
<p>在 Looper 中有一个静态变量 sThreadLocal，把创建的 looper “存在” 里面，创建 looper 的同时创建 MessageQueue，并且和当前线程挂钩。</p>
</blockquote>
<p>Step 2：<code>new Handler();</code> </p>
<blockquote>
<p>通过上帝 ThreadLocal，并根据当前线程，可获取 looper，进而获取 MessageQueue，Callback之类的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">Handler.class</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Use the &#123;<span class="doctag">@link</span> Looper&#125; for the current thread with the specified callback interface</div><div class="line"> * and set whether the handler should be asynchronous.</div><div class="line"> *</div><div class="line"> * Handlers are synchronous by default unless this constructor is used to make</div><div class="line"> * one that is strictly asynchronous.</div><div class="line"> *</div><div class="line"> * Asynchronous messages represent interrupts or events that do not require global ordering</div><div class="line"> * with respect to synchronous messages.  Asynchronous messages are not subject to</div><div class="line"> * the synchronization barriers introduced by &#123;<span class="doctag">@link</span> MessageQueue#enqueueSyncBarrier(long)&#125;.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> callback The callback interface in which to handle messages, or null.</div><div class="line"> * <span class="doctag">@param</span> async If true, the handler calls &#123;<span class="doctag">@link</span> Message#setAsynchronous(boolean)&#125; for</div><div class="line"> * each &#123;<span class="doctag">@link</span> Message&#125; that is sent to it or &#123;<span class="doctag">@link</span> Runnable&#125; that is posted to it.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@hide</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Callback callback, <span class="keyword">boolean</span> async)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (FIND_POTENTIAL_LEAKS) &#123;</div><div class="line">        <span class="keyword">final</span> Class&lt;? extends Handler&gt; klass = getClass();</div><div class="line">        <span class="keyword">if</span> ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &amp;&amp;</div><div class="line">                (klass.getModifiers() &amp; Modifier.STATIC) == <span class="number">0</span>) &#123;</div><div class="line">            Log.w(TAG, <span class="string">"The following Handler class should be static or leaks might occur: "</span> +</div><div class="line">                klass.getCanonicalName());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    mLooper = Looper.myLooper();</div><div class="line">    <span class="keyword">if</span> (mLooper == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">            <span class="string">"Can't create handler inside thread that has not called Looper.prepare()"</span>);</div><div class="line">    &#125;</div><div class="line">    mQueue = mLooper.mQueue; <span class="comment">// 前面的两个 MessageQueue 联系起来了，疑问已解答。</span></div><div class="line">    mCallback = callback;</div><div class="line">    mAsynchronous = async;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>这个函数可以说明在 new Handler() 之前该线程必需有 looper，所以要在这之前调用 <code>Looper.prepare();</code>。</p>
<p>Step 3：<code>Looper.loop();</code></p>
<blockquote>
<p>进行消息循环。</p>
</blockquote>
<p>基本到这里整个过程应该是清楚了，这里我画下我的理解。<br><img src="/2017/09/11/handler/threadLocal.png" alt=""></p>
<p>那么我们现在来看一下 handler 是怎么准确发送信息和处理信息的。注意在 handler 发送信息之前，1、2、3 步已经完成。所以该获取的线程已经获取，直接往该线程所在的 MessageQueue 里面塞信息就行了，反正该信息会在该 handler 所在线程的 looper 中循环，最终会通过消息的 target 参数调用 dispatchMessage()，而在 dispatchMessage() 中会调用我们重写的 handleMessage() 函数。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这里主要是先了解整个消息传递的过程，知道这样做的好处和必要性。而不是直接介绍里面的几个关键类，然后介绍这个机制，这样容易头晕。而且网络上已经有很多这样的文章了，那些作者所站的高度对于我这种初学者来说有点高，我理解起来是比较稀里糊涂的，所以这里从一个问题出发，一步一步跟踪代码，这里只是搞清楚 handler 是怎么跨线程收发消息的，具体实现细节还是参考网上的那些大神的 Blog 比较权威。&lt;br&gt;PS. 本来是想分章节书写，谁知道这一套军体拳打下来收不住了，所以下面基本是以一种很流畅的过程解释而不是很跳跃，细心看应该会对理解 Handler 机制有所收获。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://fitzeng.org/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>一个程序员使用 PPT 的小技巧</title>
    <link href="http://fitzeng.org/2017/09/06/pptAndDev/"/>
    <id>http://fitzeng.org/2017/09/06/pptAndDev/</id>
    <published>2017-09-06T03:27:00.000Z</published>
    <updated>2017-09-06T06:02:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前段时间，我写了一篇<a href="https://juejin.im/post/59ad4cd56fb9a02477075780" target="_blank" rel="external">《重读 JVM》</a>，<br>在文章下有人评论里面的图是怎么做的，下面是我给的回复：<br><img src="/2017/09/06/pptAndDev/comment.png" alt=""><br>然后想到自己在阅读其他大神些的 Blog 时，下面也有一批人在问作图工具什么的。然后我就想把自己的小技巧分享出来，如有雷同，纯属巧合。</p>
<a id="more"></a>
<h2 id="WHY-IS-PPT"><a href="#WHY-IS-PPT" class="headerlink" title="WHY IS PPT"></a>WHY IS PPT</h2><p>作为一个有点轻微洁癖的程序员，装的软件相同功能的基本不会超过两个。所以不想为写 Blog 画图而再装一个软件，再说并不是每篇 Blog 都要画图，但是要画图的 Blog 一画就是十几张，整理起来很不方便。所以我想到了 PPT，分页存储。其实在这之前我用 PPT 的很大一原因是写简历，之前简历是用 Word 做的，苦不堪言，而且版本保存很恶心。。。文件乱的很，所以想到用 PPT，没想到特别好用。下面开始介绍一下我的实操。</p>
<h2 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h2><h3 id="简历篇"><a href="#简历篇" class="headerlink" title="简历篇"></a>简历篇</h3><ul>
<li>第一步：创建 A4 大小的幻灯片</li>
</ul>
<p><img src="/2017/09/06/pptAndDev/resumeA4.png" alt=""></p>
<ul>
<li>第二步：设计简历</li>
</ul>
<p><img src="/2017/09/06/pptAndDev/draw.png" alt=""><br>这里就是利用插入形状自己设计了，基本够日常使用，我也不是什么 PPT 高手，如果你会使用动画那效果估计更加惊人。</p>
<ul>
<li>第三步：版本控制</li>
</ul>
<p><img src="/2017/09/06/pptAndDev/version.png" alt=""></p>
<p>利用注释！</p>
<ul>
<li>第四步：导出 PDF</li>
</ul>
<p>直接另存为PDF 就可以了，很简单就不截图了。</p>
<h3 id="管理图片篇"><a href="#管理图片篇" class="headerlink" title="管理图片篇"></a>管理图片篇</h3><p>基本有了绘制简历的基础，那么这个不在话下，剩下的就是自己的绘制水平高低了。</p>
<p>解释一下如何导出图片：直接 全选 -&gt; 右键 -&gt; 另存为图片…<br><img src="/2017/09/06/pptAndDev/imageStore.png" alt=""></p>
<p>注意这里的 PNG 如果没有背景图示透明的，所以绘制图片前可以自己加一层背景画布。</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>这篇文章有点水，不过如果对大家能有帮助就知足了。</p>
<p>如果你看到这 &amp;&amp; 如果你是一个程序员，那么按照国际惯例，推荐一下自己的<a href="https://github.com/mk43" target="_blank" rel="external"> GitHub </a> &amp;&amp; <a href="http://fitzeng.org/"> Blog </a> 里面还是有一些干货值得大家发现的。</p>
<p>多谢阅读 ^_^</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前段时间，我写了一篇&lt;a href=&quot;https://juejin.im/post/59ad4cd56fb9a02477075780&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《重读 JVM》&lt;/a&gt;，&lt;br&gt;在文章下有人评论里面的图是怎么做的，下面是我给的回复：&lt;br&gt;&lt;img src=&quot;/2017/09/06/pptAndDev/comment.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;然后想到自己在阅读其他大神些的 Blog 时，下面也有一批人在问作图工具什么的。然后我就想把自己的小技巧分享出来，如有雷同，纯属巧合。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Tips" scheme="http://fitzeng.org/tags/Tips/"/>
    
      <category term="ppt" scheme="http://fitzeng.org/tags/ppt/"/>
    
  </entry>
  
  <entry>
    <title>重读 JVM</title>
    <link href="http://fitzeng.org/2017/09/02/reJVM/"/>
    <id>http://fitzeng.org/2017/09/02/reJVM/</id>
    <published>2017-09-01T16:00:00.000Z</published>
    <updated>2017-09-04T12:46:51.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>秋招开始了，前面由于做别的事耽误了半个月，以前学的东西不用就很容易忘记。所以，这次重新阅读《深入理解 JVM 虚拟机》时，想做一个记录。将碎片的知识整合，方便自己以后阅读，同时也和大家一起分享。内容中会添加我自己的理解，其中如果有错误，欢迎大家指正。</p>
<p>相关阅读:<br><a href="http://fitzeng.org/2017/08/02/reDS/">1. 重拾数据结构</a><br><a href="http://fitzeng.org/2017/08/07/reOS/">2. 重拾操作系统</a><br><a href="http://fitzeng.org/2017/08/31/reCN/">3. 重拾计算机网络(未完成)）</a><br>注意：以上内容会持续更新，欢迎大家关注<a href="https://github.com/mk43" target="_blank" rel="external"> GitHub </a> &amp;&amp; <a href="http://fitzeng.org/"> Blog </a> </p>
</blockquote>
<a id="more"></a>
<h2 id="1-Java-内存区域与内存溢出异常"><a href="#1-Java-内存区域与内存溢出异常" class="headerlink" title="1. Java 内存区域与内存溢出异常"></a>1. Java 内存区域与内存溢出异常</h2><h3 id="1-1-运行时数据区域"><a href="#1-1-运行时数据区域" class="headerlink" title="1.1 运行时数据区域"></a>1.1 运行时数据区域</h3><blockquote>
<p>根据《Java 虚拟机规范(Java SE 7 版)》规定，Java 虚拟机所管理的内存如下图所示。</p>
</blockquote>
<p><img src="/2017/09/02/reJVM/jvmRuntimeDataArea.png" alt=""></p>
<h4 id="1-1-1-程序计数器"><a href="#1-1-1-程序计数器" class="headerlink" title="1.1.1 程序计数器"></a>1.1.1 程序计数器</h4><blockquote>
<p>内存空间小，线程私有。字节码解释器工作是就是通过改变这个计数器的值来选取下一条需要执行指令的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖计数器完成</p>
</blockquote>
<p>如果线程正在执行一个 Java 方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是 Native 方法，这个计数器的值则为 (Undefined)。此内存区域是唯一一个在 Java 虚拟机规范中没有规定任何 OutOfMemoryError 情况的区域。</p>
<h4 id="1-1-2-Java-虚拟机栈"><a href="#1-1-2-Java-虚拟机栈" class="headerlink" title="1.1.2 Java 虚拟机栈"></a>1.1.2 Java 虚拟机栈</h4><blockquote>
<p>线程私有，生命周期和线程一致。描述的是 Java 方法执行的内存模型：每个方法在执行时都会床创建一个栈帧(Stack Frame)用于存储<code>局部变量表</code>、<code>操作数栈</code>、<code>动态链接</code>、<code>方法出口</code>等信息。每一个方法从调用直至执行结束，就对应着一个栈帧从虚拟机栈中入栈到出栈的过程。</p>
</blockquote>
<p>局部变量表：存放了编译期可知的各种基本类型(boolean、byte、char、short、int、float、long、double)、对象引用(reference 类型)和 returnAddress 类型(指向了一条字节码指令的地址)</p>
<p>StackOverflowError：线程请求的栈深度大于虚拟机所允许的深度。<br>OutOfMemoryError：如果虚拟机栈可以动态扩展，而扩展时无法申请到足够的内存。</p>
<h4 id="1-1-3-本地方法栈"><a href="#1-1-3-本地方法栈" class="headerlink" title="1.1.3 本地方法栈"></a>1.1.3 本地方法栈</h4><blockquote>
<p>区别于 Java 虚拟机栈的是，Java 虚拟机栈为虚拟机执行 Java 方法(也就是字节码)服务，而本地方法栈则为虚拟机使用到的 Native 方法服务。也会有 StackOverflowError 和 OutOfMemoryError 异常。</p>
</blockquote>
<h4 id="1-1-4-Java-堆"><a href="#1-1-4-Java-堆" class="headerlink" title="1.1.4 Java 堆"></a>1.1.4 Java 堆</h4><blockquote>
<p>对于绝大多数应用来说，这块区域是 JVM 所管理的内存中最大的一块。线程共享，主要是存放对象实例和数组。内部会划分出多个线程私有的分配缓冲区(Thread Local Allocation Buffer, TLAB)。可以位于物理上不连续的空间，但是逻辑上要连续。</p>
</blockquote>
<p>OutOfMemoryError：如果堆中没有内存完成实例分配，并且堆也无法再扩展时，抛出该异常。</p>
<h4 id="1-1-5-方法区"><a href="#1-1-5-方法区" class="headerlink" title="1.1.5 方法区"></a>1.1.5 方法区</h4><blockquote>
<p>属于共享内存区域，存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</p>
</blockquote>
<p>现在用一张图来介绍每个区域存储的内容。</p>
<p><img src="/2017/09/02/reJVM/jvmcontent.png" alt=""></p>
<h4 id="1-1-6-运行时常量池"><a href="#1-1-6-运行时常量池" class="headerlink" title="1.1.6 运行时常量池"></a>1.1.6 运行时常量池</h4><blockquote>
<p>属于方法区一部分，用于存放编译期生成的各种字面量和符号引用。编译器和运行期(String 的 intern() )都可以将常量放入池中。内存有限，无法申请时抛出 OutOfMemoryError。</p>
</blockquote>
<h4 id="1-1-7-直接内存"><a href="#1-1-7-直接内存" class="headerlink" title="1.1.7 直接内存"></a>1.1.7 直接内存</h4><blockquote>
<p>非虚拟机运行时数据区的部分</p>
</blockquote>
<p>在 JDK 1.4 中新加入 NIO (New Input/Output) 类，引入了一种基于通道(Channel)和缓存(Buffer)的 I/O 方式，它可以使用 Native 函数库直接分配堆外内存，然后通过一个存储在 Java 堆中的 DirectByteBuffer 对象作为这块内存的引用进行操作。可以避免在 Java 堆和 Native 堆中来回的数据耗时操作。<br>OutOfMemoryError：会受到本机内存限制，如果内存区域总和大于物理内存限制从而导致动态扩展时出现该异常。</p>
<h3 id="1-2-HotSpot-虚拟机对象探秘"><a href="#1-2-HotSpot-虚拟机对象探秘" class="headerlink" title="1.2 HotSpot 虚拟机对象探秘"></a>1.2 HotSpot 虚拟机对象探秘</h3><blockquote>
<p>主要介绍数据是如何创建、如何布局以及如何访问的。</p>
</blockquote>
<h4 id="1-2-1-对象的创建"><a href="#1-2-1-对象的创建" class="headerlink" title="1.2.1 对象的创建"></a>1.2.1 对象的创建</h4><blockquote>
<p>创建过程比较复杂，建议看书了解，这里提供个人的总结。</p>
</blockquote>
<p>遇到 new 指令时，首先检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已经被加载、解析和初始化过。如果没有，执行相应的类加载。<br><br>类加载检查通过之后，为新对象分配内存(内存大小在类加载完成后便可确认)。在堆的空闲内存中划分一块区域(‘指针碰撞-内存规整’或‘空闲列表-内存交错’的分配方式)。<br><br>前面讲的每个线程在堆中都会有私有的分配缓冲区(TLAB)，这样可以很大程度避免在并发情况下频繁创建对象造成的线程不安全。<br><br>内存空间分配完成后会初始化为 0(不包括对象头)，接下来就是填充对象头，把对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的 GC 分代年龄等信息存入对象头。<br><br>执行 new 指令后执行 init 方法后才算一份真正可用的对象创建完成。<br></p>
<h4 id="1-2-2-对象的内存布局"><a href="#1-2-2-对象的内存布局" class="headerlink" title="1.2.2 对象的内存布局"></a>1.2.2 对象的内存布局</h4><blockquote>
<p>在 HotSpot 虚拟机中，分为 3 块区域：<code>对象头(Header)</code>、<code>实例数据(Instance Data)</code>和<code>对齐填充(Padding)</code></p>
</blockquote>
<p><code>对象头(Header)</code>：包含两部分，第一部分用于存储对象自身的运行时数据，如哈希码、GC 分代年龄、锁状态标志、线程持有的锁、偏向线程 ID、偏向时间戳等，32 位虚拟机占 32 bit，64 位虚拟机占 64 bit。官方称为 ‘Mark Word’。第二部分是类型指针，即对象指向它的类的元数据指针，虚拟机通过这个指针确定这个对象是哪个类的实例。另外，如果是 Java 数组，对象头中还必须有一块用于记录数组长度的数据，因为普通对象可以通过 Java 对象元数据确定大小，而数组对象不可以。<br><br><code>实例数据(Instance Data)</code>：程序代码中所定义的各种类型的字段内容(包含父类继承下来的和子类中定义的)。<br><br><code>对齐填充(Padding)</code>：不是必然需要，主要是占位，保证对象大小是某个字节的整数倍。<br></p>
<h4 id="1-2-3-对象的访问定位"><a href="#1-2-3-对象的访问定位" class="headerlink" title="1.2.3 对象的访问定位"></a>1.2.3 对象的访问定位</h4><blockquote>
<p>使用对象时，通过栈上的 reference 数据来操作堆上的具体对象。</p>
</blockquote>
<h5 id="通过句柄访问"><a href="#通过句柄访问" class="headerlink" title="通过句柄访问"></a>通过句柄访问</h5><blockquote>
<p>Java 堆中会分配一块内存作为句柄池。reference 存储的是句柄地址。详情见图。</p>
</blockquote>
<p><img src="/2017/09/02/reJVM/jubing.png" alt=""></p>
<h5 id="使用直接指针访问"><a href="#使用直接指针访问" class="headerlink" title="使用直接指针访问"></a>使用直接指针访问</h5><blockquote>
<p>reference 中直接存储对象地址</p>
</blockquote>
<p><img src="/2017/09/02/reJVM/directpointer.png" alt=""></p>
<p>比较：使用句柄的最大好处是 reference 中存储的是稳定的句柄地址，在对象移动(GC)是只改变实例数据指针地址，reference 自身不需要修改。直接指针访问的最大好处是速度快，节省了一次指针定位的时间开销。如果是对象频繁 GC 那么句柄方法好，如果是对象频繁访问则直接指针访问好。</p>
<h3 id="1-3-实战"><a href="#1-3-实战" class="headerlink" title="1.3 实战"></a>1.3 实战</h3><blockquote>
<p>// 待填</p>
</blockquote>
<h2 id="2-垃圾回收器与内存分配策略"><a href="#2-垃圾回收器与内存分配策略" class="headerlink" title="2. 垃圾回收器与内存分配策略"></a>2. 垃圾回收器与内存分配策略</h2><h3 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h3><blockquote>
<p>程序计数器、虚拟机栈、本地方法栈 3 个区域随线程生灭(因为是线程私有)，栈中的栈帧随着方法的进入和退出而有条不紊地执行着出栈和入栈操作。而 Java 堆和方法区则不一样，一个接口中的多个实现类需要的内存可能不一样，一个方法中的多个分支需要的内存也可能不一样，我们只有在程序处于运行期才知道那些对象会创建，这部分内存的分配和回收都是动态的，垃圾回收期所关注的就是这部分内存。</p>
</blockquote>
<h3 id="2-2-对象已死吗？"><a href="#2-2-对象已死吗？" class="headerlink" title="2.2 对象已死吗？"></a>2.2 对象已死吗？</h3><blockquote>
<p>在进行内存回收之前要做的事情就是判断那些对象是‘死’的，哪些是‘活’的。</p>
</blockquote>
<h4 id="2-2-1-引用计数法"><a href="#2-2-1-引用计数法" class="headerlink" title="2.2.1 引用计数法"></a>2.2.1 引用计数法</h4><blockquote>
<p>给对象添加一个引用计数器。但是难以解决循环引用问题。</p>
</blockquote>
<p><img src="/2017/09/02/reJVM/referenceCount.png" alt=""><br><br>从图中可以看出，如果不下小心直接把 Obj1-reference 和 Obj2-reference 置 null。则在 Java 堆当中的两块内存依然保持着互相引用无法回收。</p>
<h4 id="2-2-2-可达性分析法"><a href="#2-2-2-可达性分析法" class="headerlink" title="2.2.2 可达性分析法"></a>2.2.2 可达性分析法</h4><blockquote>
<p>通过一系列的 ‘GC Roots’ 的对象作为起始点，从这些节点出发所走过的路径称为引用链。当一个对象到 GC Roots 没有任何引用链相连的时候说明对象不可用。</p>
</blockquote>
<p><img src="/2017/09/02/reJVM/gcTree.png" alt=""></p>
<p>可作为 GC Roots 的对象：<br></p>
<ul>
<li>虚拟机栈(栈帧中的本地变量表)中引用的对象</li>
<li>方法区中类静态属性引用的对象</li>
<li>方法区中常量引用的对象</li>
<li>本地方法栈中 JNI(即一般说的 Native 方法) 引用的对象</li>
</ul>
<h4 id="2-2-3-再谈引用"><a href="#2-2-3-再谈引用" class="headerlink" title="2.2.3 再谈引用"></a>2.2.3 再谈引用</h4><blockquote>
<p>前面的两种方式判断存活时都与‘引用’有关。但是 JDK 1.2 之后，引用概念进行了扩充，下面具体介绍。</p>
</blockquote>
<p>下面四种引用强度一次逐渐减弱<br></p>
<h5 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h5><blockquote>
<p>类似于 <code>Object obj = new Object();</code> 创建的，只要强引用在就不回收。 </p>
</blockquote>
<h5 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a>软引用</h5><blockquote>
<p>SoftReference 类实现软引用。在系统要发生内存溢出异常之前，将会把这些对象列进回收范围之中进行二次回收。</p>
</blockquote>
<h5 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h5><blockquote>
<p>WeakReference 类实现弱引用。对象只能生存到下一次垃圾收集之前。在垃圾收集器工作时，无论内存是否足够都会回收掉只被弱引用关联的对象。</p>
</blockquote>
<h5 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a>虚引用</h5><blockquote>
<p>PhantomReference 类实现虚引用。无法通过虚引用获取一个对象的实例，为一个对象设置虚引用关联的唯一目的就是能在这个对象被收集器回收时收到一个系统通知。</p>
</blockquote>
<h4 id="2-2-4-生存还是死亡"><a href="#2-2-4-生存还是死亡" class="headerlink" title="2.2.4 生存还是死亡"></a>2.2.4 生存还是死亡</h4><blockquote>
<p>即使在可达性分析算法中不可达的对象，也并非是“facebook”的，这时候它们暂时出于“缓刑”阶段，一个对象的真正死亡至少要经历两次标记过程：如果对象在进行中可达性分析后发现没有与 GC Roots 相连接的引用链，那他将会被第一次标记并且进行一次筛选，筛选条件是此对象是否有必要执行 finalize() 方法。当对象没有覆盖 finalize() 方法，或者 finalize() 方法已经被虚拟机调用过，虚拟机将这两种情况都视为“没有必要执行”。<br><br>如果这个对象被判定为有必要执行 finalize() 方法，那么这个对象竟会放置在一个叫做 F-Queue 的队列中，并在稍后由一个由虚拟机自动建立的、低优先级的 Finalizer 线程去执行它。这里所谓的“执行”是指虚拟机会出发这个方法，并不承诺或等待他运行结束。finalize() 方法是对象逃脱死亡命运的最后一次机会，稍后 GC 将对 F-Queue 中的对象进行第二次小规模的标记，如果对象要在 finalize() 中成功拯救自己 —— 只要重新与引用链上的任何一个对象简历关联即可。<br><br>finalize() 方法只会被系统自动调用一次。</p>
</blockquote>
<h4 id="2-2-5-回收方法区"><a href="#2-2-5-回收方法区" class="headerlink" title="2.2.5 回收方法区"></a>2.2.5 回收方法区</h4><blockquote>
<p>在堆中，尤其是在新生代中，一次垃圾回收一般可以回收 70% ~ 95% 的空间，而永久代的垃圾收集效率远低于此。<br><br>永久代垃圾回收主要两部分内容：废弃的常量和无用的类。</p>
</blockquote>
<p>判断废弃常量：一般是判断没有该常量的引用。<br><br>判断无用的类：要以下三个条件都满足 <br></p>
<ul>
<li>该类所有的实例都已经回收，也就是 Java 堆中不存在该类的任何实例</li>
<li>加载该类的 ClassLoader 已经被回收</li>
<li>该类对应的 java.lang.Class 对象没有任何地方呗引用，无法在任何地方通过反射访问该类的方法</li>
</ul>
<h3 id="2-3-垃圾回收算法"><a href="#2-3-垃圾回收算法" class="headerlink" title="2.3 垃圾回收算法"></a>2.3 垃圾回收算法</h3><blockquote>
<p>仅提供思路</p>
</blockquote>
<h4 id="2-3-1-标记-——-清除算法"><a href="#2-3-1-标记-——-清除算法" class="headerlink" title="2.3.1 标记 —— 清除算法"></a>2.3.1 标记 —— 清除算法</h4><blockquote>
<p>直接标记清除就可。</p>
</blockquote>
<p>两个不足：</p>
<ul>
<li>效率不高</li>
<li>空间会产生大量碎片</li>
</ul>
<h4 id="2-3-2-复制算法"><a href="#2-3-2-复制算法" class="headerlink" title="2.3.2 复制算法"></a>2.3.2 复制算法</h4><blockquote>
<p>把空间分成两块，每次只对其中一块进行 GC。当这块内存使用完时，就将还存活的对象复制到另一块上面。</p>
</blockquote>
<p>解决前一种方法的不足，但是会造成空间利用率低下。因为大多数新生代对象都不会熬过第一次 GC。所以没必要 1 : 1 划分空间。可以分一块较大的 Eden 空间和两块较小的 Survivor 空间，每次使用 Eden 空间和其中一块 Survivor。当回收时，将 Eden 和 Survivor 中还存活的对象一次性复制到另一块 Survivor 上，最后清理 Eden 和 Survivor 空间。大小比例一般是 8 : 1 : 1，每次浪费 10% 的 Survivor 空间。但是这里有一个问题就是如果存活的大于 10% 怎么办？这里采用一种分配担保策略：多出来的对象直接进入老年代。</p>
<h4 id="2-3-3-标记-整理算法"><a href="#2-3-3-标记-整理算法" class="headerlink" title="2.3.3 标记-整理算法"></a>2.3.3 标记-整理算法</h4><blockquote>
<p>不同于针对新生代的复制算法，针对老年代的特点，创建该算法。主要是把存活对象移到内存的一端。</p>
</blockquote>
<h4 id="2-3-4-分代回收"><a href="#2-3-4-分代回收" class="headerlink" title="2.3.4 分代回收"></a>2.3.4 分代回收</h4><blockquote>
<p>根据存活对象划分几块内存区，一般是分为新生代和老年代。然后根据各个年代的特点制定相应的回收算法。</p>
</blockquote>
<h5 id="新生代"><a href="#新生代" class="headerlink" title="新生代"></a>新生代</h5><blockquote>
<p>每次垃圾回收都有大量对象死去，只有少量存活，选用复制算法比较合理。</p>
</blockquote>
<h5 id="老年代"><a href="#老年代" class="headerlink" title="老年代"></a>老年代</h5><blockquote>
<p>老年代中对象存活率较高、没有额外的空间分配对它进行担保。所以必须使用 <code>标记 —— 清除</code> 或者 <code>标记 —— 整理</code> 算法回收。</p>
</blockquote>
<h3 id="2-4-HotSpot-的算法实现"><a href="#2-4-HotSpot-的算法实现" class="headerlink" title="2.4 HotSpot 的算法实现"></a>2.4 HotSpot 的算法实现</h3><blockquote>
<p>// 待填</p>
</blockquote>
<h3 id="2-5-垃圾回收器"><a href="#2-5-垃圾回收器" class="headerlink" title="2.5 垃圾回收器"></a>2.5 垃圾回收器</h3><blockquote>
<p>收集算法是内存回收的理论，而垃圾回收器是内存回收的实践。</p>
</blockquote>
<p><img src="/2017/09/02/reJVM/hotspotGCDevice.png" alt=""><br><br>说明：如果两个收集器之间存在连线说明他们之间可以搭配使用。</p>
<h4 id="2-5-1-Serial-收集器"><a href="#2-5-1-Serial-收集器" class="headerlink" title="2.5.1 Serial 收集器"></a>2.5.1 Serial 收集器</h4><blockquote>
<p>这是一个单线程收集器。意味着它只会使用一个 CPU 或一条收集线程去完成收集工作，并且在进行垃圾回收时必须暂停其它所有的工作线程直到收集结束。</p>
</blockquote>
<p><img src="/2017/09/02/reJVM/serial.png" alt=""></p>
<h4 id="2-5-2-ParNew-收集器"><a href="#2-5-2-ParNew-收集器" class="headerlink" title="2.5.2 ParNew 收集器"></a>2.5.2 ParNew 收集器</h4><blockquote>
<p>可以认为是 Serial 收集器的多线程版本。</p>
</blockquote>
<p><img src="/2017/09/02/reJVM/parnew.png" alt=""></p>
<h5 id="并行：Parallel"><a href="#并行：Parallel" class="headerlink" title="并行：Parallel"></a>并行：Parallel</h5><blockquote>
<p>指多条垃圾收集线程并行工作，此时用户线程处于等待状态</p>
</blockquote>
<h5 id="并发：Concurrent"><a href="#并发：Concurrent" class="headerlink" title="并发：Concurrent"></a>并发：Concurrent</h5><blockquote>
<p>指用户线程和垃圾回收线程同时执行(不一定是并行，有可能是交叉执行)，用户进程在运行，而垃圾回收线程在另一个 CPU 上运行。</p>
</blockquote>
<h4 id="2-5-3-Parallel-Scavenge-收集器"><a href="#2-5-3-Parallel-Scavenge-收集器" class="headerlink" title="2.5.3 Parallel Scavenge 收集器"></a>2.5.3 Parallel Scavenge 收集器</h4><blockquote>
<p>这是一个新生代收集器，也是使用复制算法实现，同时也是并行的多线程收集器。</p>
</blockquote>
<p>CMS 等收集器的关注点是尽可能地缩短垃圾收集时用户线程所停顿的时间，而 Parallel Scavenge 收集器的目的是达到一个可控制的吞吐量(Throughput = 运行用户代码时间 / (运行用户代码时间 + 垃圾收集时间))。<br><br>作为一个吞吐量优先的收集器，虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整停顿时间。这就是 GC 的自适应调整策略(GC Ergonomics)。</p>
<h4 id="2-5-4-Serial-Old-收集器"><a href="#2-5-4-Serial-Old-收集器" class="headerlink" title="2.5.4 Serial Old 收集器"></a>2.5.4 Serial Old 收集器</h4><blockquote>
<p>收集器的老年代版本，单线程，使用 <code>标记 —— 整理</code>。</p>
</blockquote>
<p><img src="/2017/09/02/reJVM/serial.png" alt=""></p>
<h4 id="2-5-5-Parallel-Old-收集器"><a href="#2-5-5-Parallel-Old-收集器" class="headerlink" title="2.5.5 Parallel Old 收集器"></a>2.5.5 Parallel Old 收集器</h4><blockquote>
<p>Parallel Old 是 Parallel Scavenge 收集器的老年代版本。多线程，使用 <code>标记 —— 整理</code></p>
</blockquote>
<p><img src="/2017/09/02/reJVM/parallelOld.png" alt=""></p>
<h4 id="2-5-6-CMS-收集器"><a href="#2-5-6-CMS-收集器" class="headerlink" title="2.5.6 CMS 收集器"></a>2.5.6 CMS 收集器</h4><blockquote>
<p>CMS (Concurrent Mark Sweep) 收集器是一种以获取最短回收停顿时间为目标的收集器。基于 <code>标记 —— 清除</code> 算法实现。</p>
</blockquote>
<p>运作步骤: <br></p>
<ol>
<li>初始标记(CMS initial mark)：标记 GC Roots 能直接关联到的对象</li>
<li>并发标记(CMS concurrent mark)：进行 GC Roots Tracing</li>
<li>重新标记(CMS remark)：修正并发标记期间的变动部分</li>
<li>并发清除(CMS concurrent sweep)</li>
</ol>
<p><img src="/2017/09/02/reJVM/concurrentMarkSweep.png" alt=""></p>
<p>缺点：对 CPU 资源敏感、无法收集浮动垃圾、<code>标记 —— 清除</code> 算法带来的空间碎片</p>
<h4 id="2-5-7-G1-收集器"><a href="#2-5-7-G1-收集器" class="headerlink" title="2.5.7 G1 收集器"></a>2.5.7 G1 收集器</h4><blockquote>
<p>面向服务端的垃圾回收器。</p>
</blockquote>
<p>优点：并行与并发、分代收集、空间整合、可预测停顿。</p>
<p>运作步骤: <br></p>
<ol>
<li>初始标记(Initial Marking)</li>
<li>并发标记(Concurrent Marking)</li>
<li>最终标记(Final Marking)</li>
<li>筛选回收(Live Data Counting and Evacuation)</li>
</ol>
<p><img src="/2017/09/02/reJVM/G1.png" alt=""></p>
<h3 id="2-6-内存分配与回收策略"><a href="#2-6-内存分配与回收策略" class="headerlink" title="2.6 内存分配与回收策略"></a>2.6 内存分配与回收策略</h3><h4 id="2-6-1-对象优先在-Eden-分配"><a href="#2-6-1-对象优先在-Eden-分配" class="headerlink" title="2.6.1 对象优先在 Eden 分配"></a>2.6.1 对象优先在 Eden 分配</h4><blockquote>
<p>对象主要分配在新生代的 Eden 区上，如果启动了本地线程分配缓冲区，将线程优先在 (TLAB) 上分配。少数情况会直接分配在老年代中。</p>
</blockquote>
<p>一般来说 Java 堆的内存模型如下图所示：<br><br><img src="/2017/09/02/reJVM/heapModel.png" alt=""></p>
<h5 id="新生代-GC-Minor-GC"><a href="#新生代-GC-Minor-GC" class="headerlink" title="新生代 GC (Minor GC)"></a>新生代 GC (Minor GC)</h5><blockquote>
<p>发生在新生代的垃圾回收动作，频繁，速度快。</p>
</blockquote>
<h5 id="老年代-GC-Major-GC-Full-GC"><a href="#老年代-GC-Major-GC-Full-GC" class="headerlink" title="老年代 GC (Major GC / Full GC)"></a>老年代 GC (Major GC / Full GC)</h5><blockquote>
<p>发生在老年代的垃圾回收动作，出现了 Major GC 经常会伴随至少一次 Minor GC(非绝对)。Major GC 的速度一般会比 Minor GC 慢十倍以上。</p>
</blockquote>
<h4 id="2-6-2-大对象直接进入老年代"><a href="#2-6-2-大对象直接进入老年代" class="headerlink" title="2.6.2 大对象直接进入老年代"></a>2.6.2 大对象直接进入老年代</h4><h4 id="2-6-3-长期存活的对象将进入老年代"><a href="#2-6-3-长期存活的对象将进入老年代" class="headerlink" title="2.6.3 长期存活的对象将进入老年代"></a>2.6.3 长期存活的对象将进入老年代</h4><h4 id="2-6-4-动态对象年龄判定"><a href="#2-6-4-动态对象年龄判定" class="headerlink" title="2.6.4 动态对象年龄判定"></a>2.6.4 动态对象年龄判定</h4><h4 id="2-6-5-空间分配担保"><a href="#2-6-5-空间分配担保" class="headerlink" title="2.6.5 空间分配担保"></a>2.6.5 空间分配担保</h4><h2 id="3-Java-内存模型与线程"><a href="#3-Java-内存模型与线程" class="headerlink" title="3. Java 内存模型与线程"></a>3. Java 内存模型与线程</h2><p><img src="/2017/09/02/reJVM/cpuCacheMemory.png" alt=""></p>
<h3 id="3-1-Java-内存模型"><a href="#3-1-Java-内存模型" class="headerlink" title="3.1 Java 内存模型"></a>3.1 Java 内存模型</h3><blockquote>
<p>屏蔽掉各种硬件和操作系统的内存访问差异。</p>
</blockquote>
<p><img src="/2017/09/02/reJVM/threadMemory.png" alt=""></p>
<h4 id="3-1-1-主内存和工作内存之间的交互"><a href="#3-1-1-主内存和工作内存之间的交互" class="headerlink" title="3.1.1 主内存和工作内存之间的交互"></a>3.1.1 主内存和工作内存之间的交互</h4><table>
<thead>
<tr>
<th style="text-align:center">操作</th>
<th style="text-align:center">作用对象</th>
<th style="text-align:center">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">lock</td>
<td style="text-align:center">主内存</td>
<td style="text-align:center">把一个变量标识为一条线程独占的状态</td>
</tr>
<tr>
<td style="text-align:center">unlock</td>
<td style="text-align:center">主内存</td>
<td style="text-align:center">把一个处于锁定状态的变量释放出来，释放后才可被其他线程锁定</td>
</tr>
<tr>
<td style="text-align:center">read</td>
<td style="text-align:center">主内存</td>
<td style="text-align:center">把一个变量的值从主内存传输到线程工作内存中，以便 load 操作使用</td>
</tr>
<tr>
<td style="text-align:center">load</td>
<td style="text-align:center">工作内存</td>
<td style="text-align:center">把 read 操作从主内存中得到的变量值放入工作内存中</td>
</tr>
<tr>
<td style="text-align:center">use</td>
<td style="text-align:center">工作内存</td>
<td style="text-align:center">把工作内存中一个变量的值传递给执行引擎，<br> 每当虚拟机遇到一个需要使用到变量值的字节码指令时将会执行这个操作</td>
</tr>
<tr>
<td style="text-align:center">assign</td>
<td style="text-align:center">工作内存</td>
<td style="text-align:center">把一个从执行引擎接收到的值赋接收到的值赋给工作内存的变量，<br> 每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作</td>
</tr>
<tr>
<td style="text-align:center">store</td>
<td style="text-align:center">工作内存</td>
<td style="text-align:center">把工作内存中的一个变量的值传送到主内存中，以便 write 操作</td>
</tr>
<tr>
<td style="text-align:center">write</td>
<td style="text-align:center">工作内存</td>
<td style="text-align:center">把 store 操作从工作内存中得到的变量的值放入主内存的变量中</td>
</tr>
</tbody>
</table>
<h4 id="3-1-2-对于-volatile-型变量的特殊规则"><a href="#3-1-2-对于-volatile-型变量的特殊规则" class="headerlink" title="3.1.2 对于 volatile 型变量的特殊规则"></a>3.1.2 对于 volatile 型变量的特殊规则</h4><blockquote>
<p>关键字 volatile 是 Java 虚拟机提供的最轻量级的同步机制。</p>
</blockquote>
<p>一个变量被定义为 volatile 的特性：<br></p>
<ol>
<li>保证此变量对所有线程的可见性。但是操作并非原子操作，并发情况下不安全。<br></li>
</ol>
<blockquote>
<p>如果不符合 <code>运算结果并不依赖变量当前值，或者能够确保只有单一的线程修改变量的值</code> 和 <code>变量不需要与其他的状态变量共同参与不变约束</code> 就要通过加锁(使用 synchronize 或 java.util.concurrent 中的原子类)来保证原子性。</p>
</blockquote>
<ol>
<li>禁止指令重排序优化。</li>
</ol>
<blockquote>
<p>通过插入内存屏障保证一致性。</p>
</blockquote>
<h4 id="3-1-3-对于-long-和-double-型变量的特殊规则"><a href="#3-1-3-对于-long-和-double-型变量的特殊规则" class="headerlink" title="3.1.3 对于 long 和 double 型变量的特殊规则"></a>3.1.3 对于 long 和 double 型变量的特殊规则</h4><blockquote>
<p>Java 要求对于主内存和工作内存之间的八个操作都是原子性的，但是对于 64 位的数据类型，有一条宽松的规定：允许虚拟机将没有被 volatile 修饰的 64 位数据的读写操作划分为两次 32 位的操作来进行，即允许虚拟机实现选择可以不保证 64 位数据类型的 load、store、read 和 write 这 4 个操作的原子性。这就是 long 和 double 的非原子性协定。</p>
</blockquote>
<h4 id="3-1-4-原子性、可见性与有序性"><a href="#3-1-4-原子性、可见性与有序性" class="headerlink" title="3.1.4 原子性、可见性与有序性"></a>3.1.4 原子性、可见性与有序性</h4><blockquote>
<p>回顾下并发下应该注意操作的那些特性是什么，同时加深理解。</p>
</blockquote>
<ul>
<li>原子性(Atomicity)</li>
</ul>
<blockquote>
<p>由 Java 内存模型来直接保证的原子性变量操作包括 read、load、assign、use、store 和 write。大致可以认为基本数据类型的操作是原子性的。同时 lock 和 unlock 可以保证更大范围操作的原子性。而 synchronize 同步块操作的原子性是用更高层次的字节码指令 monitorenter 和 monitorexit 来隐式操作的。</p>
</blockquote>
<ul>
<li>可见性(Visibility)</li>
</ul>
<blockquote>
<p>是指当一个线程修改了共享变量的值，其他线程也能够立即得知这个通知。主要操作细节就是修改值后将值同步至主内存(volatile 值使用前都会从主内存刷新)，除了 volatile 还有 synchronize 和 final 可以保证可见性。同步块的可见性是由“对一个变量执行 unlock 操作之前，必须先把此变量同步会主内存中( store、write 操作)”这条规则获得。而 final 可见性是指：被 final 修饰的字段在构造器中一旦完成，并且构造器没有把 “this” 的引用传递出去( this 引用逃逸是一件很危险的事情，其他线程有可能通过这个引用访问到“初始化了一半”的对象)，那在其他线程中就能看见 final 字段的值。</p>
</blockquote>
<ul>
<li>有序性(Ordering)</li>
</ul>
<blockquote>
<p>如果在被线程内观察，所有操作都是有序的；如果在一个线程中观察另一个线程，所有操作都是无序的。前半句指“线程内表现为串行的语义”，后半句是指“指令重排”现象和“工作内存与主内存同步延迟”现象。Java 语言通过 volatile 和 synchronize 两个关键字来保证线程之间操作的有序性。volatile 自身就禁止指令重排，而 synchronize 则是由“一个变量在同一时刻指允许一条线程对其进行 lock 操作”这条规则获得，这条规则决定了持有同一个锁的两个同步块只能串行的进入。</p>
</blockquote>
<h4 id="3-1-5-先行发生原则"><a href="#3-1-5-先行发生原则" class="headerlink" title="3.1.5 先行发生原则"></a>3.1.5 先行发生原则</h4><blockquote>
<p>也就是 happens-before 原则。这个原则是判断数据是否存在竞争、线程是否安全的主要依据。先行发生是 Java 内存模型中定义的两项操作之间的偏序关系。</p>
</blockquote>
<p>天然的先行发生关系</p>
<table>
<thead>
<tr>
<th style="text-align:center">规则</th>
<th style="text-align:center">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">程序次序规则</td>
<td style="text-align:center">在一个线程内，代码按照书写的控制流顺序执行</td>
</tr>
<tr>
<td style="text-align:center">管程锁定规则</td>
<td style="text-align:center">一个 unlock 操作先行发生于后面对同一个锁的 lock 操作</td>
</tr>
<tr>
<td style="text-align:center">volatile 变量规则</td>
<td style="text-align:center">volatile 变量的写操作先行发生于后面对这个变量的读操作</td>
</tr>
<tr>
<td style="text-align:center">线程启动规则</td>
<td style="text-align:center">Thread 对象的 start() 方法先行发生于此线程的每一个动作</td>
</tr>
<tr>
<td style="text-align:center">线程终止规则</td>
<td style="text-align:center">线程中所有的操作都先行发生于对此线程的终止检测<br>(通过 Thread.join() 方法结束、 Thread.isAlive() 的返回值检测)</td>
</tr>
<tr>
<td style="text-align:center">线程中断规则</td>
<td style="text-align:center">对线程 interrupt() 方法调用优先发生于被中断线程的代码检测到中断事件的发生 <br> (通过 Thread.interrupted() 方法检测)</td>
</tr>
<tr>
<td style="text-align:center">对象终结规则</td>
<td style="text-align:center">一个对象的初始化完成(构造函数执行结束)先行发生于它的 finalize() 方法的开始</td>
</tr>
<tr>
<td style="text-align:center">传递性</td>
<td style="text-align:center">如果操作 A 先于 操作 B 发生，操作 B 先于 操作 C 发生，那么操作 A 先于 操作 C</td>
</tr>
</tbody>
</table>
<h3 id="3-2-Java-与线程"><a href="#3-2-Java-与线程" class="headerlink" title="3.2 Java 与线程"></a>3.2 Java 与线程</h3><h4 id="3-2-1-线程的实现"><a href="#3-2-1-线程的实现" class="headerlink" title="3.2.1 线程的实现"></a>3.2.1 线程的实现</h4><h5 id="使用内核线程实现"><a href="#使用内核线程实现" class="headerlink" title="使用内核线程实现"></a>使用内核线程实现</h5><blockquote>
<p>直接由操作系统内核支持的线程，这种线程由内核完成切换。程序一般不会直接去使用内核线程，而是去使用内核线程的一种高级接口 —— 轻量级进程(LWP)，轻量级进程就是我们通常意义上所讲的线程，每个轻量级进程都有一个内核级线程支持。</p>
</blockquote>
<p><img src="/2017/09/02/reJVM/klt.png" alt=""></p>
<h5 id="使用用户线程实现"><a href="#使用用户线程实现" class="headerlink" title="使用用户线程实现"></a>使用用户线程实现</h5><blockquote>
<p>广义上来说，只要不是内核线程就可以认为是用户线程，因此可以认为轻量级进程也属于用户线程。狭义上说是完全建立在用户空间的线程库上的并且内核系统不可感知的。</p>
</blockquote>
<p><img src="/2017/09/02/reJVM/ut.png" alt=""></p>
<h5 id="使用用户线程夹加轻量级进程混合实现"><a href="#使用用户线程夹加轻量级进程混合实现" class="headerlink" title="使用用户线程夹加轻量级进程混合实现"></a>使用用户线程夹加轻量级进程混合实现</h5><blockquote>
<p>直接看图</p>
</blockquote>
<p><img src="/2017/09/02/reJVM/kltAndut.png" alt=""></p>
<h5 id="Java-线程实现"><a href="#Java-线程实现" class="headerlink" title="Java 线程实现"></a>Java 线程实现</h5><blockquote>
<p>平台不同实现方式不同，可以认为是一条 Java 线程映射到一条轻量级进程。</p>
</blockquote>
<h4 id="3-2-2-Java-线程调度"><a href="#3-2-2-Java-线程调度" class="headerlink" title="3.2.2 Java 线程调度"></a>3.2.2 Java 线程调度</h4><h5 id="协同式线程调度"><a href="#协同式线程调度" class="headerlink" title="协同式线程调度"></a>协同式线程调度</h5><blockquote>
<p>线程执行时间由线程自身控制，实现简单，切换线程自己可知，所以基本没有线程同步问题。坏处是执行时间不可控，容易阻塞。</p>
</blockquote>
<h5 id="抢占式线程调度"><a href="#抢占式线程调度" class="headerlink" title="抢占式线程调度"></a>抢占式线程调度</h5><blockquote>
<p>每个线程由系统来分配执行时间。</p>
</blockquote>
<h4 id="3-2-3-状态转换"><a href="#3-2-3-状态转换" class="headerlink" title="3.2.3 状态转换"></a>3.2.3 状态转换</h4><p>五种状态：</p>
<ul>
<li>新建(new)</li>
</ul>
<blockquote>
<p>创建后尚未启动的线程。</p>
</blockquote>
<ul>
<li>运行(Runable)</li>
</ul>
<blockquote>
<p>Runable 包括了操作系统线程状态中的 Running 和 Ready，也就是出于此状态的线程有可能正在执行，也有可能正在等待 CPU 为他分配时间。</p>
</blockquote>
<ul>
<li>无限期等待(Waiting)</li>
</ul>
<blockquote>
<p>出于这种状态的线程不会被 CPU 分配时间，它们要等其他线程显示的唤醒。</p>
</blockquote>
<p>以下方法会然线程进入无限期等待状态：<br>1.没有设置 Timeout 参数的 Object.wait() 方法。<br>2.没有设置 Timeout 参数的 Thread.join() 方法。<br>3.LookSupport.park() 方法。</p>
<ul>
<li>限期等待(Timed Waiting)</li>
</ul>
<blockquote>
<p>处于这种状态的线程也不会分配时间，不过无需等待配其他线程显示地唤醒，在一定时间后他们会由系统自动唤醒。</p>
</blockquote>
<p>以下方法会让线程进入限期等待状态：<br>1.Thread.sleep() 方法。<br>2.设置了 Timeout 参数的 Object.wait() 方法。<br>3.设置了 Timeout 参数的 Thread.join() 方法。<br>4.LockSupport.parkNanos() 方法。<br>5.LockSupport.parkUntil() 方法。</p>
<ul>
<li>阻塞(Blocked)</li>
</ul>
<blockquote>
<p>线程被阻塞了，“阻塞状态”和“等待状态”的区别是：“阻塞状态”在等待着获取一个排他锁，这个时间将在另外一个线程放弃这个锁的时候发生；而“等待状态”则是在等待一段时间，或者唤醒动作的发生。在程序等待进入同步区域的时候，线程将进入这种状态。</p>
</blockquote>
<ul>
<li>结束(Terminated)</li>
</ul>
<blockquote>
<p>已终止线程的线程状态。</p>
</blockquote>
<p><img src="/2017/09/02/reJVM/threadTranslate.png" alt=""></p>
<h2 id="4-线程安全与锁优化"><a href="#4-线程安全与锁优化" class="headerlink" title="4. 线程安全与锁优化"></a>4. 线程安全与锁优化</h2><blockquote>
<p>// 待填</p>
</blockquote>
<h2 id="5-类文件结构"><a href="#5-类文件结构" class="headerlink" title="5. 类文件结构"></a>5. 类文件结构</h2><blockquote>
<p>// 待填</p>
</blockquote>
<p>有点懒了。。。先贴几个网址吧。</p>
<p><a href="https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html" target="_blank" rel="external">1. Official：The class File Format</a><br><a href="http://blog.csdn.net/luanlouis/article/details/39892027" target="_blank" rel="external">2.亦山: 《Java虚拟机原理图解》 1.1、class文件基本组织结构</a></p>
<h2 id="6-虚拟机类加载机制"><a href="#6-虚拟机类加载机制" class="headerlink" title="6. 虚拟机类加载机制"></a>6. 虚拟机类加载机制</h2><blockquote>
<p>虚拟机把描述类的数据从 Class 文件加载到内存，并对数据进行校验、装换解析和初始化，最终形成可以被虚拟机直接使用的 Java 类型。</p>
</blockquote>
<p>在 Java 语言中，类型的加载、连接和初始化过程都是在程序运行期间完成的。</p>
<h3 id="6-1-类加载时机"><a href="#6-1-类加载时机" class="headerlink" title="6.1 类加载时机"></a>6.1 类加载时机</h3><h4 id="类的生命周期-7-个阶段"><a href="#类的生命周期-7-个阶段" class="headerlink" title="类的生命周期( 7 个阶段)"></a>类的生命周期( 7 个阶段)</h4><p><img src="/2017/09/02/reJVM/classLifeCircle.png" alt=""></p>
<p>其中加载、验证、准备、初始化和卸载这五个阶段的顺序是确定的。解析阶段可以在初始化之后再开始(运行时绑定或动态绑定或晚期绑定)。</p>
<p>以下五种情况必须对类进行初始化(而加载、验证、准备自然需要在此之前完成)：</p>
<ol>
<li>遇到 new、getstatic、putstatic 或 invokestatic 这 4 条字节码指令时没初始化触发初始化。使用场景：使用 new 关键字实例化对象、读取一个类的静态字段(被 final 修饰、已在编译期把结果放入常量池的静态字段除外)、调用一个类的静态方法。</li>
<li>使用 java.lang.reflect 包的方法对类进行反射调用的时候。</li>
<li>当初始化一个类的时候，如果发现其父类还没有进行初始化，则需先触发其父类的初始化。</li>
<li>当虚拟机启动时，用户需指定一个要加载的主类(包含 main() 方法的那个类)，虚拟机会先初始化这个主类。 </li>
<li>当使用 JDK 1.7 的动态语言支持时，如果一个 java.lang.invoke.MethodHandle 实例最后的解析结果 REF_getStatic、REF_putStatic、REF_invokeStatic 的方法句柄，并且这个方法句柄所对应的类没有进行过初始化，则需先触发其初始化。</li>
</ol>
<p>前面的五种方式是对一个类的主动引用，除此之外，所有引用类的方法都不会触发初始化，佳作被动引用。举几个例子~</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuperClass</span> </span>&#123;</div><div class="line">	<span class="keyword">static</span> &#123;</div><div class="line">		System.out.println(<span class="string">"SuperClass init!"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> value = <span class="number">1127</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> <span class="keyword">extends</span> <span class="title">SuperClass</span> </span>&#123;</div><div class="line">	<span class="keyword">static</span> &#123;</div><div class="line">		System.out.println(<span class="string">"SubClass init!"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstClass</span> </span>&#123;</div><div class="line">	<span class="keyword">static</span> &#123;</div><div class="line">		System.out.println(<span class="string">"ConstClass init!"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String HELLOWORLD = <span class="string">"hello world!"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotInitialization</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		System.out.println(SubClass.value);</div><div class="line">		<span class="comment">/**</span></div><div class="line">		 *  output : SuperClass init!</div><div class="line">		 * </div><div class="line">		 * 通过子类引用父类的静态对象不会导致子类的初始化</div><div class="line">		 * 只有直接定义这个字段的类才会被初始化</div><div class="line">		 */</div><div class="line">		 </div><div class="line">		SuperClass[] sca = <span class="keyword">new</span> SuperClass[<span class="number">10</span>];</div><div class="line">		<span class="comment">/**</span></div><div class="line">		 *  output : </div><div class="line">		 * </div><div class="line">		 * 通过数组定义来引用类不会触发此类的初始化</div><div class="line">		 * 虚拟机在运行时动态创建了一个数组类</div><div class="line">		 */</div><div class="line">		 </div><div class="line">		System.out.println(ConstClass.HELLOWORLD);</div><div class="line">		<span class="comment">/**</span></div><div class="line">		 *  output : </div><div class="line">		 * </div><div class="line">		 * 常量在编译阶段会存入调用类的常量池当中，本质上并没有直接引用到定义类常量的类，</div><div class="line">		 * 因此不会触发定义常量的类的初始化。</div><div class="line">		 * “hello world” 在编译期常量传播优化时已经存储到 NotInitialization 常量池中了。</div><div class="line">		 */</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="6-2-类的加载过程"><a href="#6-2-类的加载过程" class="headerlink" title="6.2 类的加载过程"></a>6.2 类的加载过程</h4><h5 id="6-2-1-加载"><a href="#6-2-1-加载" class="headerlink" title="6.2.1 加载"></a>6.2.1 加载</h5><ol>
<li>通过一个类的全限定名来获取定义次类的二进制流(ZIP 包、网络、运算生成、JSP 生成、数据库读取)。</li>
<li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</li>
<li>在内存中生成一个代表这个类的 java.lang.Class 对象，作为方法去这个类的各种数据的访问入口。</li>
</ol>
<p>数组类的特殊性：数组类本身不通过类加载器创建，它是由 Java 虚拟机直接创建的。但数组类与类加载器仍然有很密切的关系，因为数组类的元素类型最终是要靠类加载器去创建的，数组创建过程如下：</p>
<ol>
<li>如果数组的组件类型是引用类型，那就递归采用类加载加载。</li>
<li>如果数组的组件类型不是引用类型，Java 虚拟机会把数组标记为引导类加载器关联。</li>
<li>数组类的可见性与他的组件类型的可见性一致，如果组件类型不是引用类型，那数组类的可见性将默认为 public。</li>
</ol>
<p>内存中实例的 java.lang.Class 对象存在方法区中。作为程序访问方法区中这些类型数据的外部接口。<br>加载阶段与连接阶段的部分内容是交叉进行的，但是开始时间保持先后顺序。</p>
<h5 id="6-2-2-验证"><a href="#6-2-2-验证" class="headerlink" title="6.2.2 验证"></a>6.2.2 验证</h5><blockquote>
<p>是连接的第一步，确保 Class 文件的字节流中包含的信息符合当前虚拟机要求。</p>
</blockquote>
<h5 id="文件格式验证"><a href="#文件格式验证" class="headerlink" title="文件格式验证"></a>文件格式验证</h5><ol>
<li>是否以魔数 0xCAFEBABE 开头</li>
<li>主、次版本号是否在当前虚拟机处理范围之内</li>
<li>常量池的常量是否有不被支持常量的类型（检查常量 tag 标志）</li>
<li>指向常量的各种索引值中是否有指向不存在的常量或不符合类型的常量</li>
<li>CONSTANT_Utf8_info 型的常量中是否有不符合 UTF8 编码的数据</li>
<li>Class 文件中各个部分集文件本身是否有被删除的附加的其他信息</li>
<li>……</li>
</ol>
<p>只有通过这个阶段的验证后，字节流才会进入内存的方法区进行存储，所以后面 3 个验证阶段全部是基于方法区的存储结构进行的，不再直接操作字节流。</p>
<h5 id="元数据验证"><a href="#元数据验证" class="headerlink" title="元数据验证"></a>元数据验证</h5><ol>
<li>这个类是否有父类（除 java.lang.Object 之外）</li>
<li>这个类的父类是否继承了不允许被继承的类（final 修饰的类）</li>
<li>如果这个类不是抽象类，是否实现了其父类或接口之中要求实现的所有方法</li>
<li>类中的字段、方法是否与父类产生矛盾（覆盖父类 final 字段、出现不符合规范的重载）</li>
</ol>
<p>这一阶段主要是对类的元数据信息进行语义校验，保证不存在不符合 Java 语言规范的元数据信息。</p>
<h5 id="字节码验证"><a href="#字节码验证" class="headerlink" title="字节码验证"></a>字节码验证</h5><ol>
<li>保证任意时刻操作数栈的数据类型与指令代码序列都鞥配合工作（不会出现按照 long 类型读一个 int 型数据）</li>
<li>保证跳转指令不会跳转到方法体以外的字节码指令上</li>
<li>保证方法体中的类型转换是有效的（子类对象赋值给父类数据类型是安全的，反过来不合法的）</li>
<li>……</li>
</ol>
<p>这是整个验证过程中最复杂的一个阶段，主要目的是通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的。这个阶段对类的方法体进行校验分析，保证校验类的方法在运行时不会做出危害虚拟机安全的事件。</p>
<h5 id="符号引用验证"><a href="#符号引用验证" class="headerlink" title="符号引用验证"></a>符号引用验证</h5><ol>
<li>符号引用中通过字符创描述的全限定名是否能找到对应的类</li>
<li>在指定类中是否存在符方法的字段描述符以及简单名称所描述的方法和字段</li>
<li>符号引用中的类、字段、方法的访问性（private、protected、public、default）是否可被当前类访问</li>
<li>……</li>
</ol>
<p>最后一个阶段的校验发生在迅疾将符号引用转化为直接引用的时候，这个转化动作将在连接的第三阶段——解析阶段中发生。符号引用验证可以看做是对类自身以外（常量池中的各种符号引用）的信息进行匹配性校验，还有以上提及的内容。<br>符号引用的目的是确保解析动作能正常执行，如果无法通过符号引用验证将抛出一个 java.lang.IncompatibleClass.ChangeError 异常的子类。如 java.lang.IllegalAccessError、java.lang.NoSuchFieldError、java.lang.NoSuchMethodError 等。</p>
<h5 id="6-2-3-准备"><a href="#6-2-3-准备" class="headerlink" title="6.2.3 准备"></a>6.2.3 准备</h5><blockquote>
<p>这个阶段正式为类分配内存并设置类变量初始值，内存在方法去中分配(含 static 修饰的变量不含实例变量)。</p>
</blockquote>
<p><code>public static int value = 1127;</code><br>这句代码在初始值设置之后为 0，因为这时候尚未开始执行任何 Java 方法。而把 value 赋值为 1127 的 putstatic 指令是程序被编译后，存放于 clinit() 方法中，所以初始化阶段才会对 value 进行赋值。</p>
<p>基本数据类型的零值</p>
<table>
<thead>
<tr>
<th style="text-align:center">数据类型</th>
<th style="text-align:center">零值</th>
<th style="text-align:center">数据类型</th>
<th style="text-align:center">零值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">int</td>
<td style="text-align:center">0</td>
<td style="text-align:center">boolean</td>
<td style="text-align:center">false</td>
</tr>
<tr>
<td style="text-align:center">long</td>
<td style="text-align:center">0L</td>
<td style="text-align:center">float</td>
<td style="text-align:center">0.0f</td>
</tr>
<tr>
<td style="text-align:center">short</td>
<td style="text-align:center">(short) 0</td>
<td style="text-align:center">double</td>
<td style="text-align:center">0.0d</td>
</tr>
<tr>
<td style="text-align:center">char</td>
<td style="text-align:center">‘\u0000’</td>
<td style="text-align:center">reference</td>
<td style="text-align:center">null</td>
</tr>
<tr>
<td style="text-align:center">byte</td>
<td style="text-align:center">(byte) 0</td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<p>特殊情况：如果类字段的字段属性表中存在 ConstantValue 属性，在准备阶段虚拟机就会根据 ConstantValue 的设置将 value 赋值为 1127。</p>
<h5 id="6-2-4-解析"><a href="#6-2-4-解析" class="headerlink" title="6.2.4 解析"></a>6.2.4 解析</h5><blockquote>
<p>这个阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。</p>
</blockquote>
<ol>
<li>符号引用<br>符号引用以一组符号来描述所引用的目标，符号可以使任何形式的字面量。</li>
<li>直接引用<br>直接引用可以使直接指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄。直接引用和迅疾的内存布局实现有关</li>
</ol>
<p>解析动作主要针对类或接口、字段、类方法、接口方法、方法类型、方法句柄和调用点限定符 7 类符号引用进行，分别对应于常量池的 7 中常量类型。</p>
<h5 id="6-2-5-初始化"><a href="#6-2-5-初始化" class="headerlink" title="6.2.5 初始化"></a>6.2.5 初始化</h5><blockquote>
<p>前面过程都是以虚拟机主导，而初始化阶段开始执行类中的 Java 代码。</p>
</blockquote>
<h4 id="6-3-类加载器"><a href="#6-3-类加载器" class="headerlink" title="6.3 类加载器"></a>6.3 类加载器</h4><blockquote>
<p>通过一个类的全限定名来获取描述此类的二进制字节流。</p>
</blockquote>
<h5 id="6-3-1-双亲委派模型"><a href="#6-3-1-双亲委派模型" class="headerlink" title="6.3.1 双亲委派模型"></a>6.3.1 双亲委派模型</h5><blockquote>
<p>从 Java 虚拟机角度讲，只存在两种类加载器：一种是启动类加载器（C++ 实现，是虚拟机的一部分）；另一种是其他所有类的加载器（Java 实现，独立于虚拟机外部且全继承自 java.lang.ClassLoader）</p>
</blockquote>
<ol>
<li><p>启动类加载器<br>加载 lib 下或被 -Xbootclasspath 路径下的类</p>
</li>
<li><p>扩展类加载器<br>加载 lib/ext 或者被 java.ext.dirs 系统变量所指定的路径下的类</p>
</li>
<li><p>引用程序类加载器<br>ClassLoader负责，加载用户路径上所指定的类库。</p>
</li>
</ol>
<p><img src="/2017/09/02/reJVM/classLoader.png" alt=""><br>除顶层启动类加载器之外，其他都有自己的父类加载器。<br>工作过程：如果一个类加载器收到一个类加载的请求，它首先不会自己加载，而是把这个请求委派给父类加载器。只有父类无法完成时子类才会尝试加载。</p>
<h5 id="6-3-2-破坏双亲委派模型"><a href="#6-3-2-破坏双亲委派模型" class="headerlink" title="6.3.2 破坏双亲委派模型"></a>6.3.2 破坏双亲委派模型</h5><blockquote>
<p>keyword：线程上下文加载器(Thread Context ClassLoader)</p>
</blockquote>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><blockquote>
<p>前面两次粗略的阅读，能理解内容，但是很难记住细节。每每碰到不会的知识点就上网查，所以知识点太碎片脑子里没有体系不仅更不容易记住，而且更加容易混乱。但是通过这种方式记录发现自己清晰了很多，就算以后忘记，知识再次捡起的成本也低了很多。</p>
<p>这次还有一些章节虽然阅读了，但是还未完成记录。等自己理解深刻有空闲了就再次记录下来，这里的内容均出自周志明老师的《深入理解 Java 虚拟机》，有兴趣的可以入手纸质版。</p>
<p>多谢阅读</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;秋招开始了，前面由于做别的事耽误了半个月，以前学的东西不用就很容易忘记。所以，这次重新阅读《深入理解 JVM 虚拟机》时，想做一个记录。将碎片的知识整合，方便自己以后阅读，同时也和大家一起分享。内容中会添加我自己的理解，其中如果有错误，欢迎大家指正。&lt;/p&gt;
&lt;p&gt;相关阅读:&lt;br&gt;&lt;a href=&quot;http://fitzeng.org/2017/08/02/reDS/&quot;&gt;1. 重拾数据结构&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://fitzeng.org/2017/08/07/reOS/&quot;&gt;2. 重拾操作系统&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://fitzeng.org/2017/08/31/reCN/&quot;&gt;3. 重拾计算机网络(未完成)）&lt;/a&gt;&lt;br&gt;注意：以上内容会持续更新，欢迎大家关注&lt;a href=&quot;https://github.com/mk43&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; GitHub &lt;/a&gt; &amp;amp;&amp;amp; &lt;a href=&quot;http://fitzeng.org/&quot;&gt; Blog &lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://fitzeng.org/tags/Java/"/>
    
      <category term="JVM" scheme="http://fitzeng.org/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>重拾计算机网络</title>
    <link href="http://fitzeng.org/2017/08/31/reCN/"/>
    <id>http://fitzeng.org/2017/08/31/reCN/</id>
    <published>2017-08-30T16:00:00.000Z</published>
    <updated>2017-09-02T02:00:18.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>主要是把在重读 《计算机网络》 和 《数据通讯与网络》中觉得有价值的东西记录下来。</p>
</blockquote>
<a id="more"></a>
<h2 id="1-计算机网络基础概念"><a href="#1-计算机网络基础概念" class="headerlink" title="1. 计算机网络基础概念"></a>1. 计算机网络基础概念</h2><blockquote>
<p>一些互相连接的、自治的计算机的集合。</p>
</blockquote>
<h3 id="1-1-网络分类"><a href="#1-1-网络分类" class="headerlink" title="1.1 网络分类"></a>1.1 网络分类</h3><h4 id="不同作用范围的网络"><a href="#不同作用范围的网络" class="headerlink" title="不同作用范围的网络"></a>不同作用范围的网络</h4><ol>
<li>广域网 WAN (Wide Area Network)</li>
<li>城域网 MAN (Metropolitan Area Network)</li>
<li>局域网 LAN (Local Area Network)</li>
<li>个人区域网 PAN (Personal Area Network)</li>
</ol>
<h4 id="不同使用者的网络"><a href="#不同使用者的网络" class="headerlink" title="不同使用者的网络"></a>不同使用者的网络</h4><ol>
<li>公用网 (public network)</li>
<li>专用网 (private network)</li>
</ol>
<h4 id="用来把用户接入到因特网的网络"><a href="#用来把用户接入到因特网的网络" class="headerlink" title="用来把用户接入到因特网的网络"></a>用来把用户接入到因特网的网络</h4><ol>
<li>接入网 AN (Access Network)</li>
</ol>
<h3 id="1-2-计算机网络的性能指标"><a href="#1-2-计算机网络的性能指标" class="headerlink" title="1.2 计算机网络的性能指标"></a>1.2 计算机网络的性能指标</h3><h4 id="速率-bit-s"><a href="#速率-bit-s" class="headerlink" title="速率 (bit/s)"></a>速率 (bit/s)</h4><h4 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h4><ol>
<li>信号具有的频带宽度 (xxxHZ)</li>
<li>在计算机网络中，从来表示通讯线路所能传送数据的能力。因此网络中的带宽表示在单位时间内ongoing 网络中的某一点到另一点所能通过的<code>最高数据率</code>。单位是比特每秒(b/s)</li>
</ol>
<h4 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h4><blockquote>
<p>单位时间通过某个网络(或信道、接口)的数据量</p>
</blockquote>
<h4 id="时延"><a href="#时延" class="headerlink" title="时延"></a>时延</h4><blockquote>
<p>数据从网络的一端发送到另一端所需的时间</p>
</blockquote>
<p><code>总延时 = 发送时延 + 传播时延 + 处理时延 + 排队时延</code></p>
<p>发送时延(传输时延)</p>
<blockquote>
<p>发送数据帧的时间</p>
</blockquote>
<p><code>发送时延 = 数据帧长度(b) / 信道带宽(b/s)</code></p>
<p>传播时延</p>
<blockquote>
<p>电磁波在信道中传播一定距离花费的时间</p>
</blockquote>
<p><code>传播时延 = 信道长度(m) / 电磁波在信道上的传播速率(m/s)</code></p>
<p>处理时延</p>
<blockquote>
<p>主机或路由器在收到分组时要花费一定时间处理。</p>
</blockquote>
<p>排队时延</p>
<blockquote>
<p>在路由器中输入队列中排队等待的时间</p>
</blockquote>
<h4 id="时延带宽积"><a href="#时延带宽积" class="headerlink" title="时延带宽积"></a>时延带宽积</h4><blockquote>
<p>以比特为单位的链路长度(可以理解为 <code>体积 = 截面 * 长度</code>)</p>
</blockquote>
<p><code>时延带宽积 = 传播时延 * 带宽</code></p>
<h4 id="往返时间-RTT-Round-Trip-Time"><a href="#往返时间-RTT-Round-Trip-Time" class="headerlink" title="往返时间 RTT (Round-Trip Time)"></a>往返时间 RTT (Round-Trip Time)</h4><blockquote>
<p>从发送方发送数据开始到发送方接收到来自接收方的确认总共经历的时间。</p>
</blockquote>
<h4 id="利用率"><a href="#利用率" class="headerlink" title="利用率"></a>利用率</h4><p>信道利用率</p>
<blockquote>
<p>某信道有百分之几的时间是被利用的</p>
</blockquote>
<p>网络利用率</p>
<blockquote>
<p>D0 : 网络空闲时的时延 D : 当前网络的时延 U : 利用率</p>
</blockquote>
<p><code>D = D0 / (1 - U)</code></p>
<h3 id="1-3-计算机网络的体系结构"><a href="#1-3-计算机网络的体系结构" class="headerlink" title="1.3 计算机网络的体系结构"></a>1.3 计算机网络的体系结构</h3><blockquote>
<p>每层的具体介绍后面章节给出</p>
</blockquote>
<p><img src="/2017/08/31/reCN/osi7.png" alt=""></p>
<h2 id="2-物理层"><a href="#2-物理层" class="headerlink" title="2. 物理层"></a>2. 物理层</h2>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;主要是把在重读 《计算机网络》 和 《数据通讯与网络》中觉得有价值的东西记录下来。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="计算机网络" scheme="http://fitzeng.org/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>重拾操作系统</title>
    <link href="http://fitzeng.org/2017/08/07/reOS/"/>
    <id>http://fitzeng.org/2017/08/07/reOS/</id>
    <published>2017-08-06T16:00:00.000Z</published>
    <updated>2017-08-31T07:15:02.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>主要是把在重读 《现代操作系统》 中觉得有价值的东西，以 Tips 的形式记录下来。不可能面面俱到，但是如果有一定的基础应该是会回想起很多知识的。具体解释将会以链接形式补充。</p>
</blockquote>
<a id="more"></a>
<h3 id="1-进程与线程"><a href="#1-进程与线程" class="headerlink" title="1. 进程与线程"></a>1. 进程与线程</h3><h4 id="1-1-进程"><a href="#1-1-进程" class="headerlink" title="1.1 进程"></a>1.1 进程</h4><blockquote>
<p>主要是为了支持伪并发能力</p>
</blockquote>
<p><img src="/2017/08/07/reOS/threadstate.png" alt=""></p>
<ul>
<li>运行态 : 实际占用 CPU 资源</li>
<li>就绪态 : 可运行，但是由于没有时间片而被暂停等待 CPU 重新调度</li>
<li>阻塞态 : 外部某种事件导致（资源不足）不可运行</li>
</ul>
<p><code>CPU 利用率 = 1 - p ^ n</code> <br><br>p : IO 等待时间比 <br><br>n : 进程数</p>
<h4 id="1-2-线程"><a href="#1-2-线程" class="headerlink" title="1.2 线程"></a>1.2 线程</h4><blockquote>
<p>每一个进程有一个地址空间和一个控制线程，主要是使某个进程内的任务之间不被相互阻塞，实现一种进程内并行操作的假象。创建销毁更加轻量级。</p>
<p>共享一组资源，协同完成任务。每个线程有自己的堆栈区（因为要区分同一进程内的线程，CPU 调度要进行状态的保存）</p>
</blockquote>
<p><img src="/2017/08/07/reOS/thread.png" alt=""></p>
<h5 id="线程模型"><a href="#线程模型" class="headerlink" title="线程模型"></a>线程模型</h5><h6 id="用户空间中实现线程"><a href="#用户空间中实现线程" class="headerlink" title="用户空间中实现线程"></a>用户空间中实现线程</h6><h6 id="内核中实现线程"><a href="#内核中实现线程" class="headerlink" title="内核中实现线程"></a>内核中实现线程</h6><h6 id="混合实现"><a href="#混合实现" class="headerlink" title="混合实现"></a>混合实现</h6><h4 id="1-3-进程间通信（IPC）"><a href="#1-3-进程间通信（IPC）" class="headerlink" title="1.3 进程间通信（IPC）"></a>1.3 进程间通信（IPC）</h4><h5 id="1-竞争条件"><a href="#1-竞争条件" class="headerlink" title="1.竞争条件"></a>1.竞争条件</h5><blockquote>
<p>两个或者多个进程读写某些共享数据</p>
</blockquote>
<h5 id="2-临界区"><a href="#2-临界区" class="headerlink" title="2.临界区"></a>2.临界区</h5><blockquote>
<p>将共享内存的访问代码称为临界区，确保在每个时刻两个进程不可能同时处于临界区中，这样可以避免竞争条件。核心思想为互斥。</p>
</blockquote>
<p>并发程序准确高效要满足一下四个条件</p>
<ul>
<li>任何两个进程不能同时处于其临界区</li>
<li>不应对 CPU 的速度和数量做任何假设</li>
<li>临界区外运行的程序不得阻塞其他进程</li>
<li>不得使进程无限期等待进入临界区</li>
</ul>
<h5 id="3-忙等待的互斥"><a href="#3-忙等待的互斥" class="headerlink" title="3.忙等待的互斥"></a>3.忙等待的互斥</h5><blockquote>
<p>互斥实现方案</p>
</blockquote>
<h6 id="屏蔽中断"><a href="#屏蔽中断" class="headerlink" title="屏蔽中断"></a>屏蔽中断</h6><blockquote>
<p>每个进程进入临界区后立即屏蔽所有中断，这样 CPU 无法进行进程切换，就要离开临界区是打开中断。</p>
</blockquote>
<h6 id="锁变量"><a href="#锁变量" class="headerlink" title="锁变量"></a>锁变量</h6><blockquote>
<p>设置一个共享锁变量，初始值为 0。当一个进程想要进入临界区，必须检测锁的值是否为 0，是则置 1 进入临界区。不是则等待其他进程退出临界区时释放锁直到自己能获取到锁开始进入临界区。</p>
<p>锁变量还是会产生竞争条件</p>
</blockquote>
<h6 id="严格轮换法"><a href="#严格轮换法" class="headerlink" title="严格轮换法"></a>严格轮换法</h6><blockquote>
<p>一直循环等待直到出现允许该进程进入临界区的条件才开始运行，十分消耗 CPU 资源。</p>
<p>避免了竞争条件，但是临界区外运行的程序会发生阻塞</p>
<p>用于忙等待的锁称为自旋锁。</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">A:</div><div class="line"><span class="keyword">while</span> (TRUE) &#123;</div><div class="line">	<span class="keyword">while</span> (turn != <span class="number">0</span>);</div><div class="line">	critical_region();</div><div class="line">	turn = <span class="number">1</span>;</div><div class="line">	noncritical_region();</div><div class="line">&#125;</div><div class="line"></div><div class="line">B:</div><div class="line"><span class="keyword">while</span> (TRUE) &#123;</div><div class="line">	<span class="keyword">while</span> (turn != <span class="number">1</span>); </div><div class="line">	critical_region();</div><div class="line">	turn = <span class="number">0</span>;</div><div class="line">	noncritical_region();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="Peterson-解法"><a href="#Peterson-解法" class="headerlink" title="Peterson 解法"></a>Peterson 解法</h6><blockquote>
<p>一种互斥算法</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 2</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> turn;</div><div class="line"><span class="keyword">int</span> interested[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">enter_region</span><span class="params">(<span class="keyword">int</span> process)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> other;</div><div class="line">	other = <span class="number">1</span> - process;</div><div class="line">	interested[process] = TRUE;</div><div class="line">	turn = process;</div><div class="line">	<span class="comment">// 如果有另一个程序进入临界区的话则一直空循环</span></div><div class="line">	<span class="keyword">while</span> (turn == process &amp;&amp; interested[other] == TRUE);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">leave_region</span><span class="params">(<span class="keyword">int</span> process)</span> </span>&#123;</div><div class="line">	interested[process] = FALSE;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="4-睡眠与唤醒"><a href="#4-睡眠与唤醒" class="headerlink" title="4.睡眠与唤醒"></a>4.睡眠与唤醒</h5><blockquote>
<p>前面的弊端是忙等待会消耗 CPU 资源。如果在等待进入临界区时可以挂起，等到某个信号到达再唤醒就可以避免这种情况了。</p>
</blockquote>
<h6 id="生产者-消费者问题"><a href="#生产者-消费者问题" class="headerlink" title="生产者-消费者问题"></a>生产者-消费者问题</h6><blockquote>
<p>利用资源缓冲区实现进程间的协调</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100 </span></div><div class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">producer</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> item;</div><div class="line">	<span class="keyword">while</span> (TURE) &#123;</div><div class="line">		item = produce_item();</div><div class="line">		<span class="keyword">if</span> (count == N) &#123;</div><div class="line">			sleep();</div><div class="line">		&#125;</div><div class="line">		insert_item(item);</div><div class="line">		count = count + <span class="number">1</span>;</div><div class="line">		<span class="keyword">if</span> (count == <span class="number">1</span>) &#123;</div><div class="line">			wakeup(consumer);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">consumer</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> item;</div><div class="line">	<span class="keyword">while</span> (TURE) &#123;</div><div class="line">		<span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</div><div class="line">			sleep();</div><div class="line">		&#125;</div><div class="line">		item = remove_item();</div><div class="line">		count = count - <span class="number">1</span>;</div><div class="line">		<span class="keyword">if</span> (count == N - <span class="number">1</span>) &#123;</div><div class="line">			wakeup(producer);</div><div class="line">		&#125;</div><div class="line">		consume_item(item);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="5-信号量"><a href="#5-信号量" class="headerlink" title="5.信号量"></a>5.信号量</h5><blockquote>
<p>引入一个信号量来累计唤醒次数，可以为 0 或正数 <br><br>使用 down 和 up 操作代替 sleep 和 wakeup</p>
</blockquote>
<pre><code class="c"><span class="meta">#<span class="meta-keyword">define</span> N 100</span>
<span class="keyword">typedef</span> <span class="keyword">int</span> semaphore
semaphore mutex = <span class="number">1</span>;  <span class="comment">// 控制对临界区的访问</span>
semaphore empty = N; <span class="comment">// 计数缓冲区的空槽数目</span>
semaphore full = <span class="number">0</span>; <span class="comment">// 计数缓冲区的满槽数目</span>

<span class="function"><span class="keyword">void</span> <span class="title">producer</span><span class="params">(<span class="keyword">void</span>)</span> </span>{
    <span class="keyword">int</span> item;
    <span class="keyword">while</span> (TRUE) {
        utem = produce_item();
        down(&amp;empty);
        down(&amp;mutex);
        insert_item(item);
        up(&amp;mutex);
        up(&amp;full);
    }
}

<span class="function"><span class="keyword">void</span> <span class="title">consumer</span><span class="params">(<span class="keyword">void</span>)</span> </span>{
    <span class="keyword">int</span> item;
    <span class="keyword">while</span> (TRUE) {
        down(&amp;full);
        down(&amp;mutex);
        item = remove_item();
        up(&amp;mutex);
        up(&amp;empty);
        consume_item(item);
    }
}
</code></pre>
<ul>
<li>mutex : 用于互斥，保证任一时刻只有一个进程读写缓冲区</li>
<li>full &amp;&amp; empty : 实现同步，保证某种时间的顺序发生或者不发生</li>
</ul>
<h5 id="6-互斥量"><a href="#6-互斥量" class="headerlink" title="6.互斥量"></a>6.互斥量</h5><blockquote>
<p>仅仅适用于管理共享资源或一小段代码</p>
</blockquote>
<h5 id="7-管程"><a href="#7-管程" class="headerlink" title="7.管程"></a>7.管程</h5><h5 id="8-消息传递"><a href="#8-消息传递" class="headerlink" title="8.消息传递"></a>8.消息传递</h5><h5 id="9-屏障"><a href="#9-屏障" class="headerlink" title="9.屏障"></a>9.屏障</h5><h5 id="1-4-调度"><a href="#1-4-调度" class="headerlink" title="1.4 调度"></a>1.4 调度</h5><blockquote>
<p>当有多个进程处于就绪态时就面临调度的选择。<br><br>内核管理线程时调度可以认为是线程级别的。<br><br>进程行为有 <code>计算密集型</code> 和 <code>I/O 密集型</code>。而现在由于 CPU 改进速度加快，进程行为更倾向于后者，所以应该多运行该类进程保持 CPU 的利用率。<br></p>
</blockquote>
<h6 id="调度算法"><a href="#调度算法" class="headerlink" title="调度算法"></a>调度算法</h6><ol>
<li><p>批处理</p>
<ul>
<li>先来先服务</li>
<li>最短作业优先</li>
<li>最短剩余时间优先</li>
</ul>
</li>
<li><p>交互式</p>
<ul>
<li>轮转调度（每个进程一个时间片，用完就轮转）</li>
<li>优先级调度</li>
<li>多级队列</li>
<li>最短进程优先 （<code>aT0 + (1 - a)T1</code>）</li>
<li>保证优先</li>
<li>彩票调度</li>
<li>公平分享调度</li>
</ul>
</li>
<li><p>实时</p>
</li>
</ol>
<p>线程调度</p>
<blockquote>
<p>和系统支持的线程实现方式有关（理解 : 线程表存在哪的区别）<br></p>
</blockquote>
<p>用户级线程 : 内核并不知道，内核只是选中该进程，至于进程中跑哪个线程由用户态调度决定。<br><br>内核级线程 : 直接调度某个进程内的线程。<br><br>以上两种方式在性能上有主要差别 : 前面提及 I/O 操作其实是很耗时的，所以在进程间切换比在线程间切换更加耗时。因为线程轻量，而进程完成切换要完整的山下文切换，修改内存映像。而且同一进程内的线程 I/O 访问 cache 的局部性更高，不同进程间切换的清理缓存，这也会消耗时间。</p>
<h3 id="2-存储管理"><a href="#2-存储管理" class="headerlink" title="2. 存储管理"></a>2. 存储管理</h3><blockquote>
<p>主要思想就是内存抽象</p>
</blockquote>
<h4 id="2-1-空闲内存管理"><a href="#2-1-空闲内存管理" class="headerlink" title="2.1 空闲内存管理"></a>2.1 空闲内存管理</h4><h5 id="使用位图的存储管理"><a href="#使用位图的存储管理" class="headerlink" title="使用位图的存储管理"></a>使用位图的存储管理</h5><h5 id="使用链表的存储管理"><a href="#使用链表的存储管理" class="headerlink" title="使用链表的存储管理"></a>使用链表的存储管理</h5><h4 id="2-2-虚拟内存"><a href="#2-2-虚拟内存" class="headerlink" title="2.2 虚拟内存"></a>2.2 虚拟内存</h4><blockquote>
<p>程序产生的地址为虚拟地址，在没有虚拟内存的操作系统上，直接将地址输送到内存总线上。而有虚拟内存的操作系统上，把虚拟地址输送到 MMU（Memory Management Unit），由 MMU 将虚拟地址映射为为物理地址。</p>
</blockquote>
<h5 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h5><p>虚拟地址空间 : 页面 物理内存地址 : 叶框 4k大小 <br><br>虚拟地址 = 虚拟页号(高位) + 偏移量(低位) <br><br>页表 : 把虚拟地址的页面映射为页框，每个进程都有自己的页表<br></p>
<p>加速分页方法 : 转换检测缓冲区（TLB）主要是优先在 TLB 中查找页面号。<br></p>
<p>大内存页表<br></p>
<ol>
<li>多级页表</li>
<li>倒排页表 : 每个页框一个表项 + TLB 快表</li>
</ol>
<h4 id="2-3-页面置换算法"><a href="#2-3-页面置换算法" class="headerlink" title="2.3 页面置换算法"></a>2.3 页面置换算法</h4><blockquote>
<p>最优页面置换算法不可实现，因为无法确定未来。</p>
</blockquote>
<h5 id="1-最近未使用页面置换算法-NRU"><a href="#1-最近未使用页面置换算法-NRU" class="headerlink" title="1.最近未使用页面置换算法(NRU)"></a>1.最近未使用页面置换算法(NRU)</h5><blockquote>
<p>设置访问（读、写）位 R，页面修改位 M。<br></p>
</blockquote>
<h5 id="2-先进先出页面置换算法-FIFO"><a href="#2-先进先出页面置换算法-FIFO" class="headerlink" title="2.先进先出页面置换算法(FIFO)"></a>2.先进先出页面置换算法(FIFO)</h5><h5 id="3-第二次机会页面置换算法"><a href="#3-第二次机会页面置换算法" class="headerlink" title="3.第二次机会页面置换算法"></a>3.第二次机会页面置换算法</h5><blockquote>
<p>设置一个检测最老页面位 R</p>
</blockquote>
<h5 id="4-时钟页面置换算法"><a href="#4-时钟页面置换算法" class="headerlink" title="4.时钟页面置换算法"></a>4.时钟页面置换算法</h5><blockquote>
<p>链表实现页面选择</p>
</blockquote>
<h5 id="5-最近最少使用页面置换算法-LRU"><a href="#5-最近最少使用页面置换算法-LRU" class="headerlink" title="5.最近最少使用页面置换算法(LRU)"></a>5.最近最少使用页面置换算法(LRU)</h5><blockquote>
<p>利用矩阵模拟 : 增加自身权重减少其他权重，行置 1，列置 0。</p>
</blockquote>
<h5 id="6-用软件模拟-LRU"><a href="#6-用软件模拟-LRU" class="headerlink" title="6.用软件模拟 LRU"></a>6.用软件模拟 LRU</h5><blockquote>
<p>老化算法</p>
</blockquote>
<h5 id="7-工作集页面置换算法"><a href="#7-工作集页面置换算法" class="headerlink" title="7.工作集页面置换算法"></a>7.工作集页面置换算法</h5><h5 id="8-工作集时钟页面置换算法"><a href="#8-工作集时钟页面置换算法" class="headerlink" title="8.工作集时钟页面置换算法"></a>8.工作集时钟页面置换算法</h5><table>
<thead>
<tr>
<th style="text-align:center">算法</th>
<th style="text-align:center">注释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">最优算法</td>
<td style="text-align:center">不可实现，但可作为基准</td>
</tr>
<tr>
<td style="text-align:center">NRU(最近未使用)算法</td>
<td style="text-align:center">LRU 的很粗糙近似</td>
</tr>
<tr>
<td style="text-align:center">FIFO(先进先出)算法</td>
<td style="text-align:center">可能抛弃重要页面</td>
</tr>
<tr>
<td style="text-align:center">第二次机会算法</td>
<td style="text-align:center">比 FIFO 有大的改善</td>
</tr>
<tr>
<td style="text-align:center">时钟算法</td>
<td style="text-align:center">现实的</td>
</tr>
<tr>
<td style="text-align:center">LRU(最近最少使用)算法</td>
<td style="text-align:center">很优秀，但很难实现</td>
</tr>
<tr>
<td style="text-align:center">NFU(最不经常使用)算法</td>
<td style="text-align:center">LRU 的相对粗略的近似</td>
</tr>
<tr>
<td style="text-align:center">老化算法</td>
<td style="text-align:center">非常近似 LRU 的有效算法</td>
</tr>
<tr>
<td style="text-align:center">工作集算法</td>
<td style="text-align:center">实现起来开销很大</td>
</tr>
<tr>
<td style="text-align:center">工作集时钟算法</td>
<td style="text-align:center">好的有效算法</td>
</tr>
</tbody>
</table>
<h4 id="2-4-内存映射文件"><a href="#2-4-内存映射文件" class="headerlink" title="2.4 内存映射文件"></a>2.4 内存映射文件</h4><blockquote>
<p>进程发起系统调用，把文件映射到其虚拟地址空间的一部分。一般实现是开始不加载，在程序访问时在按页加载。</p>
</blockquote>
<p>// Linux 待填</p>
<h4 id="2-5-实现"><a href="#2-5-实现" class="headerlink" title="2.5 实现"></a>2.5 实现</h4><h5 id="分页工作"><a href="#分页工作" class="headerlink" title="分页工作"></a>分页工作</h5><ul>
<li>进程创建时 : 操作系统要确定程序和数据在初始时有多大，并为它们创建一个页表，操作系统还要在内存中为页表分配空间并对其进行初始化。<br></li>
<li>进程运行时 : 页表必须在内存中(反之不需要)，并且在磁盘交换区中分配空间。<br></li>
<li>调度一个进程执行时 : 为新进程充值 MMU，刷新 TLB，更换页表。<br></li>
<li>缺页中断发生时 : 操作系统必须通过读硬件寄存器确定是哪个虚拟地址造成了缺页中断通过该信息计算需要哪个页面，定位磁盘位置并找到合适的页框来存放新页面，必要的话要置换老页面，然后把所需页面读入页框。最后，备份程序计数器，是程序计数器指向引起缺页中断的指令，并重新执行该指令。<br></li>
<li>进程退出时 : 释放页表，页面和页面在硬盘上占的空间。</li>
</ul>
<h5 id="缺页中断处理"><a href="#缺页中断处理" class="headerlink" title="缺页中断处理"></a>缺页中断处理</h5><ol>
<li>硬件陷入内核，在堆栈中保存程序计数器。大多数机器将当前的指令的各种状态信息保存在特殊的 CPU 寄存器中。</li>
<li>启动一个汇编代码例程保存通用寄存器和其他易失信息，以免被操作系统破坏。这个例程将操作系统做为一个函数来调用。</li>
<li>当操作系统发现一个缺页中断时，尝试发现需要哪个虚拟页面。通常一个硬件寄存器包含了这一信息，如果没有的话，操作系统必须检索程序计数器，取出这条指令，用软件分析这条指令，看看他在缺页中断时正在做什么。</li>
<li>一旦知道了发生缺页中断的虚拟地址，操作系统检查这个地址是否有效，并检查存取与保护是否一致，如果不一致，向进程发出一个信号或杀掉该进程。如果地址有效且没有保护错误发生，系统则检查是否有空闲页框。如果没有空闲页框，执行页面置换算法寻找一个页面来淘汰。</li>
<li>如果选择的页框“脏”了，安排该页面写回磁盘，并发生一次上下文切换，挂起产生缺页中断的进程，让其他进程运行直至磁盘传输结束。无论如何，该页框被标记为忙，以免因为其他原因而被其他进程占用。</li>
<li>一旦页框“干净”后（无论是立刻还是在写回磁盘后），操作系统查找所需页面在磁盘上的地址，通过磁盘操作将其装入。该页面被装入后，产生缺页中断的进程仍然被挂起，并且如果有其他可运行用户进程，则选择另一个用户进程运行。</li>
<li>当磁盘中断发生时，表明该页已被装入，页表已经更新可以反映他的位置，页框也被标记为正常状态。</li>
<li>恢复发生缺页中断指令以前的状态，程序计数器重新定向这条指令。</li>
<li>调度引发缺页中断的进程，操作系统返回调用他的汇编语言例程。</li>
<li>该例程恢复寄存器和其他状态信息，放回到用户空间继续执行，就好像缺页中断没有发生过一样。</li>
</ol>
<h4 id="2-6-分段"><a href="#2-6-分段" class="headerlink" title="2.6 分段"></a>2.6 分段</h4><blockquote>
<p>段是逻辑实体，大小不固定。</p>
</blockquote>
<h4 id="2-7-分段和分页结合-MULTICS"><a href="#2-7-分段和分页结合-MULTICS" class="headerlink" title="2.7 分段和分页结合 : MULTICS"></a>2.7 分段和分页结合 : MULTICS</h4><blockquote>
<p>还有 Intel Pentuium 未介绍</p>
</blockquote>
<p>34 位的 MULTICS 虚拟地址</p>
<table>
<thead>
<tr>
<th style="text-align:center">段号</th>
<th style="text-align:center">页号</th>
<th style="text-align:center">页内偏移</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">18</td>
<td style="text-align:center">6</td>
<td style="text-align:center">10</td>
</tr>
</tbody>
</table>
<ol>
<li>根据段号找到段描述符</li>
<li>检查该段的页表是否存在内存中。如果在，则找到他；如果不再，则产生一个段错误。如果访问违反了段的保护要求就要求发出一个越界错误(陷阱)。</li>
<li>检查所请求虚拟页面的页表项，如果该页面不再内存中则产生一个缺页中断，如果在内存就从页表中取出这个页面在内存中的起始地址。</li>
<li>把偏移量加到页面的起始地址上，得到要访问的字在内存中的地址。</li>
<li>最后进行读或写操作。</li>
</ol>
<h3 id="3-文件系统"><a href="#3-文件系统" class="headerlink" title="3. 文件系统"></a>3. 文件系统</h3><blockquote>
<p>文件系统存放在磁盘上。多数磁盘划分为一个或多个分区，每个分区中有一个独立的文件系统。磁盘的 0 号盘扇区称为主引导记录(Master Boot Record, MBR)，用来引导计算机。在 MBR 的结尾是分区表，该表给出了每个分区的其实和结束地址。表中的一个分区被标记为活动分区。在计算机被引导时，BIOS 读入并执行 MBR。MBR 做的第一件事是确定活动分区，读入它的第一个块，称为引导块，并执行。</p>
</blockquote>
<p>整个分区: </p>
<table>
<thead>
<tr>
<th style="text-align:center">MBR</th>
<th style="text-align:center">分区表</th>
<th style="text-align:center">磁盘分区</th>
<th style="text-align:center">磁盘分区</th>
<th style="text-align:center">磁盘分区…</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<p>磁盘分区: </p>
<table>
<thead>
<tr>
<th style="text-align:center">引导块</th>
<th style="text-align:center">超级块</th>
<th style="text-align:center">空闲空间管理</th>
<th style="text-align:center">i 节点</th>
<th style="text-align:center">根目录</th>
<th style="text-align:center">文件和目录</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<h4 id="3-1-文件实现"><a href="#3-1-文件实现" class="headerlink" title="3.1 文件实现"></a>3.1 文件实现</h4><h5 id="连续分配"><a href="#连续分配" class="headerlink" title="连续分配"></a>连续分配</h5><blockquote>
<p>把每个文件作为一连串连续数据块存储在磁盘上。</p>
</blockquote>
<h5 id="链表分配"><a href="#链表分配" class="headerlink" title="链表分配"></a>链表分配</h5><blockquote>
<p>一个文件由几个磁盘块组成。</p>
</blockquote>
<h5 id="在内存中采用表的链表分配"><a href="#在内存中采用表的链表分配" class="headerlink" title="在内存中采用表的链表分配"></a>在内存中采用表的链表分配</h5><blockquote>
<p>把每个磁盘块的指针字放在内存的一个表中</p>
</blockquote>
<h5 id="i-节点"><a href="#i-节点" class="headerlink" title="i 节点"></a>i 节点</h5><blockquote>
<p>每个文件赋予一个称为 i 节点(index-node)的数据结构，列出文件属性和文件快的磁盘地址。</p>
</blockquote>
<h3 id="4-输入-输出"><a href="#4-输入-输出" class="headerlink" title="4. 输入/输出"></a>4. 输入/输出</h3><h5 id="4-1-I-O-硬件原理"><a href="#4-1-I-O-硬件原理" class="headerlink" title="4.1 I/O 硬件原理"></a>4.1 I/O 硬件原理</h5><h6 id="I-O-设备"><a href="#I-O-设备" class="headerlink" title="I/O 设备"></a>I/O 设备</h6><p>块设备 : 以块为单位传输，可寻址<br><br>字符设备 : 以字符为单位收发字符流，不可寻址<br></p>
<h6 id="设备控制器"><a href="#设备控制器" class="headerlink" title="设备控制器"></a>设备控制器</h6><h6 id="内存映射-I-O"><a href="#内存映射-I-O" class="headerlink" title="内存映射 I/O"></a>内存映射 I/O</h6><h6 id="直接存储器存取"><a href="#直接存储器存取" class="headerlink" title="直接存储器存取"></a>直接存储器存取</h6><p>DMA 工作原理:</p>
<ol>
<li>CPU 对 DMA 控制器进行编程</li>
<li>DMA 请求磁盘传送数据到内存</li>
<li>磁盘传送数据到内存</li>
<li>磁盘给 DMA 控制器应答</li>
<li>完成中断</li>
</ol>
<h3 id="5-死锁"><a href="#5-死锁" class="headerlink" title="5. 死锁"></a>5. 死锁</h3><h4 id="5-1-资源"><a href="#5-1-资源" class="headerlink" title="5.1 资源"></a>5.1 资源</h4><blockquote>
<p>在进程对设备，文件等取得了排他性访问权限的时候，有可能会出现死锁。这类需要排他性使用的对象称为资源。</p>
</blockquote>
<h5 id="可抢占资源"><a href="#可抢占资源" class="headerlink" title="可抢占资源"></a>可抢占资源</h5><blockquote>
<p>可以从拥有它的进程中抢占而不会产生任何副作用。（存储器）</p>
</blockquote>
<h5 id="不可抢占资源"><a href="#不可抢占资源" class="headerlink" title="不可抢占资源"></a>不可抢占资源</h5><blockquote>
<p>指在不引起相关的计算失败的情况下，无法把他从占有它的进程处抢占过来。（ CD 刻录）</p>
</blockquote>
<p>资源使用步骤:</p>
<ol>
<li>请求资源</li>
<li>使用资源</li>
<li>释放资源</li>
</ol>
<h4 id="5-2-死锁概述"><a href="#5-2-死锁概述" class="headerlink" title="5.2 死锁概述"></a>5.2 死锁概述</h4><blockquote>
<p>如果一个进程集合中的每个进程都在等待只能由该进程集合中的其他进程才能引发的事件，那么，该进程集合就是死锁的。</p>
</blockquote>
<h5 id="资源死锁条件"><a href="#资源死锁条件" class="headerlink" title="资源死锁条件"></a>资源死锁条件</h5><p>发生资源死锁的四个必要条件:</p>
<ol>
<li>互斥条件 : 每个资源要么已经分配了一个进程，要么就是可用的。</li>
<li>占有和等待条件 : 已经得到了某个资源的进程可以再请求新的资源。</li>
<li>不可抢占条件 : 已经分配给一个进程的资源不能强制性地被抢占，它只能被占有它的进程显示地释放。</li>
<li>环路等待条件 : 死锁发生时，系统中一定有两个或两个以上的进程组成的一条环路，该环路中的每个进程都在等待着下一个进程所占有的资源。</li>
</ol>
<h4 id="5-3-死锁检测与死锁恢复"><a href="#5-3-死锁检测与死锁恢复" class="headerlink" title="5.3 死锁检测与死锁恢复"></a>5.3 死锁检测与死锁恢复</h4><blockquote>
<p>死锁检测主要是判断当前空闲资源在某种合理分配下是否能使所有进程都运行完并且最终资源都能够释放。</p>
</blockquote>
<p>恢复方法 : </p>
<ol>
<li>利用抢占式恢复</li>
<li>利用回滚恢复</li>
<li>利用杀死进程恢复</li>
</ol>
<h4 id="5-4-死锁避免"><a href="#5-4-死锁避免" class="headerlink" title="5.4 死锁避免"></a>5.4 死锁避免</h4><h5 id="资源轨迹图"><a href="#资源轨迹图" class="headerlink" title="资源轨迹图"></a>资源轨迹图</h5><h5 id="安全状态和不安全状态"><a href="#安全状态和不安全状态" class="headerlink" title="安全状态和不安全状态"></a>安全状态和不安全状态</h5><h5 id="单个资源的银行家算法"><a href="#单个资源的银行家算法" class="headerlink" title="单个资源的银行家算法"></a>单个资源的银行家算法</h5><h5 id="多个资源的银行家算法"><a href="#多个资源的银行家算法" class="headerlink" title="多个资源的银行家算法"></a>多个资源的银行家算法</h5><h4 id="5-5-死锁预防"><a href="#5-5-死锁预防" class="headerlink" title="5.5 死锁预防"></a>5.5 死锁预防</h4><blockquote>
<p>死锁避免从本质上来说是不可能的，因为他要获取未来的信息。</p>
</blockquote>
<h5 id="破坏互斥条件"><a href="#破坏互斥条件" class="headerlink" title="破坏互斥条件"></a>破坏互斥条件</h5><blockquote>
<p>如果资源不被一个进程独占死锁不会发生。（假脱机打印机）</p>
</blockquote>
<h5 id="破坏占有和等待条件"><a href="#破坏占有和等待条件" class="headerlink" title="破坏占有和等待条件"></a>破坏占有和等待条件</h5><blockquote>
<p>开始执行前请求所有资源就不会造成等待。另一种是请求资源时先释放自己所持有的资源，再尝试一次请求资源。</p>
</blockquote>
<h5 id="破坏不可抢占条件"><a href="#破坏不可抢占条件" class="headerlink" title="破坏不可抢占条件"></a>破坏不可抢占条件</h5><blockquote>
<p>针对某些资源进行虚拟化，实现可抢占。</p>
</blockquote>
<h5 id="破坏环路等待条件"><a href="#破坏环路等待条件" class="headerlink" title="破坏环路等待条件"></a>破坏环路等待条件</h5><blockquote>
<p>保证每个进程在任何时刻只能占用一个资源如果要请求另外一个资源它必须先释放第一个资源。另一种是将所有资源统一编号，进程可以在任何时刻提出资源请求，但是请求必须按照资源编号顺序(升序)提出。</p>
</blockquote>
<h4 id="5-6-其他问题"><a href="#5-6-其他问题" class="headerlink" title="5.6 其他问题"></a>5.6 其他问题</h4><h5 id="两阶段加锁"><a href="#两阶段加锁" class="headerlink" title="两阶段加锁"></a>两阶段加锁</h5><h5 id="通讯死锁"><a href="#通讯死锁" class="headerlink" title="通讯死锁"></a>通讯死锁</h5><h5 id="活锁"><a href="#活锁" class="headerlink" title="活锁"></a>活锁</h5><h5 id="饥饿"><a href="#饥饿" class="headerlink" title="饥饿"></a>饥饿</h5>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;主要是把在重读 《现代操作系统》 中觉得有价值的东西，以 Tips 的形式记录下来。不可能面面俱到，但是如果有一定的基础应该是会回想起很多知识的。具体解释将会以链接形式补充。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="C/C++" scheme="http://fitzeng.org/tags/C-C/"/>
    
      <category term="OS" scheme="http://fitzeng.org/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>Why Marvel ?</title>
    <link href="http://fitzeng.org/2017/08/03/WhyMarvel/"/>
    <id>http://fitzeng.org/2017/08/03/WhyMarvel/</id>
    <published>2017-08-02T16:00:00.000Z</published>
    <updated>2017-08-04T09:21:04.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>先给自己挖个坑, 记录一下从 12 - 17 这五年间的点点滴滴.很久之前就很想写写自己心中的 Marvel. 人总得有些爱好是与理想相关的, 不是吗?</p>
</blockquote>
<a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;先给自己挖个坑, 记录一下从 12 - 17 这五年间的点点滴滴.很久之前就很想写写自己心中的 Marvel. 人总得有些爱好是与理想相关的, 不是吗?&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Life" scheme="http://fitzeng.org/tags/Life/"/>
    
      <category term="Marvel" scheme="http://fitzeng.org/tags/Marvel/"/>
    
  </entry>
  
  <entry>
    <title>重拾数据结构</title>
    <link href="http://fitzeng.org/2017/08/02/reDS/"/>
    <id>http://fitzeng.org/2017/08/02/reDS/</id>
    <published>2017-08-01T16:00:00.000Z</published>
    <updated>2017-08-08T07:17:45.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>在大三到大四过渡期中, 从四月到七月, 经历过几场面试, 找实习. (如果八月份拿到[真.offer]的话我也想把这段经历记录下来) 结果很悲剧, 觉得方向不是什么障碍, 基础比较重, 所以要重拾数据结构不涉及算法具体实现, 因为是重拾, 所以先前有一定基础, 只要有一点提示便能唤醒无限回忆. 这里主要是记录各种数据结构的结构体, 这是经过重重思维过程得出的精华, 十分有价值. 至于具体实现和讲解日后回会以链接形式提供, 这里只提供一个思维树, 建立一个数据机构的思维体系, 后续更新欢迎关注 <a href="https://github.com/mk43/Algo-Math" target="_blank" rel="external">GitHub</a>.</p>
</blockquote>
<a id="more"></a>
<h3 id="1-线性表"><a href="#1-线性表" class="headerlink" title="1 线性表"></a>1 线性表</h3><h5 id="1-1-动态分配空间"><a href="#1-1-动态分配空间" class="headerlink" title="1.1 动态分配空间"></a>1.1 动态分配空间</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line">	ElemType * elem;</div><div class="line">	<span class="keyword">int</span> length;</div><div class="line">	<span class="keyword">int</span> listsize;</div><div class="line">&#125; SqList;</div></pre></td></tr></table></figure>
<h5 id="1-2-线性链表"><a href="#1-2-线性链表" class="headerlink" title="1.2 线性链表"></a>1.2 线性链表</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> &#123;</span></div><div class="line">	ElemType data;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> * <span class="title">next</span>;</span></div><div class="line">&#125; LNode, * LinkList;</div></pre></td></tr></table></figure>
<h5 id="1-3-静态链表"><a href="#1-3-静态链表" class="headerlink" title="1.3 静态链表"></a>1.3 静态链表</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line">	ElemType data;</div><div class="line">	<span class="keyword">int</span> cur;	<span class="comment">// 游标指向下一个元素的数组下标</span></div><div class="line">&#125; component, SlinkList[MAXSIZE];</div></pre></td></tr></table></figure>
<h5 id="1-4-循环链表-amp-双向链表"><a href="#1-4-循环链表-amp-双向链表" class="headerlink" title="1.4 循环链表 &amp; 双向链表"></a>1.4 循环链表 &amp; 双向链表</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DuLNode</span>&#123;</span></div><div class="line">	ElemType data;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">DuLNode</span> * <span class="title">prior</span>;</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">DuLNode</span> * <span class="title">next</span>;</span></div><div class="line">&#125; DuLNode, * DuLinkList;</div></pre></td></tr></table></figure>
<h3 id="2-栈和队列"><a href="#2-栈和队列" class="headerlink" title="2 栈和队列"></a>2 栈和队列</h3><h5 id="2-1-栈"><a href="#2-1-栈" class="headerlink" title="2.1 栈"></a>2.1 栈</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line">	SELemType * base;</div><div class="line">	SElemType * top;####<span class="meta"># </span></div><div class="line">	int stacksize;</div><div class="line">&#125; SqStack;</div></pre></td></tr></table></figure>
<blockquote>
<p>应用: 主要是利用先进后出的特性</p>
<ul>
<li><p>数制转换</p>
</li>
<li><p>括号匹配检测</p>
</li>
<li><p>行编辑程序</p>
</li>
<li><p>迷宫非递归求解</p>
</li>
<li><p>表达式求值</p>
</li>
<li><p>Hanoi塔问题</p>
</li>
</ul>
</blockquote>
<h5 id="2-2-队列"><a href="#2-2-队列" class="headerlink" title="2.2 队列"></a>2.2 队列</h5><ul>
<li>链队列</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span> &#123;</span></div><div class="line">	QElemType data;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">QNode</span> * <span class="title">next</span>;</span></div><div class="line">&#125; QNode, * QueuePtr;</div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line">	QueuePtr front;</div><div class="line">	QueuePtr rear;</div><div class="line">&#125; LinkQueue;</div></pre></td></tr></table></figure>
<ul>
<li>循环队列</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line">	QElemType * base;</div><div class="line">	<span class="keyword">int</span> front;</div><div class="line">	<span class="keyword">int</span> rear;</div><div class="line">&#125; SqQueue;</div></pre></td></tr></table></figure>
<h3 id="3-串"><a href="#3-串" class="headerlink" title="3 串"></a>3 串</h3><h5 id="3-1-定长串"><a href="#3-1-定长串" class="headerlink" title="3.1 定长串"></a>3.1 定长串</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> SString[MAXSTRLEN + <span class="number">1</span>];</div><div class="line">SString s;</div></pre></td></tr></table></figure>
<h5 id="3-2-变长"><a href="#3-2-变长" class="headerlink" title="3.2 变长"></a>3.2 变长</h5><ul>
<li>堆分配存储</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line">	<span class="keyword">char</span> * ch;</div><div class="line">	<span class="keyword">int</span> length;</div><div class="line">&#125;HString;</div></pre></td></tr></table></figure>
<ul>
<li>块链存储</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Chunk</span>&#123;</span></div><div class="line">	<span class="keyword">char</span> ch[CHUNKSIZE];</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Chunk</span> * <span class="title">next</span>;</span></div><div class="line">&#125; Chunk;</div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line">	Chunk * head;</div><div class="line">	Chunk * tail;</div><div class="line">	<span class="keyword">int</span> curlen;</div><div class="line">&#125; LString;</div></pre></td></tr></table></figure>
<blockquote>
<p>应用</p>
<ul>
<li>子串定位 (KMP)</li>
</ul>
</blockquote>
<h3 id="4-数组和广义表"><a href="#4-数组和广义表" class="headerlink" title="4 数组和广义表"></a>4 数组和广义表</h3><h5 id="4-1-数组顺序存储"><a href="#4-1-数组顺序存储" class="headerlink" title="4.1 数组顺序存储"></a>4.1 数组顺序存储</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line">	ElemType * base;</div><div class="line">	<span class="keyword">int</span> dim;    <span class="comment">// 数组维数</span></div><div class="line">	<span class="keyword">int</span> * bounds;    <span class="comment">// 维界基址</span></div><div class="line">	<span class="keyword">int</span> * constants;    <span class="comment">// 印象函数常量基址</span></div><div class="line">&#125; Array;</div></pre></td></tr></table></figure>
<h5 id="4-2-矩阵"><a href="#4-2-矩阵" class="headerlink" title="4.2 矩阵"></a>4.2 矩阵</h5><blockquote>
<p>讨论稀疏矩阵的存储</p>
</blockquote>
<ul>
<li>三元顺序表</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line">	<span class="keyword">int</span> i;</div><div class="line">	<span class="keyword">int</span> j;</div><div class="line">	ElemType e;</div><div class="line">&#125; Triple;</div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line">	Triple data[MAXSIZE + <span class="number">1</span>];</div><div class="line">	<span class="keyword">int</span> mu;    <span class="comment">// 行</span></div><div class="line">	<span class="keyword">int</span> nu;    <span class="comment">// 列</span></div><div class="line">	<span class="keyword">int</span> tu;    <span class="comment">// 非零个数</span></div><div class="line">&#125;TSMatrix;</div></pre></td></tr></table></figure>
<ul>
<li>行逻辑链接</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line">	Triple data[MAXSIZE + <span class="number">1</span>];</div><div class="line">	<span class="keyword">int</span> rpos[MAXRC + <span class="number">1</span>];    <span class="comment">// 各行第一个非零元素位置表</span></div><div class="line">	<span class="keyword">int</span> mu, nu, tu;</div><div class="line">&#125; RLSMatrix;</div></pre></td></tr></table></figure>
<ul>
<li>十字链表</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">OLNode</span> &#123;</span></div><div class="line">	<span class="keyword">int</span> i;</div><div class="line">	<span class="keyword">int</span> j;</div><div class="line">	ElemType e;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">OLNode</span> * <span class="title">right</span>;</span>    <span class="comment">// 该非零元素所在行的右链域</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">OLNode</span> * <span class="title">down</span>;</span>    <span class="comment">// 该非零元素所在列的下链域</span></div><div class="line">&#125; OLNode, * OLink;</div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line">	OLink * rhead;    <span class="comment">// 行链表头指针地址</span></div><div class="line">	OLink * chead;    <span class="comment">// 列链表头指针地址</span></div><div class="line">	<span class="keyword">int</span> mu, nu, tu;</div><div class="line">&#125; CrossLink;</div></pre></td></tr></table></figure>
<h5 id="4-3-广义表"><a href="#4-3-广义表" class="headerlink" title="4.3 广义表"></a>4.3 广义表</h5><blockquote>
<p>表中有表</p>
</blockquote>
<ul>
<li>头尾链表存储</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> &#123; ATOM, LIST &#125; ElemTag;    <span class="comment">// 0 : 原子, 1 : 子表</span></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">GLNode</span> &#123;</span></div><div class="line">	ElemTag tag;</div><div class="line">	<span class="keyword">union</span> &#123;</div><div class="line">		AtomType atom;</div><div class="line">		<span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line">			<span class="class"><span class="keyword">struct</span> <span class="title">GLNode</span> * <span class="title">hp</span>;</span>    <span class="comment">// 表头</span></div><div class="line">			<span class="class"><span class="keyword">struct</span> <span class="title">GLNode</span> * <span class="title">tp</span>;</span>    <span class="comment">// 表尾</span></div><div class="line">		&#125; ptr;    <span class="comment">// 表节点指针域</span></div><div class="line">	&#125;;</div><div class="line">&#125; * GList;</div></pre></td></tr></table></figure>
<ul>
<li>扩展线性链表存储</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> &#123; ATOM, LIST &#125; ElemTag;    <span class="comment">// 0 : 原子, 1 : 子表</span></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">GLNode</span> &#123;</span></div><div class="line">	ElemTag tag;</div><div class="line">	<span class="keyword">union</span> &#123;</div><div class="line">		AtomType atom;</div><div class="line">		<span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line">			<span class="class"><span class="keyword">struct</span> <span class="title">GLNode</span> * <span class="title">hp</span>;</span>    <span class="comment">// 表头</span></div><div class="line">		&#125; ptr;    <span class="comment">// 表节点指针域</span></div><div class="line">	&#125;;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">GLNode</span> * <span class="title">tp</span>;</span>    <span class="comment">// 表尾, 相当于 next.</span></div><div class="line">&#125; * GList;</div></pre></td></tr></table></figure>
<h3 id="5-树和二叉树"><a href="#5-树和二叉树" class="headerlink" title="5 树和二叉树"></a>5 树和二叉树</h3><h5 id="5-1-二叉树存储结构"><a href="#5-1-二叉树存储结构" class="headerlink" title="5.1 二叉树存储结构"></a>5.1 二叉树存储结构</h5><ul>
<li>顺序存储结构</li>
</ul>
<blockquote>
<p>数组, 利用下标寻址</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> TElemType SqBiTree[MAX_TREE_SIZE];</div></pre></td></tr></table></figure>
<ul>
<li>链式存储结构</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> &#123;</span></div><div class="line">	TElemType data;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> * <span class="title">lchild</span>;</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> * <span class="title">rchild</span>;</span></div><div class="line">&#125; BiTNode, * BiTree;</div></pre></td></tr></table></figure>
<h5 id="5-2-遍历二叉树"><a href="#5-2-遍历二叉树" class="headerlink" title="5.2 遍历二叉树"></a>5.2 遍历二叉树</h5><ul>
<li>先序遍历</li>
</ul>
<blockquote>
<p>根节点 -&gt; 左子树 -&gt; 右子树</p>
</blockquote>
<ul>
<li>中序遍历</li>
</ul>
<blockquote>
<p>左子树 -&gt; 根节点 -&gt; 右子树</p>
</blockquote>
<ul>
<li>后序遍历</li>
</ul>
<blockquote>
<p>左子树 -&gt; 右子树 -&gt; 根节点</p>
<p>算数表达式 a + b * (c - d) - e / f</p>
<p>前缀表达式-先序遍历(逆波兰 : - + a * b - cd / ef)</p>
<p>中缀表达式-中序遍历(原表达式 : a + b * (c - d) - e / f)</p>
<p>后缀表达式-后续遍历(逆波兰式 : abcd - * + ef / -)</p>
</blockquote>
<h5 id="5-3-线索二叉树"><a href="#5-3-线索二叉树" class="headerlink" title="5.3 线索二叉树"></a>5.3 线索二叉树</h5><blockquote>
<p>保存比遍历过程中的节点相关性结果</p>
<p>前驱后继节点和左右孩子指示</p>
<table>
<thead>
<tr>
<th>lchild</th>
<th>LTag</th>
<th>data</th>
<th>RTag</th>
<th>rchild</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<p>LTag 0 : lchild 域指示左孩子 1 : lchild 域指示前驱节点</p>
<p>RTag 0 : rchild 域指示右孩子 1 : rchild 域指示后继节点</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> PointerTag &#123;Link, Thread&#125;;    <span class="comment">// 0 : 指针 1 : 线索</span></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiThrNode</span> &#123;</span></div><div class="line">	TElemType data;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">BiThrNode</span> * <span class="title">lchild</span>;</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">BiThrNode</span> * <span class="title">rchild</span>;</span></div><div class="line">	PointerTag LTag;</div><div class="line">	PointerTag RTag;</div><div class="line">&#125; BiThrNode, * BiThrTree;</div></pre></td></tr></table></figure>
<h5 id="5-4-树和森林"><a href="#5-4-树和森林" class="headerlink" title="5.4 树和森林"></a>5.4 树和森林</h5><ul>
<li>双亲表示法</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">PTNode</span> &#123;</span></div><div class="line">	TElemType data;</div><div class="line">	<span class="keyword">int</span> parent;</div><div class="line">&#125; PTNode;</div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line">	PTNode nodes[MAX_TREE_SIZE];</div><div class="line">	<span class="keyword">int</span> r;    <span class="comment">// 根的位置</span></div><div class="line">	<span class="keyword">int</span> n;    <span class="comment">// 节点数</span></div><div class="line">&#125; PTree;</div></pre></td></tr></table></figure>
<ul>
<li>孩子表示法</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">CTNode</span> &#123;</span>    <span class="comment">// 孩子节点</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">CTNode</span> * <span class="title">next</span>;</span></div><div class="line">	<span class="keyword">int</span> child;</div><div class="line">&#125; * ChildPtr;</div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line">	TElemType data;</div><div class="line">	ChildPtr firstchild;    <span class="comment">// 孩子链表头指针</span></div><div class="line">&#125; CTBox;</div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line">	CTBox nodes[MAX_TREE_SIZE];</div><div class="line">	<span class="keyword">int</span> r;    <span class="comment">// 根的位置</span></div><div class="line">	<span class="keyword">int</span> n;    <span class="comment">// 节点数</span></div><div class="line">&#125; CTree;</div></pre></td></tr></table></figure>
<ul>
<li>孩子兄弟表示法</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">CSNode</span> &#123;</span></div><div class="line">	ElemType data;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">CSNode</span> * <span class="title">firstchild</span>;</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">CSNode</span> * <span class="title">nextsibling</span>;</span></div><div class="line">&#125; CSNode, * CSTree;</div></pre></td></tr></table></figure>
<h5 id="5-5-二叉树和森林互换"><a href="#5-5-二叉树和森林互换" class="headerlink" title="5.5 二叉树和森林互换"></a>5.5 二叉树和森林互换</h5><ul>
<li>森林转换成二叉树</li>
</ul>
<blockquote>
<p>左孩子右兄弟(左右是对二叉树而言, 孩子兄弟是对森林而言, 下面同理) </p>
</blockquote>
<ul>
<li>二叉树转换成森林</li>
</ul>
<blockquote>
<p>左孩子转换成孩子, 右孩子转换成兄弟</p>
</blockquote>
<h5 id="5-6-树和森林遍历"><a href="#5-6-树和森林遍历" class="headerlink" title="5.6 树和森林遍历"></a>5.6 树和森林遍历</h5><ul>
<li>先序遍历森林</li>
</ul>
<blockquote>
<ol>
<li><p>第一棵树的根</p>
</li>
<li><p>先序遍历第一棵树中根节点的子树森林</p>
</li>
<li><p>先序遍历除第一棵树剩余的树构成的森林</p>
</li>
</ol>
</blockquote>
<ul>
<li>中序遍历森林</li>
</ul>
<blockquote>
<ol>
<li><p>中序遍历第一棵树中根节点的子树森林</p>
</li>
<li><p>第一棵树的根</p>
</li>
<li><p>中序遍历除第一棵树剩余的树构成的森林</p>
</li>
</ol>
</blockquote>
<h3 id="7-图"><a href="#7-图" class="headerlink" title="7 图"></a>7 图</h3><h5 id="7-1-图的存储结构"><a href="#7-1-图的存储结构" class="headerlink" title="7.1 图的存储结构"></a>7.1 图的存储结构</h5><ul>
<li>数组表示法</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> &#123;DG, DN, UDG, UDN&#125; GraphKind;    <span class="comment">// &#123;有向图, 有向网, 无向图, 无向网&#125;</span></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ArcCell</span> &#123;</span></div><div class="line">	VRType adj;    <span class="comment">// 顶点相关类型. 无权图 : 1/0 表示相邻与否 带权图 : 权值信息</span></div><div class="line">	InfoType * info;    <span class="comment">// 该弧相关的指针</span></div><div class="line">&#125; ArcCell, AdjMatrix[MAX_VERTEX_NUM][MAX_VERTEX_NUM];</div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line">	VertexType vexs[MAX_VERTEX_NUM];    <span class="comment">// 顶点向量</span></div><div class="line">	AdjMatrix arcs;    <span class="comment">// 邻接矩阵</span></div><div class="line">	<span class="keyword">int</span> vexnum;    <span class="comment">// 顶点数</span></div><div class="line">	<span class="keyword">int</span> arcnum;    <span class="comment">// 弧数</span></div><div class="line">	GraphKind kind;    <span class="comment">// 图的种类标志</span></div><div class="line">&#125; MGraph;</div></pre></td></tr></table></figure>
<ul>
<li>邻接表</li>
</ul>
<blockquote>
<p> 表节点</p>
<table>
<thead>
<tr>
<th>adjvex</th>
<th>nextarc</th>
<th>info</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<p>头结点</p>
<table>
<thead>
<tr>
<th>data</th>
<th>firstarc</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
</blockquote>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span> &#123;</span></div><div class="line">	<span class="keyword">int</span> adjvex;    <span class="comment">// 该弧所指向顶点位置</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span> * <span class="title">nextarc</span>;</span>    <span class="comment">// 指向下一条弧的指针</span></div><div class="line">	InfoType * info;    <span class="comment">// 该弧相关信息的指针</span></div><div class="line">&#125; ArcNode;</div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">VNode</span> &#123;</span></div><div class="line">	VertexType data;    <span class="comment">// 顶点信息</span></div><div class="line">	ArcNode * firstarc;    <span class="comment">// 指向第一条依附该顶点的弧的指针</span></div><div class="line">&#125; VNode, AdjList[MAX_VERTEX_NUM];</div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line">	AdjList vertices;</div><div class="line">	<span class="keyword">int</span> vexnum;    <span class="comment">// 顶点数</span></div><div class="line">	<span class="keyword">int</span> arcnum;    <span class="comment">// 弧数</span></div><div class="line">	<span class="keyword">int</span> kind;    <span class="comment">// 种类标记</span></div><div class="line">&#125; ALGraph;</div><div class="line">```	</div><div class="line">	</div><div class="line">- 十字链表</div><div class="line">	</div><div class="line">&gt; 弧节点</div><div class="line">&gt; </div><div class="line">&gt; | tailvex | headvex | hlink | tlink | info |</div><div class="line">&gt; |---------|---------|-------|-------|------|</div><div class="line">&gt; </div><div class="line">&gt; 顶点节点</div><div class="line">&gt; </div><div class="line">&gt; | data | firstin | firstout |</div><div class="line">&gt; |------|---------|----------|</div><div class="line">&gt;</div><div class="line">	</div><div class="line">```C</div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ArcBox</span> &#123;</span></div><div class="line">	<span class="keyword">int</span> tailvex;    <span class="comment">// 该弧的尾顶点位置</span></div><div class="line">	<span class="keyword">int</span> headvex;    <span class="comment">// 该弧的头顶点位置</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">ArcBox</span> * <span class="title">hlink</span>;</span>    <span class="comment">// 弧头相同的弧的链域</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">ArcBox</span> * <span class="title">tlink</span>;</span>    <span class="comment">// 弧尾相同的弧的链域</span></div><div class="line">	InfoType * info;    <span class="comment">// 该弧相关信息指针</span></div><div class="line">&#125; ArcBox;</div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">VexNode</span> &#123;</span></div><div class="line">	VertexType data;</div><div class="line">	ArcBox * firstin;    <span class="comment">// 指向该节点第一条入弧</span></div><div class="line">	ArcBox * firstout;    <span class="comment">// 指向该节点第一条出弧</span></div><div class="line">&#125; VexNode;</div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line">	VexNode xlist[MAX_VERTEX_NUM];    <span class="comment">// 表头向量</span></div><div class="line">	<span class="keyword">int</span> vexnum;    <span class="comment">// 有向图的当前顶点数</span></div><div class="line">	<span class="keyword">int</span> arcnum;    <span class="comment">// 有向图的当前弧数</span></div><div class="line">&#125; OLGraph;</div></pre></td></tr></table></figure>
<ul>
<li>邻接多重表</li>
</ul>
<blockquote>
<p>每一条边用一个节点表示</p>
<table>
<thead>
<tr>
<th>mark</th>
<th>ivex</th>
<th>ilink</th>
<th>jvex</th>
<th>jlink</th>
<th>info</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<p>每个顶点用一个节点表示</p>
<table>
<thead>
<tr>
<th>data</th>
<th>firstedge</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
</blockquote>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> &#123;unvisited, visited&#125; VisitIf;</div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">EBox</span> &#123;</span></div><div class="line">	VisitIf mark;    <span class="comment">// 访问标记</span></div><div class="line">	<span class="keyword">int</span> ivex;    <span class="comment">// 依附顶点位置</span></div><div class="line">	<span class="keyword">int</span> jvex;    <span class="comment">// 依附顶点位置</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">EBox</span> * <span class="title">ilink</span>;</span>    <span class="comment">// 依附顶点的下一边</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">EBox</span> * <span class="title">jlink</span>;</span>    <span class="comment">// 依附顶点的下一边</span></div><div class="line">	InfoType * info;    <span class="comment">// 该边的信息指针</span></div><div class="line">&#125; EBox;</div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">VexBox</span> &#123;</span></div><div class="line">	VertexType data;</div><div class="line">	EBox * firstedge;    <span class="comment">// 指向第一条依附该顶点的边</span></div><div class="line">&#125; VexBox;</div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line">	VexBox adjmulist[MAX_VERTEX_NUM];</div><div class="line">	<span class="keyword">int</span> vexnum;    <span class="comment">// 无向图的顶点数</span></div><div class="line">	<span class="keyword">int</span> edgenum;    <span class="comment">// 无向图的边数</span></div><div class="line">&#125; AMLGraph</div></pre></td></tr></table></figure>
<h5 id="7-2-图的遍历"><a href="#7-2-图的遍历" class="headerlink" title="7.2 图的遍历"></a>7.2 图的遍历</h5><ul>
<li>深度优先搜索</li>
</ul>
<blockquote>
<p>以迷宫为例子(面试中被问到, 印象比较深刻). 深度优先就是一条路走到黑, 所以返回的第一条路径不保证是最优解. </p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">Boolean visited[MAX];    // 访问标志数组</div><div class="line">Status (* VisiteFunc) (int v);    // 函数变量</div><div class="line">	</div><div class="line">void DFSTraverse(Graph G, Status (* Visit)(int v)) &#123;    // 深度优先遍历</div><div class="line">	VisitFunc = Visit;    // 使用全局变量 VisitFunc, 使 DFS 不必设置函数指针参数</div><div class="line">	for (v = 0; v &lt; G.vexnum; ++v) &#123;</div><div class="line">		visited[v] = FALSE;    // 访问数组标志初始化</div><div class="line">	&#125;</div><div class="line">	for (v = 0; v &lt; G.vexnum; ++v) &#123;</div><div class="line">		if (!visited[v]) &#123;</div><div class="line">			DFS(G, v);    // 对未访问的顶点调用 DFS</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">	</div><div class="line">void DFS(Graph G, int v) &#123;    // 从第 v 个顶点出发递归的深度优先遍历图 G.</div><div class="line">	visited[v] = TRUE;</div><div class="line">	VisitFunc(v);    // 访问第 v 个顶点</div><div class="line">	for (w = FirstAdjVex(G, v); w &gt;= 0; w = NextAdjVex(G, v, w)) &#123;</div><div class="line">		if (!visited[w]) &#123;</div><div class="line">			DFS(G, w);    // 对 v 的尚未访问的邻接顶点 w 递归调用 DFS.</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>广度优先搜索</li>
</ul>
<blockquote>
<p>有点层序遍历的意思, 在遍历完所有情况下(可以进行算法优化, 对有些情况进行舍弃)可以得出最优解. </p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">void BFSTraverse(Graph G, Status (* Visit) (int v)) &#123;</div><div class="line">	for (v= 0; v &lt; G.vexnum; ++v) &#123;</div><div class="line">		visited[v] = FALSE;</div><div class="line">	&#125;</div><div class="line">	InitQueue(Q);</div><div class="line">	for (v = 0; v &lt; G.vexnum; ++v) &#123;</div><div class="line">		if (!visited[v]) &#123;</div><div class="line">			visited[v] = TRUE;</div><div class="line">			Visit(v);</div><div class="line">			EnQueue(Q, v);</div><div class="line">			while (!QueueEmpty(Q)) &#123;</div><div class="line">				DeQueue(Q, u);</div><div class="line">				for (w = FirstAdjVex(G, u); w &gt;= 0; w = NextAdjVex(G, u, w)) &#123;</div><div class="line">					// w 为 u 尚未访问的邻接顶点</div><div class="line">					if (!visited[w]) &#123;</div><div class="line">						visited[w] = TRUE;</div><div class="line">						Visit(w);</div><div class="line">						EnQueue(Q, w);</div><div class="line">					&#125; // if</div><div class="line">				&#125; // for</div><div class="line">			&#125; // while</div><div class="line">		&#125; // if</div><div class="line">	&#125; // for</div><div class="line">&#125; // BFSTraverse</div></pre></td></tr></table></figure>
<p>// 以下待填</p>
<h5 id="7-3-图的连通性问题"><a href="#7-3-图的连通性问题" class="headerlink" title="7.3 图的连通性问题"></a>7.3 图的连通性问题</h5><ul>
<li>无向图的连通分量和生成树</li>
<li>有向图的强连通分量</li>
</ul>
<h5 id="7-4-最小生成树"><a href="#7-4-最小生成树" class="headerlink" title="7.4 最小生成树"></a>7.4 最小生成树</h5><ul>
<li><p><a href="https://en.wikipedia.org/wiki/Prim%27s_algorithm" target="_blank" rel="external">Prim 算法 O(n2)</a></p>
<p><img src="/2017/08/02/reDS/PrimAlgDemo.gif" alt="没图戳 wikipedia 或 fitzeng.org"></p>
<blockquote>
<p>以点为主: 主要是分为两个集合, 一个是已加入的节点, 另一个是未加入节点. 在未加入的节点集合中找到一个离已加入集合最近的节点加入. 直至所有节点被加入. </p>
</blockquote>
</li>
<li><p><a href="https://en.wikipedia.org/wiki/Kruskal%27s_algorithm" target="_blank" rel="external">Kruskal 算法 O(eloge)</a></p>
<p><img src="/2017/08/02/reDS/MST_kruskal_en.gif" alt="没图戳 wikipedia 或 fitzeng.org"></p>
<blockquote>
<p>以边为主: 初始条件是把图的所有边去除变成 V 个连通图. 然后每次找一条代价最小的边加入, 确保每加入一条边连通图个数都减少一个(也就是确保无环路)。直至成一个连通图时就是最小生成树.  </p>
</blockquote>
</li>
</ul>
<h5 id="7-5-最短路径"><a href="#7-5-最短路径" class="headerlink" title="7.5 最短路径"></a>7.5 最短路径</h5><ul>
<li><p><a href="https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm" target="_blank" rel="external">Dijkstra 算法 O(n3)</a></p>
<p><img src="/2017/08/02/reDS/Dijkstra_Animation.gif" alt="没图戳 wikipedia 或 fitzeng.org"></p>
<blockquote>
<p>主要是维护一个表和一个已加入路径集合, 表记录从原点到每一个点的当前最小权值. 如果已加入路径集合中的点通过某条路径对未加入集合中的点的最小权值有影响则更新该节点权值. 最后在每次更新完成后判断目前未加入集合中的最小权值节点加入集合, 再对该节点的边所达的节点做如上判断. 最终可以求出起点到每一个点的所有最短路径. </p>
</blockquote>
</li>
<li><p><a href="https://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm" target="_blank" rel="external">Floyd 算法 O(n3)</a></p>
<blockquote>
<p>主要是判断经过该点到达的临时目点的权值和该点目前权值(可以不考虑是否已经经过, 但是循环只会扫一遍所以没有什么影响)的大小来判断是否更新权值.</p>
</blockquote>
</li>
<li><p>关键路径和拓扑排序 (KeyWord : 松弛)</p>
</li>
</ul>
<h3 id="8-动态存储管理"><a href="#8-动态存储管理" class="headerlink" title="8 动态存储管理"></a>8 动态存储管理</h3><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在大三到大四过渡期中, 从四月到七月, 经历过几场面试, 找实习. (如果八月份拿到[真.offer]的话我也想把这段经历记录下来) 结果很悲剧, 觉得方向不是什么障碍, 基础比较重, 所以要重拾数据结构不涉及算法具体实现, 因为是重拾, 所以先前有一定基础, 只要有一点提示便能唤醒无限回忆. 这里主要是记录各种数据结构的结构体, 这是经过重重思维过程得出的精华, 十分有价值. 至于具体实现和讲解日后回会以链接形式提供, 这里只提供一个思维树, 建立一个数据机构的思维体系, 后续更新欢迎关注 &lt;a href=&quot;https://github.com/mk43/Algo-Math&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Algo" scheme="http://fitzeng.org/tags/Algo/"/>
    
      <category term="Math" scheme="http://fitzeng.org/tags/Math/"/>
    
      <category term="C/C++" scheme="http://fitzeng.org/tags/C-C/"/>
    
      <category term="DataStruct" scheme="http://fitzeng.org/tags/DataStruct/"/>
    
  </entry>
  
  <entry>
    <title>Android 单元测试工具 Robolectric 中文文档</title>
    <link href="http://fitzeng.org/2017/07/31/robolectric/"/>
    <id>http://fitzeng.org/2017/07/31/robolectric/</id>
    <published>2017-07-30T16:00:00.000Z</published>
    <updated>2017-07-31T04:40:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2017/07/31/robolectric/robolectric-cn.png" alt=""></p>
<h3 id="为什么要翻译文档"><a href="#为什么要翻译文档" class="headerlink" title="为什么要翻译文档?"></a>为什么要翻译文档?</h3><blockquote>
<p>由于在大三暑假时间算是比较充裕的, 然后加上自己英语比较渣, 又对 gitbook 有兴趣, 所以就想翻译一些文档. 平时也是一直看别人的干货, 所以也想自己做点贡献, 希望能帮助英语是短板的部分人. </p>
</blockquote>
<a id="more"></a>
<h3 id="为什么是-Robolectric"><a href="#为什么是-Robolectric" class="headerlink" title="为什么是 Robolectric?"></a>为什么是 Robolectric?</h3><blockquote>
<p>其实原因很简单, 就是我之前写过一篇 <a href="http://fitzeng.org/2017/05/14/Android%20%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%92%8C%20Robolectric%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/">Android 单元测试和 Robolectric 源码解析</a> 的文章, 直接看的二手资料, 感觉这种学习方式太被动了, 要自己尝试去啃第一手资料. 而正好网上没有对应的中文文档加上内容少, 一个人可以完成, 再加上前面的第一点就直接开始行动了.</p>
</blockquote>
<h3 id="阅读建议"><a href="#阅读建议" class="headerlink" title="阅读建议"></a>阅读建议</h3><blockquote>
<p>我自知自己水平很渣, 所以一些实在想不通的直接给出了原文对应的英文文档供大家参考, 如果你已经是有了 4/6 级的水平, 推荐你直接看英文文档, 这份可以作参考. 当然如果可以的话, 欢迎大家留言提出修改意见. 对于翻译难理解, 有歧义, 有错误的地方欢迎大家指出来. 我在此先表示感谢. </p>
</blockquote>
<h3 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h3><blockquote>
<ul>
<li><p><a href="http://robolectric.org/" target="_blank" rel="external">Robolectric</a></p>
</li>
<li><p><a href="https://robolectric-cn.com/" target="_blank" rel="external">Robolectric-cn</a></p>
</li>
<li><p><a href="https://github.com/mk43/robolectric-cn" target="_blank" rel="external">GitHub</a></p>
</li>
<li><p><a href="https://www.gitbook.com/@mk43" target="_blank" rel="external">GitBook</a></p>
</li>
</ul>
</blockquote>
<h3 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h3><blockquote>
<p>目前是一个 Android 开发者, 即将毕业面临就业, 希望在毕业前做一些自己喜欢的事情. 同时也希望能贡献自己的一份力, 和大家探讨学习.</p>
<ul>
<li><p><a href="http://fitzeng.org/">Blog</a></p>
</li>
<li><p><a href="https://github.com/mk43" target="_blank" rel="external">GitHub</a></p>
</li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2017/07/31/robolectric/robolectric-cn.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;为什么要翻译文档&quot;&gt;&lt;a href=&quot;#为什么要翻译文档&quot; class=&quot;headerlink&quot; title=&quot;为什么要翻译文档?&quot;&gt;&lt;/a&gt;为什么要翻译文档?&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;由于在大三暑假时间算是比较充裕的, 然后加上自己英语比较渣, 又对 gitbook 有兴趣, 所以就想翻译一些文档. 平时也是一直看别人的干货, 所以也想自己做点贡献, 希望能帮助英语是短板的部分人. &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://fitzeng.org/tags/Android/"/>
    
      <category term="Android Unit Test" scheme="http://fitzeng.org/tags/Android-Unit-Test/"/>
    
  </entry>
  
  <entry>
    <title>JavaTips</title>
    <link href="http://fitzeng.org/2017/07/25/JavaTips/"/>
    <id>http://fitzeng.org/2017/07/25/JavaTips/</id>
    <published>2017-07-25T03:27:00.000Z</published>
    <updated>2017-09-19T11:31:43.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>这篇文章主要是个人在二次学习 Java 过程中, 对 Java 的一些常见特性误解的分析. </p>
<p>主要是以测试代码加测试结果的形式来记录. 这里只做收集整理和简单分析, 详情请见参考链接, 支持原作者.</p>
</blockquote>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li>基本类型<ul>
<li>== 和 equals</li>
<li>String, StringBuffer 和 StringBuilder</li>
<li>Array</li>
<li>ArrayList</li>
<li>LinkedList</li>
<li>Exception</li>
<li>Collction</li>
</ul>
</li>
<li>基本概念<ul>
<li>类变量和局部变量</li>
</ul>
</li>
</ul>
<a id="more"></a>
<h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><h4 id="和-equals"><a href="#和-equals" class="headerlink" title="== 和 equals"></a>== 和 equals</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">TestCode:</div><div class="line">Integer a = <span class="number">100</span>;</div><div class="line">Integer b = <span class="number">100</span>;</div><div class="line">System.out.println(a == b);</div><div class="line"></div><div class="line">Integer c = <span class="number">1000</span>;</div><div class="line">Integer d = <span class="number">1000</span>;</div><div class="line">System.out.println(c == d);</div><div class="line"></div><div class="line">Output:</div><div class="line"><span class="keyword">true</span></div><div class="line"><span class="keyword">false</span></div></pre></td></tr></table></figure>
<blockquote>
<p>其中 == 结果不一致是因为 Integer 类对在 -128 到 127 之间的数值进行了缓存. </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">TestCode:</div><div class="line">Integer e = new Integer(100);</div><div class="line">Integer f = new Integer(100);</div><div class="line">System.out.println(e == f);</div><div class="line"></div><div class="line">Output:</div><div class="line">false</div></pre></td></tr></table></figure>
<blockquote>
<p><code>Integer a = 100;</code>涉及到自动装箱问题, 反编译之后就是 <code>Integer a = Integer.valueOf(100);</code>.<br>而<code>Integer e = new Integer(100);</code> 反编译不改变. 所以在 a 和 e 这两个对象引用的堆区域一个是通过<code>valueOf()</code>获得, 另一个是通过<code>new</code>获得. 毫无疑问 <code>new</code> 出来的肯定不会是同一块区域. 而 <code>valueOf()</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">&gt; 	<span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</div><div class="line">&gt; 		<span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</div><div class="line">&gt; 	<span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
<p>这里就解释了前面的<code>Integer 类对在 -128 到 127 之间的数值进行了缓存</code>. 详情见源码.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">TestCode:</div><div class="line">String s1 = <span class="string">"1234"</span>;</div><div class="line">String s2 = <span class="string">"1234"</span>;</div><div class="line">System.out.println(s1 == s2);</div><div class="line"></div><div class="line">String s3 = <span class="keyword">new</span> String(<span class="string">"1234"</span>);</div><div class="line">String s4 = <span class="keyword">new</span> String(<span class="string">"1234"</span>);</div><div class="line">System.out.println(s3 == s4);</div><div class="line"></div><div class="line">Output:</div><div class="line"><span class="keyword">true</span></div><div class="line"><span class="keyword">false</span></div></pre></td></tr></table></figure>
<p>这个比较简单, 就是在 JVM 中存在常量池. 还有要注意的是两种初始化方式的不同才造成了这个差异. </p>
<p>下面分析 equals ,详情见参考.这里只提几点易混淆的地方.</p>
<blockquote>
<p>equals 是属于类方法, 而且是 Object 类的. 而 Object 类的实现就是判断引用是否相等.</p>
<p>而对于某个类来说判断相等一般是判断里面的某些成员变量是否相等. 所以就要重写父类方法.这里要区分重写和重载.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; 重写:</div><div class="line">&gt; <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;&#125;</div><div class="line">&gt; 重载:</div><div class="line">&gt; <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(MyObject myObj)</span> </span>&#123;&#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
<p>所以要想实现自己想要的 equals 方法应该是重写.</p>
<p>其实这里面的主要内容就是了解了自动拆装箱和 JVM 内分配就不难了.</p>
<ul>
<li>第一类：整型 byte Byte | short Short | int Integer | long Long</li>
<li>第二类：浮点型 float Float | double Double</li>
<li>第三类：逻辑型 boolean Boolean</li>
<li>第四类：字符型 char Character</li>
</ul>
<p>在支持 equals 特性的时候, 往往还要支持 hashCode </p>
</blockquote>
<p>参考: </p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/27562748" target="_blank" rel="external">让人疑惑的Java代码</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/27570687" target="_blank" rel="external">Java字符串那些事儿</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/27573287" target="_blank" rel="external">说说Java里的equals（上）</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/27657548" target="_blank" rel="external">Java自动装箱/拆箱</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/27741179" target="_blank" rel="external">说说Java里的equals（中）</a></li>
</ul>
<h4 id="String-StringBuffer-和-StringBuilder"><a href="#String-StringBuffer-和-StringBuilder" class="headerlink" title="String, StringBuffer 和 StringBuilder"></a>String, StringBuffer 和 StringBuilder</h4><ul>
<li>String</li>
</ul>
<blockquote>
<p>final 类.</p>
<p>String s=”sss”;    会在静态常量池中查找</p>
<p>String s = new String(“sss”);    直接在堆中开辟内存</p>
<p>使用场合: 在字符串不经常变化的场景中可以使用 String 类, 如: 常量的声明, 少量的变量运算等</p>
</blockquote>
<ul>
<li>StringBuffer</li>
</ul>
<blockquote>
<p>线程安全, 可自身修改</p>
<p>必须通过构造函数初始化</p>
<p>使用场合: 在频繁进行字符串的运算(拼接, 替换, 删除等), 并且运行在多线程的环境中, 则可以考虑使用 StringBuffer, 例如 XML 解析, HTTP 参数解析和封装等</p>
</blockquote>
<ul>
<li>StringBuilder</li>
</ul>
<blockquote>
<p>线程不安全, 操作最快</p>
<p>使用场合: 和 StringBuffer 类似的不要求线程安全场景, 效率比 StringBuffer 高</p>
</blockquote>
<h4 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h4><blockquote>
<p>是一个在 JVM 中的特殊对象, 可以使用反射查看</p>
<p>拷贝时注意深拷贝还是浅拷贝</p>
</blockquote>
<h4 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h4><blockquote>
<p>首先要知道的是这是一个 Array 所以在进行修改操作时十分不方便的. 特别是增加或者删除元素, 扩大存储等方式相比链表结构来说麻烦太多.知道这个为出发点, 对于源码实现的理解就理所当然了.<br>应该了解的几个点</p>
<ul>
<li>在 ArrayList 中从有元素开始就会分配 10 的对象大小容量. 接下来以 <code>currentSize * 1.5</code> 的大小扩容.</li>
<li>对于修改空间是以 System.arraycopy() 形式修改的. 为了提高效率采用的是 native 方法.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">arraycopy</span><span class="params">(Object src, </span></span></div><div class="line">&gt; 		<span class="keyword">int</span>  srcPos, Object dest, <span class="keyword">int</span> destPos, <span class="keyword">int</span> length);</div><div class="line">&gt;</div></pre></td></tr></table></figure>
<p>详情源码分析见参考.</p>
</blockquote>
<p>参考: </p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/27873515" target="_blank" rel="external">ArrayList初探</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/27878015" target="_blank" rel="external">再探ArrayList（ArrayList的扩容）</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/27938717" target="_blank" rel="external">三顾ArrayList</a></li>
</ul>
<h4 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h4><blockquote>
<p>实现方式是双向链表</p>
</blockquote>
<h4 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h4><p><img src="http://img.my.csdn.net/uploads/201212/02/1354439580_6933.PNG" alt=""></p>
<ul>
<li>尽可能的减小try块</li>
<li>保证所有资源都被正确释放, 充分运用finally关键词</li>
<li>catch语句应当尽量指定具体的异常类型, 而不应该指定涵盖范围太广的 Exception 类. 不要一个Exception试图处理所有可能出现的异常</li>
<li>既然捕获了异常, 就要对它进行适当的处理</li>
<li>在异常处理模块中提供适量的错误原因信息, 组织错误信息使其易于理解和阅读</li>
<li>不要在 finally 块中处理返回值</li>
<li>不要在构造函数中抛出异常</li>
</ul>
<p>参考: </p>
<ul>
<li><a href="http://www.cnblogs.com/chenssy/category/525010.html" target="_blank" rel="external">树上月</a></li>
</ul>
<h4 id="Collction"><a href="#Collction" class="headerlink" title="Collction"></a>Collction</h4><p><img src="/2017/07/25/JavaTips/collection.jpg" alt=""></p>
<h5 id="List-列表-可重复"><a href="#List-列表-可重复" class="headerlink" title="List 列表(可重复)"></a>List 列表(可重复)</h5><ul>
<li>ArrayList (数组)</li>
<li>LinkedList (链表)</li>
</ul>
<h5 id="Map-映射-key-value"><a href="#Map-映射-key-value" class="headerlink" title="Map 映射(key-value)"></a>Map 映射(key-value)</h5><ul>
<li>HashMap</li>
</ul>
<blockquote>
<p>extends AbstractMap<k,v> implements Map<k,v></k,v></k,v></p>
<p>table 数组 + Enter 节点</p>
<p>默认初始容量(16) 默认加载因子(0.75)</p>
<p>查找采用 static int indexFor(int h, int length) { return h &amp; (length-1); } 提高效率, 而不是取模.</p>
</blockquote>
<ul>
<li>TreeMap</li>
</ul>
<blockquote>
<p>extends AbstractMap<k,v> implements NavigableMap<k,v> </k,v></k,v></p>
<p>interface NavigableMap<k,v> extends SortedMap<k,v></k,v></k,v></p>
<p>interface SortedMap<k,v> extends Map<k,v></k,v></k,v></p>
<p>红黑树 + Enter 节点</p>
</blockquote>
<h5 id="Set-集合-不能重复"><a href="#Set-集合-不能重复" class="headerlink" title="Set 集合(不能重复)"></a>Set 集合(不能重复)</h5><ul>
<li>HashSet</li>
</ul>
<blockquote>
<p>extends AbstractSet<e> implements Set<e></e></e></p>
<p>内部基于 HashMap 实现 </p>
</blockquote>
<ul>
<li>TreeSet</li>
</ul>
<blockquote>
<p>extends AbstractSet<e> implements NavigableSet<e> </e></e></p>
<p>interface NavigableSet<e> extends SortedSet<e></e></e></p>
<p>interface SortedSet<e> extends Set<e></e></e></p>
<p>基于 TreeMap 实现</p>
</blockquote>
<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="类变量和局部变量"><a href="#类变量和局部变量" class="headerlink" title="类变量和局部变量"></a>类变量和局部变量</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> a;</div><div class="line">	System.out.println(a);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>类变量：准备阶段、初始化阶段都可赋值。<br>局部变量：准备阶段不能检测，初始化阶段未初始化不能使用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这篇文章主要是个人在二次学习 Java 过程中, 对 Java 的一些常见特性误解的分析. &lt;/p&gt;
&lt;p&gt;主要是以测试代码加测试结果的形式来记录. 这里只做收集整理和简单分析, 详情请见参考链接, 支持原作者.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;基本类型&lt;ul&gt;
&lt;li&gt;== 和 equals&lt;/li&gt;
&lt;li&gt;String, StringBuffer 和 StringBuilder&lt;/li&gt;
&lt;li&gt;Array&lt;/li&gt;
&lt;li&gt;ArrayList&lt;/li&gt;
&lt;li&gt;LinkedList&lt;/li&gt;
&lt;li&gt;Exception&lt;/li&gt;
&lt;li&gt;Collction&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;基本概念&lt;ul&gt;
&lt;li&gt;类变量和局部变量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://fitzeng.org/tags/Java/"/>
    
      <category term="Tips" scheme="http://fitzeng.org/tags/Tips/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 算法集锦</title>
    <link href="http://fitzeng.org/2017/07/17/AlgoAndMath/"/>
    <id>http://fitzeng.org/2017/07/17/AlgoAndMath/</id>
    <published>2017-07-17T03:27:00.000Z</published>
    <updated>2017-07-20T08:54:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="leetcode-算法集锦"><a href="#leetcode-算法集锦" class="headerlink" title="leetcode 算法集锦"></a><a href="https://www.nowcoder.com/ta/leetcode" target="_blank" rel="external">leetcode 算法集锦</a></h2><blockquote>
<p>主要是牛客网上 leetcode 的算法题实践. 在 Blog 包含自己的解法和对别人优秀解法的分析.</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">考点</th>
<th style="text-align:center">题目</th>
<th style="text-align:center">C/C++</th>
<th style="text-align:center">Java     </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">  01</td>
<td style="text-align:center">树</td>
<td style="text-align:center">Minimum Depth of Binary Tree</td>
<td style="text-align:center">NULL</td>
<td style="text-align:center"><a href="#jump_01">题解</a>  </td>
</tr>
<tr>
<td style="text-align:center">  02</td>
<td style="text-align:center">栈</td>
<td style="text-align:center">evaluate-reverse-polish-notation</td>
<td style="text-align:center">NULL</td>
<td style="text-align:center"><a href="#jump_02">题解</a> </td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h3 id="02-evaluate-reverse-polish-notation"><a href="#02-evaluate-reverse-polish-notation" class="headerlink" title="02 : evaluate-reverse-polish-notation"></a><span id="jump_02"><a href="https://www.nowcoder.com/practice/22f9d7dd89374b6c8289e44237c70447?tpId=46&amp;tqId=29031&amp;rp=1&amp;ru=/ta/leetcode&amp;qru=/ta/leetcode/question-ranking" target="_blank" rel="external">02 : evaluate-reverse-polish-notation</a></span></h3><blockquote>
<p>Evaluate the value of an arithmetic expression in Reverse Polish Notation.Valid operators are+,-,*,/. Each operand may be an integer or another expression.</p>
<p>Some examples:</p>
<p>[“2”, “1”, “+”, “3”, “<em>“] -&gt; ((2 + 1) </em> 3) -&gt; 9</p>
<p>[“4”, “13”, “5”, “/“, “+”] -&gt; (4 + (13 / 5)) -&gt; 6</p>
</blockquote>
<ul>
<li>我的解法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Stack;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">evalRPN</span><span class="params">(String[] tokens)</span> </span>&#123;</div><div class="line">        Stack&lt;String&gt; s = <span class="keyword">new</span> Stack&lt;&gt;();</div><div class="line">        <span class="keyword">int</span> op1 = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> op2 = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tokens.length; i++) &#123;</div><div class="line">            <span class="keyword">switch</span> (tokens[i]) &#123;</div><div class="line">                <span class="keyword">case</span> <span class="string">"+"</span>: &#123;</div><div class="line">                    op1 = Integer.parseInt(s.pop());</div><div class="line">                    op2 = Integer.parseInt(s.pop());</div><div class="line">                    s.push(String.valueOf(op2 + op1));</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">case</span> <span class="string">"-"</span>: &#123;</div><div class="line">                    op1 = Integer.parseInt(s.pop());</div><div class="line">                    op2 = Integer.parseInt(s.pop());</div><div class="line">                    s.push(String.valueOf(op2 - op1));</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">case</span> <span class="string">"*"</span>: &#123;</div><div class="line">                    op1 = Integer.parseInt(s.pop());</div><div class="line">                    op2 = Integer.parseInt(s.pop());</div><div class="line">                    s.push(String.valueOf(op2 * op1));</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">case</span> <span class="string">"/"</span>: &#123;</div><div class="line">                    op1 = Integer.parseInt(s.pop());</div><div class="line">                    op2 = Integer.parseInt(s.pop());</div><div class="line">                    s.push(String.valueOf(op2 / op1));</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">default</span>: &#123;</div><div class="line">                    s.push(tokens[i]);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> Integer.parseInt(s.pop());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>其他解法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Stack;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">evalRPN</span><span class="params">(String[] tokens)</span> </span>&#123;</div><div class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;Integer&gt;();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;tokens.length;i++)&#123;</div><div class="line">            <span class="keyword">try</span>&#123;</div><div class="line">                <span class="keyword">int</span> num = Integer.parseInt(tokens[i]);</div><div class="line">                stack.add(num);</div><div class="line">            &#125;<span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                <span class="keyword">int</span> b = stack.pop();</div><div class="line">                <span class="keyword">int</span> a = stack.pop();</div><div class="line">                stack.add(get(a, b, tokens[i]));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> stack.pop();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,String operator)</span></span>&#123;</div><div class="line">        <span class="keyword">switch</span> (operator) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="string">"+"</span>:</div><div class="line">            <span class="keyword">return</span> a+b;</div><div class="line">        <span class="keyword">case</span> <span class="string">"-"</span>:</div><div class="line">            <span class="keyword">return</span> a-b;</div><div class="line">        <span class="keyword">case</span> <span class="string">"*"</span>:</div><div class="line">            <span class="keyword">return</span> a*b;</div><div class="line">        <span class="keyword">case</span> <span class="string">"/"</span>:</div><div class="line">            <span class="keyword">return</span> a/b;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="01-Minimum-Depth-of-Binary-Tree"><a href="#01-Minimum-Depth-of-Binary-Tree" class="headerlink" title="01 : Minimum Depth of Binary Tree"></a><span id="jump_01"><a href="https://www.nowcoder.com/practice/e08819cfdeb34985a8de9c4e6562e724?tpId=46&amp;tqId=29030&amp;tPage=1&amp;rp=1&amp;ru=/ta/leetcode&amp;qru=/ta/leetcode/question-ranking" target="_blank" rel="external">01 : Minimum Depth of Binary Tree</a></span></h3><blockquote>
<p>Given a binary tree, find its minimum depth.The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.</p>
</blockquote>
<ul>
<li>我的解法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">深度优先遍历所有节点, 直至叶子节点后返回长度. </div><div class="line">每次取当前节点左右子节点的 [最小值+<span class="number">1</span>] 为该节点的最小深度. </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">run</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> length1 = run(root.left);</div><div class="line">        <span class="keyword">int</span> length2 = run(root.right);</div><div class="line">        <span class="keyword">if</span> (length1 == <span class="number">0</span> || length2 == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> length1 + length2 + <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> Math.min(length1, length2) + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>其他思路</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">typedef</span> TreeNode* tree;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">run</span><span class="params">(TreeNode *root)</span> </span>&#123;</div><div class="line">        <span class="comment">//采用广度优先搜索，或者层序遍历，找到的第一个叶节点的深度即是最浅。</span></div><div class="line">      <span class="keyword">if</span>(! root) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">      <span class="built_in">queue</span>&lt;tree&gt; qu;</div><div class="line">      tree last,now;</div><div class="line">      <span class="keyword">int</span> level,size;</div><div class="line">      last = now = root;</div><div class="line">      level = <span class="number">1</span>;qu.push(root);</div><div class="line">      <span class="keyword">while</span>(qu.size())&#123;</div><div class="line">        now = qu.front();</div><div class="line">        qu.pop();</div><div class="line">        size = qu.size();</div><div class="line">        <span class="keyword">if</span>(now-&gt;left)qu.push(now-&gt;left);</div><div class="line">        <span class="keyword">if</span>(now-&gt;right)qu.push(now-&gt;right);</div><div class="line">        <span class="keyword">if</span>(qu.size()-size == <span class="number">0</span>)<span class="keyword">break</span>;</div><div class="line">        <span class="keyword">if</span>(last == now)&#123;</div><div class="line">          level++;</div><div class="line">          <span class="keyword">if</span>(qu.size())last = qu.back();</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> level;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;leetcode-算法集锦&quot;&gt;&lt;a href=&quot;#leetcode-算法集锦&quot; class=&quot;headerlink&quot; title=&quot;leetcode 算法集锦&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.nowcoder.com/ta/leetcode&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;leetcode 算法集锦&lt;/a&gt;&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;主要是牛客网上 leetcode 的算法题实践. 在 Blog 包含自己的解法和对别人优秀解法的分析.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;序号&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;考点&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;题目&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;C/C++&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Java     &lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;  01&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;树&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Minimum Depth of Binary Tree&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;NULL&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;#jump_01&quot;&gt;题解&lt;/a&gt;  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;  02&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;栈&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;evaluate-reverse-polish-notation&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;NULL&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;#jump_02&quot;&gt;题解&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
    
      <category term="Algo" scheme="http://fitzeng.org/tags/Algo/"/>
    
      <category term="Math" scheme="http://fitzeng.org/tags/Math/"/>
    
      <category term="Java" scheme="http://fitzeng.org/tags/Java/"/>
    
      <category term="C/C++" scheme="http://fitzeng.org/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>Android Blog Collection</title>
    <link href="http://fitzeng.org/2017/07/08/AndroidBlogCollection/"/>
    <id>http://fitzeng.org/2017/07/08/AndroidBlogCollection/</id>
    <published>2017-07-08T03:27:00.000Z</published>
    <updated>2017-09-10T06:55:57.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>this repo aims to collect some high quality basic knowledge Android Blog.  Just like source code analysis or something.</p>
<p>这个仓库致力于收集我在学习 Android 开发过程所遇到的高质量的基础知识文章. 类似于源码分析之类的, 可以帮大家加深对基础原理的理解.</p>
</blockquote>
<h2 id="0-Start"><a href="#0-Start" class="headerlink" title="0. Start"></a>0. Start</h2><h3 id="gt-前言"><a href="#gt-前言" class="headerlink" title="&gt; 前言"></a>&gt; 前言</h3><blockquote>
<p>现在网络上有太多的知识可供学习, 但是作为一个自学者, 是好事也是坏事, 好事指不用担心没资源, 坏事是指对学习效率,理解程度和知识体系搭建都不太好.网上的文章不全是高质量的, 而且很多都是重复的碎片化知识,大家写的都差不多.所以为了自己的系统学习, 建议买书, 碰到哪个模块不懂再找大牛的 Blog 加深理解. </p>
<p>所以可以看到我推荐的基本都是成一个小体系的系列文章, 可以帮助我们形成一个好的”学习思维树”. 而不是一大堆”散叶”. 而其他文章主要是作为自己加深理解, 对某个知识点深入学习的参考.</p>
<p>首先可以肯定像我这种刚刚入门的在写文章的高度和视野都不如大牛. 而对于基础的知识,特别是涉及源码解析, 只要以一份资料为主就可以了. 最多加一两份做参考. 所以, 基本这种类型的文章, 我会收藏整理在这篇文章里并且永久更新. 同时自己也会利用课余时间把自己的实践项目以一个入门的学习者的视角解析, 相信这样对初学的开发者是比较友好的.如果你和我也一样处在这个阶段, 欢迎关注这篇文章.</p>
<p>这里永久更新这类基础知识解读. <a href="https://github.com/mk43" target="_blank" rel="external">GitHub</a> 和 <a href="http://fitzeng.org">Blog</a> 永久更新练习项目. 如果对你有帮助欢迎 Star ^_^;</p>
</blockquote>
<h3 id="gt-更新"><a href="#gt-更新" class="headerlink" title="&gt; 更新"></a>&gt; 更新</h3><ul>
<li>v3 : <a href="https://github.com/mk43" target="_blank" rel="external">敬请期待…</a></li>
<li>v2 : 添加 <code>JVM</code> <code>设计模式</code> <code>常用框架</code> <code>计算机基础</code> 四大模块优质 Blog 收集</li>
<li>v1 : 以 Android View 基础知识为主的 Blog 收集.</li>
</ul>
<a id="more"></a>
<h2 id="1-UI"><a href="#1-UI" class="headerlink" title="1. UI"></a>1. UI</h2><h3 id="gt-View-的绘制源码解析"><a href="#gt-View-的绘制源码解析" class="headerlink" title="&gt; View 的绘制源码解析"></a>&gt; View 的绘制源码解析</h3><blockquote>
<p>这里推荐的是<a href="http://www.jianshu.com/nb/9976005" target="_blank" rel="external">Carson_Ho</a>的一系列源码分析教程, 主要是从 View 和 ViewGroup 的测量, 布局和绘制过程进行详细分析, 很多图示十分清晰易懂, 对于初学者和进阶者都是很不错的学习资料. 如果有找到其他的好的教程我还会继续加上.</p>
</blockquote>
<ul>
<li><a href="http://www.jianshu.com/p/146e5cec4863" target="_blank" rel="external">自定义View基础 - 最易懂的自定义View原理系列(1)</a></li>
<li><a href="http://www.jianshu.com/p/1dab927b2f36" target="_blank" rel="external">自定义View Measure过程 - 最易懂的自定义View原理系列(2)</a></li>
<li><a href="http://www.jianshu.com/p/158736a2549d" target="_blank" rel="external">自定义View Layout过程 - 最易懂的自定义View原理系列(3)</a></li>
<li><a href="http://www.jianshu.com/p/95afeb7c8335" target="_blank" rel="external">自定义View Draw过程- 最易懂的自定义View原理系列(4)</a></li>
</ul>
<blockquote>
<p>前面给了 View 的绘制最主要的三个过程进行了详细分析的 Blog, 在前面的阅读基础上,下面给出<a href="http://blog.csdn.net/guolin_blog" target="_blank" rel="external">郭霖大神</a>的 View 的工作原理系列文章. 相信在读完以下四篇文章之后你会对 View 有一个重新认识的.</p>
</blockquote>
<ul>
<li><a href="http://blog.csdn.net/guolin_blog/article/details/12921889" target="_blank" rel="external">Android LayoutInflater原理分析，带你一步步深入了解View(一)</a></li>
<li><a href="http://blog.csdn.net/guolin_blog/article/details/16330267" target="_blank" rel="external"> Android视图绘制流程完全解析，带你一步步深入了解View(二)</a></li>
<li><a href="http://blog.csdn.net/guolin_blog/article/details/17045157" target="_blank" rel="external">Android视图状态及重绘流程分析，带你一步步深入了解View(三)</a></li>
<li><a href="http://blog.csdn.net/guolin_blog/article/details/17357967" target="_blank" rel="external"> Android自定义View的实现方法，带你一步步深入了解View(四)</a></li>
</ul>
<blockquote>
<p>下面介绍<a href="https://juejin.im/user/552f20a7e4b060d72a89d87f" target="_blank" rel="external">扔物线</a>的<a href="https://juejin.im/post/59591e42f265da6c407350c0" target="_blank" rel="external">HenCoder：给高级 Android 工程师的进阶手册</a>, 包含了视频讲解. 目前持续更新, 在学习完前面的 Blog 并进行了部分实践 Demo 后把这当做复习提高挺不错的, 同时我也会一直关注并更新.</p>
</blockquote>
<ul>
<li><a href="https://juejin.im/post/5962a3746fb9a06ba2687226" target="_blank" rel="external">HenCoder Android 开发进阶: 自定义 View 1-1 绘制基础</a></li>
</ul>
<h3 id="gt-View-相关类解析"><a href="#gt-View-相关类解析" class="headerlink" title="&gt; View 相关类解析"></a>&gt; View 相关类解析</h3><blockquote>
<p>这个主要是介绍一些对自定义 View 过程中需要仔细了解的一些类的使用. </p>
</blockquote>
<ul>
<li><a href="http://www.jianshu.com/p/2c19abde958c" target="_blank" rel="external">Path类的最全面详解 - 自定义View应用系列</a></li>
<li><a href="http://www.jianshu.com/p/762b490403c3" target="_blank" rel="external">Canvas类的最全面详解 - 自定义View应用系列</a></li>
</ul>
<h3 id="gt-XML-使用示例"><a href="#gt-XML-使用示例" class="headerlink" title="&gt; XML 使用示例"></a>&gt; XML 使用示例</h3><blockquote>
<p>这里推荐<a href="http://keeganlee.me/" target="_blank" rel="external">Keegan小钢</a>的Android样式的开发相关教程, 通过十分简洁的小例子帮你快速实现对 XML 的了解和使用.</p>
</blockquote>
<ul>
<li><a href="http://keeganlee.me/post/android/20150830" target="_blank" rel="external">Android样式的开发:shape篇</a></li>
<li><a href="http://keeganlee.me/post/android/20150905" target="_blank" rel="external">Android样式的开发:selector篇</a></li>
<li><a href="http://keeganlee.me/post/android/20150909" target="_blank" rel="external">Android样式的开发:layer-list篇</a></li>
<li><a href="http://keeganlee.me/post/android/20150916" target="_blank" rel="external">Android样式的开发:drawable汇总篇</a></li>
<li><a href="http://keeganlee.me/post/android/20151003" target="_blank" rel="external">Android样式的开发:View Animation篇</a></li>
<li><a href="http://keeganlee.me/post/android/20151026" target="_blank" rel="external">Android样式的开发:Property Animation篇</a></li>
<li><a href="http://keeganlee.me/post/android/20151031" target="_blank" rel="external">Android样式的开发:Style篇</a></li>
</ul>
<h3 id="gt-动画"><a href="#gt-动画" class="headerlink" title="&gt; 动画"></a>&gt; 动画</h3><blockquote>
<p>Android 动画介绍, 感谢<a href="http://www.jianshu.com/p/551f84402752" target="_blank" rel="external">阿祥JOKER</a> 分享.</p>
</blockquote>
<ul>
<li><a href="http://www.jianshu.com/p/551f84402752" target="_blank" rel="external">Android动画解析</a></li>
</ul>
<blockquote>
<p>重点!!!这里还是推荐郭霖大神的文章. 然后后面补充一篇偏知识点式的文章供复习.</p>
</blockquote>
<ul>
<li><a href="http://blog.csdn.net/guolin_blog/article/details/43536355" target="_blank" rel="external">Android属性动画完全解析(上)，初识属性动画的基本用法</a></li>
<li><a href="http://blog.csdn.net/guolin_blog/article/details/43816093" target="_blank" rel="external"> Android属性动画完全解析(中)，ValueAnimator和ObjectAnimator的高级用法</a></li>
<li><a href="http://blog.csdn.net/guolin_blog/article/details/44171115" target="_blank" rel="external"> Android属性动画完全解析(下)，Interpolator和ViewPropertyAnimator的用法</a></li>
<li>补充参考:<a href="http://www.jianshu.com/p/b7aa2a4a9787" target="_blank" rel="external">Android动画，一篇就够</a>, 感谢<a href="http://www.jianshu.com/u/b7e9763ffd86" target="_blank" rel="external">Shaun白一辰</a>的分享.</li>
</ul>
<h3 id="gt-事件分发"><a href="#gt-事件分发" class="headerlink" title="&gt; 事件分发"></a>&gt; 事件分发</h3><blockquote>
<p>事件分发是一个重要的知识点, 在面试中也有很大几率被问到.在开发中经常会遇到, 只有彻底理解好了在写代码时候才能思路清晰.希望以下文章能帮助你我弄清事件分发机制.</p>
</blockquote>
<ul>
<li><a href="http://www.jianshu.com/p/38015afcdb58" target="_blank" rel="external">Android事件分发机制详解：史上最全面、最易懂</a></li>
</ul>
<h3 id="gt-自成体系的-View-教程"><a href="#gt-自成体系的-View-教程" class="headerlink" title="&gt; 自成体系的 View 教程"></a>&gt; 自成体系的 View 教程</h3><blockquote>
<p>这里主要是推荐一些其他优秀文章作为参考阅读, 同样也是自成体系的. </p>
</blockquote>
<ul>
<li><a href="http://www.gcssloop.com/customview/CustomViewIndex/" target="_blank" rel="external">GcsSloop : 安卓自定义View教程目录</a></li>
</ul>
<h2 id="2-Java-API"><a href="#2-Java-API" class="headerlink" title="2. Java API"></a>2. Java API</h2><blockquote>
<p>这里主要是对 Java API 中的一些重要的源码解析进行收集. 同时也是面试重点, 希望能加深对 Java 的认识. 做到真的理解底层实现而不是只会使用.</p>
<p>由于 Java 面太广, 所以在这里主要是以知识点的形式覆盖基本概念. 这里推荐 <a href="http://www.cnblogs.com/chenssy/category/525010.html" target="_blank" rel="external">树上月</a> 的教程. 从 Blog 介绍看接触 Java 有一段时间, 所以分析会比较深入且正确. 更主要的是, 他把 Java 类文章基本都串起来了, 共有 38 篇可供学习. 文章太多就不一一贴链接了…</p>
</blockquote>
<ul>
<li><a href="http://www.cnblogs.com/chenssy/category/525010.html" target="_blank" rel="external">想学Java, 值得一阅</a></li>
</ul>
<h2 id="3-浅析JVM"><a href="#3-浅析JVM" class="headerlink" title="3. 浅析JVM"></a>3. 浅析JVM</h2><blockquote>
<p>当然这块知识会推荐一本书, 是<a href="https://book.douban.com/subject/24722612/" target="_blank" rel="external">《深入理解 Java 虚拟机》</a>， 而网上的那些分析大多数都是基于这本书的。这里会收集一些较好的讲解共在线阅读。</p>
</blockquote>
<h2 id="4-深入理解设计模式"><a href="#4-深入理解设计模式" class="headerlink" title="4. 深入理解设计模式"></a>4. 深入理解设计模式</h2><blockquote>
<p>这块也有一本书<a href="https://book.douban.com/subject/26644935/" target="_blank" rel="external">《Android 源码设计模式解析与实战》</a>推荐. </p>
</blockquote>
<ul>
<li><p><a href="https://juejin.im/entry/58faca0a1b69e600588cd952" target="_blank" rel="external">Java 的 23 种设计模式全解析</a></p>
</li>
<li><p><a href="http://blog.csdn.net/lovelion/article/details/17517213" target="_blank" rel="external">LoveLion：史上最全设计模式导学目录（完整版）</a></p>
</li>
</ul>
<h2 id="5-Android-常用框架分析"><a href="#5-Android-常用框架分析" class="headerlink" title="5. Android 常用框架分析"></a>5. Android 常用框架分析</h2><h2 id="6-Android-从文件到项目的最后一米"><a href="#6-Android-从文件到项目的最后一米" class="headerlink" title="6. Android - 从文件到项目的最后一米"></a>6. Android - 从文件到项目的最后一米</h2><blockquote>
<p>主要是提供开发过程中的非代码技术性问题的知识介绍和解决方案。</p>
</blockquote>
<p><a href="http://blog.csdn.net/ithomer/article/details/8940010" target="_blank" rel="external">Android 项目编译过程</a></p>
<p><a href="http://blog.csdn.net/t12x3456/article/details/40837287?spm=5176.8246799.blogcont.3.SR0OqB" target="_blank" rel="external">Android 使用android-support-multidex解决Dex超出方法数的限制问题,让你的应用不再爆棚</a></p>
<h2 id="7-计算机基础"><a href="#7-计算机基础" class="headerlink" title="7. 计算机基础"></a>7. 计算机基础</h2><h3 id="gt-数据库"><a href="#gt-数据库" class="headerlink" title="&gt; 数据库"></a>&gt; 数据库</h3><p><a href="http://blog.jobbole.com/100349/?from=timeline" target="_blank" rel="external">如果有人问你数据库的原理，叫他看这篇文章</a></p>
<h3 id="gt-网络"><a href="#gt-网络" class="headerlink" title="&gt; 网络"></a>&gt; 网络</h3><h3 id="gt-操作系统"><a href="#gt-操作系统" class="headerlink" title="&gt; 操作系统"></a>&gt; 操作系统</h3>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;this repo aims to collect some high quality basic knowledge Android Blog.  Just like source code analysis or something.&lt;/p&gt;
&lt;p&gt;这个仓库致力于收集我在学习 Android 开发过程所遇到的高质量的基础知识文章. 类似于源码分析之类的, 可以帮大家加深对基础原理的理解.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;0-Start&quot;&gt;&lt;a href=&quot;#0-Start&quot; class=&quot;headerlink&quot; title=&quot;0. Start&quot;&gt;&lt;/a&gt;0. Start&lt;/h2&gt;&lt;h3 id=&quot;gt-前言&quot;&gt;&lt;a href=&quot;#gt-前言&quot; class=&quot;headerlink&quot; title=&quot;&amp;gt; 前言&quot;&gt;&lt;/a&gt;&amp;gt; 前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;现在网络上有太多的知识可供学习, 但是作为一个自学者, 是好事也是坏事, 好事指不用担心没资源, 坏事是指对学习效率,理解程度和知识体系搭建都不太好.网上的文章不全是高质量的, 而且很多都是重复的碎片化知识,大家写的都差不多.所以为了自己的系统学习, 建议买书, 碰到哪个模块不懂再找大牛的 Blog 加深理解. &lt;/p&gt;
&lt;p&gt;所以可以看到我推荐的基本都是成一个小体系的系列文章, 可以帮助我们形成一个好的”学习思维树”. 而不是一大堆”散叶”. 而其他文章主要是作为自己加深理解, 对某个知识点深入学习的参考.&lt;/p&gt;
&lt;p&gt;首先可以肯定像我这种刚刚入门的在写文章的高度和视野都不如大牛. 而对于基础的知识,特别是涉及源码解析, 只要以一份资料为主就可以了. 最多加一两份做参考. 所以, 基本这种类型的文章, 我会收藏整理在这篇文章里并且永久更新. 同时自己也会利用课余时间把自己的实践项目以一个入门的学习者的视角解析, 相信这样对初学的开发者是比较友好的.如果你和我也一样处在这个阶段, 欢迎关注这篇文章.&lt;/p&gt;
&lt;p&gt;这里永久更新这类基础知识解读. &lt;a href=&quot;https://github.com/mk43&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt; 和 &lt;a href=&quot;http://fitzeng.org&quot;&gt;Blog&lt;/a&gt; 永久更新练习项目. 如果对你有帮助欢迎 Star ^_^;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;gt-更新&quot;&gt;&lt;a href=&quot;#gt-更新&quot; class=&quot;headerlink&quot; title=&quot;&amp;gt; 更新&quot;&gt;&lt;/a&gt;&amp;gt; 更新&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;v3 : &lt;a href=&quot;https://github.com/mk43&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;敬请期待…&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;v2 : 添加 &lt;code&gt;JVM&lt;/code&gt; &lt;code&gt;设计模式&lt;/code&gt; &lt;code&gt;常用框架&lt;/code&gt; &lt;code&gt;计算机基础&lt;/code&gt; 四大模块优质 Blog 收集&lt;/li&gt;
&lt;li&gt;v1 : 以 Android View 基础知识为主的 Blog 收集.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://fitzeng.org/tags/Android/"/>
    
      <category term="Collection" scheme="http://fitzeng.org/tags/Collection/"/>
    
  </entry>
  
  <entry>
    <title>Common Sense</title>
    <link href="http://fitzeng.org/2017/07/05/tips/"/>
    <id>http://fitzeng.org/2017/07/05/tips/</id>
    <published>2017-07-05T02:00:00.000Z</published>
    <updated>2017-07-29T12:21:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>this aticle aims to collect some common sense when you meet during dev.<br>这篇文章主要是记录我在 Android 开发过程中遇到的一些概念问题, 在这里提供简单快速的使用规范.</p>
<ul>
<li><a href="#jump_01">开源项目许可证</a></li>
<li><a href="#jump_02">看懂UML类图</a></li>
</ul>
<a id="more"></a>
<h4 id="开源项目许可证"><a href="#开源项目许可证" class="headerlink" title="开源项目许可证"></a><span id="jump_01">开源项目许可证</span></h4><p>MIT、GPLv2和Apache占据了前三位。choosealicense.com为许可证的选择给出了建议.</p>
<ul>
<li>MIT是一个几乎可以“为所欲为”的许可证，如果你希望简单、宽松，它是你的不二选择.</li>
<li>如果你关心软件的专利问题，但同样希望宽松，可以选择Apache.</li>
<li>如果你希望代码使用者同样能把他们的贡献分享出来，那就选择GPL.</li>
</ul>
<p>参考: <a href="http://www.infoq.com/cn/news/2015/03/github-open-source-licence" target="_blank" rel="external">曹知渊 : GitHub发布开源许可证使用情况</a></p>
<h4 id="看懂UML类图"><a href="#看懂UML类图" class="headerlink" title="看懂UML类图"></a><span id="jump_02">看懂UML类图</span></h4><ul>
<li>泛化关系 (A继承自B)</li>
</ul>
<p><img src="/2017/07/05/tips/uml_generalization.jpg" alt=""></p>
<p>eg:</p>
<p><img src="/2017/07/05/tips/uml_generalize.jpg" alt=""></p>
<ul>
<li>实现关系 (继承抽象类)</li>
</ul>
<p><img src="/2017/07/05/tips/uml_realize.jpg" alt=""></p>
<ul>
<li>聚合关系( A 聚合到 B 上或者 B 由 A 组成)</li>
</ul>
<p><img src="/2017/07/05/tips/uml_aggregation.jpg" alt=""></p>
<blockquote>
<p>聚合关系用于表示实体对象之间的关系，表示整体由部分构成的语义；例如一个部门由多个员工组成；</p>
<p>与组合关系不同的是，整体和部分不是强依赖的，即使整体不存在了，部分仍然存在；例如， 部门撤销了，人员不会消失，他们依然存在；</p>
</blockquote>
<ul>
<li>组合关系( A 组成 B 或者 B 由 A 组成)</li>
</ul>
<p><img src="/2017/07/05/tips/uml_composition.jpg" alt=""></p>
<blockquote>
<p>与聚合关系一样，组合关系同样表示整体由部分构成的语义；比如公司由多个部门组成；</p>
<p>但组合关系是一种强依赖的特殊聚合关系，如果整体不存在了，则部分也不存在了；例如， 公司不存在了，部门也将不存在了；</p>
</blockquote>
<ul>
<li>关联关系</li>
</ul>
<p><img src="/2017/07/05/tips/uml_association.jpg" alt=""></p>
<blockquote>
<p>它描述不同类的对象之间的结构关系；它是一种静态关系， 通常与运行状态无关，一般由常识等因素决定的；它一般用来定义对象之间静态的、天然的结构； 所以，关联关系是一种“强关联”的关系；</p>
<p>比如，乘车人和车票之间就是一种关联关系；学生和学校就是一种关联关系；</p>
<p>关联关系默认不强调方向，表示对象间相互知道；如果特别强调方向，如下图，表示A知道B，但 B不知道A；</p>
<p>在最终代码中，关联对象通常是以成员变量的形式实现的；</p>
</blockquote>
<ul>
<li>依赖关系 ( A 依赖于 B )</li>
</ul>
<p><img src="/2017/07/05/tips/uml_dependency.jpg" alt=""></p>
<blockquote>
<p>他描述一个对象在运行期间会用到另一个对象的关系；</p>
<p>与关联关系不同的是，它是一种临时性的关系，通常在运行期间产生，并且随着运行时的变化； 依赖关系也可能发生变化；</p>
<p>显然，依赖也有方向，双向依赖是一种非常糟糕的结构，我们总是应该保持单向依赖，杜绝双向依赖的产生；</p>
<p>在最终代码中，依赖关系体现为类构造方法及类方法的传入参数，箭头的指向为调用关系；依赖关系除了临时知道对方外，还是“使用”对方的方法和属性；</p>
</blockquote>
<ul>
<li>实例</li>
</ul>
<p><img src="/2017/07/05/tips/uml_class_struct.jpg" alt=""></p>
<blockquote>
<p>车的类图结构为&lt;<abstract>&gt;，表示车是一个抽象类；</abstract></p>
<p>它有两个继承类：小汽车和自行车；它们之间的关系为实现关系，使用带空心箭头的虚线表示；</p>
<p>小汽车为与SUV之间也是继承关系，它们之间的关系为泛化关系，使用带空心箭头的实线表示；</p>
<p>小汽车与发动机之间是组合关系，使用带实心箭头的实线表示；</p>
<p>学生与班级之间是聚合关系，使用带空心箭头的实线表示；</p>
<p>学生与身份证之间为关联关系，使用一根实线表示；</p>
<p>学生上学需要用到自行车，与自行车是一种依赖关系，使用带箭头的虚线表示；</p>
</blockquote>
<p>注: “看懂UML类图” 内容全部取材自<a href="http://design-patterns.readthedocs.io/zh_CN/latest/read_uml.html" target="_blank" rel="external">该网页</a>. 在此做出感谢, 出于学习总结目的特意把内容搬至此处, 如有侵权立即删除.</p>
<p>参考: <a href="http://www.cnblogs.com/olvo/archive/2012/05/03/2481014.html" target="_blank" rel="external">congestion : UML类图关系（泛化 、继承、实现、依赖、关联、聚合、组合）</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;this aticle aims to collect some common sense when you meet during dev.&lt;br&gt;这篇文章主要是记录我在 Android 开发过程中遇到的一些概念问题, 在这里提供简单快速的使用规范.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#jump_01&quot;&gt;开源项目许可证&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jump_02&quot;&gt;看懂UML类图&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Tips" scheme="http://fitzeng.org/tags/Tips/"/>
    
  </entry>
  
  <entry>
    <title>BMP压缩成JPEG过程实现与分析</title>
    <link href="http://fitzeng.org/2017/06/13/BMP2JPEG/"/>
    <id>http://fitzeng.org/2017/06/13/BMP2JPEG/</id>
    <published>2017-06-12T16:00:00.000Z</published>
    <updated>2017-07-19T15:35:04.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/mk43/Algo-Math/tree/master/bmp2jpeg" target="_blank" rel="external">GitHub</a></p>
<hr>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>由于最近做了图像相关的学习，所以想再深入点，但是自己的知识有限，目前只能把自己所学的通过这个小小的实验来加深理解。参考大牛的 Blog 加上自己亲手实践，写了这篇文章。以后还会继续添加图像处理的相关知识。<br><img src="https://raw.githubusercontent.com/mk43/Algo-Math/master/bmp2jpeg/y.jpeg" width="240" height="240"> <img src="https://raw.githubusercontent.com/mk43/Algo-Math/master/bmp2jpeg/b.jpeg" width="240" height="240"> <img src="https://raw.githubusercontent.com/mk43/Algo-Math/master/bmp2jpeg/r.jpeg" width="240" height="240"></p>
<a id="more"></a>
<h3 id="BMP介绍"><a href="#BMP介绍" class="headerlink" title="BMP介绍"></a><a href="https://www.cnblogs.com/Matrix_Yao/archive/2009/12/02/1615295.html" target="_blank" rel="external">BMP介绍</a></h3><ul>
<li><p>BMP文件头<br>文件头主要是包含一个文件的ID信息，所以BMP的文件头自然也是说明自己的文件格式，文件大小等信息，一般是14位表示。意义如下图所示：<br><img src="/2017/06/13/BMP2JPEG/bmp_1.png" alt=""></p>
</li>
<li><p>位图信息头<br>信息头主要是对图片特征的描述，比如说宽高，像素，压缩方式等，一般是40位。主要介绍如下表：<br><img src="/2017/06/13/BMP2JPEG/bmp_2.png" alt=""></p>
</li>
<li><p>调色板<br>调色板是可选的，使用索引来表示图像，调色板就是索引与其对应的颜色的映射表，这次实验选用的是24bit的图片。</p>
</li>
<li>位图数据<br>这里就是存储图片的内容了。</li>
</ul>
<h3 id="JPEG介绍"><a href="#JPEG介绍" class="headerlink" title="JPEG介绍"></a><a href="https://www.cnblogs.com/lakeone/p/3596996.html" target="_blank" rel="external">JPEG介绍</a></h3><p>JPEG是有损压缩编码下的一种图片格式，目前压缩效果好，应用广泛。其原理主要是将传统的RGB模式下的图片转化成YCbCr格式。因为人眼的结构问题对亮度更加敏感，所以可以将亮度和色度分离开来，对色度可进行较大的舍弃从而进行较大程度的压缩而对视觉不造成太大影响。既然是压缩而成的格式，那必然有解压缩过程，而解压缩所以依赖的量化表和哈夫曼表自然要记录下来。所以和BMP对比自然而然头结构出来了，而且要比BMP复杂。下面只给出部分信息：<br><img src="/2017/06/13/BMP2JPEG/jpeg_1.png" alt=""></p>
<h3 id="BMP-读取"><a href="#BMP-读取" class="headerlink" title="BMP 读取"></a>BMP 读取</h3><ul>
<li>构建BMP的文件头和头信息结构体</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//BMP 文件格式【文件头和头部信息】</span></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line">		<span class="keyword">unsigned</span> <span class="keyword">short</span>	bfType;</div><div class="line">		<span class="keyword">unsigned</span> <span class="keyword">int</span>	bfSize;</div><div class="line">		<span class="keyword">unsigned</span> <span class="keyword">short</span>	bfReserved1;</div><div class="line">		<span class="keyword">unsigned</span> <span class="keyword">short</span>	bfReserved2;</div><div class="line">		<span class="keyword">unsigned</span> <span class="keyword">int</span>	bfOffBits;</div><div class="line">&#125; BITMAPFILEHEADER;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line">		<span class="keyword">unsigned</span> <span class="keyword">int</span>	biSize;</div><div class="line">		<span class="keyword">int</span>				biWidth;</div><div class="line">		<span class="keyword">int</span>				biHeight;</div><div class="line">		<span class="keyword">unsigned</span> <span class="keyword">short</span>	biPlanes;</div><div class="line">		<span class="keyword">unsigned</span> <span class="keyword">short</span>	biBitCount;</div><div class="line">		<span class="keyword">unsigned</span> <span class="keyword">int</span>	biCompression;</div><div class="line">		<span class="keyword">unsigned</span> <span class="keyword">int</span>	biSizeImage;</div><div class="line">		<span class="keyword">int</span>				biXPelsPerMeter;</div><div class="line">		<span class="keyword">int</span>				biYPelsPerMeter;</div><div class="line">		<span class="keyword">unsigned</span> <span class="keyword">int</span>	biClrUsed;</div><div class="line">		<span class="keyword">unsigned</span> <span class="keyword">int</span>	biClrImportant;</div><div class="line">&#125; BITMAPINFOHEADER;</div></pre></td></tr></table></figure>
<ul>
<li>图片校验</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//打开文件</span></div><div class="line">FILE* fp = fopen(fileName, <span class="string">"rb"</span>);</div><div class="line"><span class="keyword">if</span>(fp==<span class="number">0</span>) &#123;</div><div class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">BITMAPFILEHEADER fileHeader;</div><div class="line">BITMAPINFOHEADER infoHeader;</div><div class="line"></div><div class="line"><span class="comment">// 读取头部 14字节</span></div><div class="line"><span class="keyword">if</span>(<span class="number">1</span> != fread(&amp;fileHeader, <span class="keyword">sizeof</span>(fileHeader), <span class="number">1</span>, fp)) &#123;</div><div class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 判断是不是BM类型</span></div><div class="line"><span class="keyword">if</span>(fileHeader.bfType!=<span class="number">0x4D42</span>) &#123;</div><div class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 读取头部信息 40字节</span></div><div class="line"><span class="keyword">if</span>(<span class="number">1</span> != fread(&amp;infoHeader, <span class="keyword">sizeof</span>(infoHeader), <span class="number">1</span>, fp)) &#123;</div><div class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 判断是不是24位类型。也就是RGB的存储格式</span></div><div class="line"><span class="keyword">if</span>(infoHeader.biBitCount != <span class="number">24</span> || infoHeader.biCompression != <span class="number">0</span>) &#123;</div><div class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> width = infoHeader.biWidth;</div><div class="line"><span class="keyword">int</span> height = infoHeader.biHeight &lt; <span class="number">0</span> ? (-infoHeader.biHeight) : infoHeader.biHeight;</div><div class="line"><span class="comment">// 判断二进制的最后三位是不是000，也就是判断是不是8的倍数</span></div><div class="line"><span class="keyword">if</span>((width&amp;<span class="number">7</span>) != <span class="number">0</span> || (height&amp;<span class="number">7</span>) != <span class="number">0</span>) &#123;</div><div class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>图片内容读取</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// RGB三个分量</span></div><div class="line"><span class="keyword">int</span> bmpSize = width*height*<span class="number">3</span>;</div><div class="line"></div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>* buffer = <span class="keyword">new</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>[bmpSize];</div><div class="line"><span class="keyword">if</span>(buffer == <span class="number">0</span>) &#123;</div><div class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 将文件指针移到数据区域</span></div><div class="line">fseek(fp, fileHeader.bfOffBits, SEEK_SET);</div><div class="line"></div><div class="line"><span class="keyword">if</span>(infoHeader.biHeight &gt; <span class="number">0</span>) &#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; height; i++) &#123;</div><div class="line">		<span class="comment">// 读取第i行,每此读 3（size） * width （count）大小</span></div><div class="line">		<span class="keyword">if</span>(width != fread(buffer + (height - <span class="number">1</span> - i) * width * <span class="number">3</span>, <span class="number">3</span>, width, fp)) &#123;</div><div class="line">			<span class="keyword">delete</span>[] buffer;</div><div class="line">			buffer = <span class="number">0</span>;</div><div class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">	<span class="keyword">if</span>(width*height != fread(buffer, <span class="number">3</span>, width*height, fp)) &#123;</div><div class="line">		<span class="keyword">delete</span>[] buffer;</div><div class="line">		buffer = <span class="number">0</span>;</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>存储信息</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取宽高和大小</span></div><div class="line">m_rgbBuffer = buffer;</div><div class="line">m_width = width;</div><div class="line">m_height = height;</div><div class="line"></div><div class="line">fclose(fp);</div><div class="line">fp=<span class="number">0</span>;</div></pre></td></tr></table></figure>
<h3 id="JPEG-写入"><a href="#JPEG-写入" class="headerlink" title="JPEG 写入"></a>JPEG 写入</h3><p>在前期JPEG写入是，要进行一系列准备工作，根据JPEG官方提供的标准量化表和哈夫曼表进行自己的操作得到自己满意的压缩编码。</p>
<ul>
<li><p>数值表：<br><img src="/2017/06/13/BMP2JPEG/tdata.png" alt=""></p>
</li>
<li><p>直流分量表：<br><img src="/2017/06/13/BMP2JPEG/tdc.png" alt=""></p>
</li>
<li><p>交流分量表：<br><img src="/2017/06/13/BMP2JPEG/tac.png" alt=""></p>
</li>
</ul>
<p>下面给出具体代码：</p>
<ul>
<li>亮度量化表</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 亮度量化表</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> Luminance_Quantization_Table[<span class="number">64</span>] = &#123;</div><div class="line">	<span class="number">16</span>,  <span class="number">11</span>,  <span class="number">10</span>,  <span class="number">16</span>,  <span class="number">24</span>,  <span class="number">40</span>,  <span class="number">51</span>,  <span class="number">61</span>,</div><div class="line">	<span class="number">12</span>,  <span class="number">12</span>,  <span class="number">14</span>,  <span class="number">19</span>,  <span class="number">26</span>,  <span class="number">58</span>,  <span class="number">60</span>,  <span class="number">55</span>,</div><div class="line">	<span class="number">14</span>,  <span class="number">13</span>,  <span class="number">16</span>,  <span class="number">24</span>,  <span class="number">40</span>,  <span class="number">57</span>,  <span class="number">69</span>,  <span class="number">56</span>,</div><div class="line">	<span class="number">14</span>,  <span class="number">17</span>,  <span class="number">22</span>,  <span class="number">29</span>,  <span class="number">51</span>,  <span class="number">87</span>,  <span class="number">80</span>,  <span class="number">62</span>,</div><div class="line">	<span class="number">18</span>,  <span class="number">22</span>,  <span class="number">37</span>,  <span class="number">56</span>,  <span class="number">68</span>, <span class="number">109</span>, <span class="number">103</span>,  <span class="number">77</span>,</div><div class="line">	<span class="number">24</span>,  <span class="number">35</span>,  <span class="number">55</span>,  <span class="number">64</span>,  <span class="number">81</span>, <span class="number">104</span>, <span class="number">113</span>,  <span class="number">92</span>,</div><div class="line">	<span class="number">49</span>,  <span class="number">64</span>,  <span class="number">78</span>,  <span class="number">87</span>, <span class="number">103</span>, <span class="number">121</span>, <span class="number">120</span>, <span class="number">101</span>,</div><div class="line">	<span class="number">72</span>,  <span class="number">92</span>,  <span class="number">95</span>,  <span class="number">98</span>, <span class="number">112</span>, <span class="number">100</span>, <span class="number">103</span>,  <span class="number">99</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li>色度量化表</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 色度量化表</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> Chrominance_Quantization_Table[<span class="number">64</span>] = &#123;</div><div class="line">	<span class="number">17</span>,  <span class="number">18</span>,  <span class="number">24</span>,  <span class="number">47</span>,  <span class="number">99</span>,  <span class="number">99</span>,  <span class="number">99</span>,  <span class="number">99</span>,</div><div class="line">	<span class="number">18</span>,  <span class="number">21</span>,  <span class="number">26</span>,  <span class="number">66</span>,  <span class="number">99</span>,  <span class="number">99</span>,  <span class="number">99</span>,  <span class="number">99</span>,</div><div class="line">	<span class="number">24</span>,  <span class="number">26</span>,  <span class="number">56</span>,  <span class="number">99</span>,  <span class="number">99</span>,  <span class="number">99</span>,  <span class="number">99</span>,  <span class="number">99</span>,</div><div class="line">	<span class="number">47</span>,  <span class="number">66</span>,  <span class="number">99</span>,  <span class="number">99</span>,  <span class="number">99</span>,  <span class="number">99</span>,  <span class="number">99</span>,  <span class="number">99</span>,</div><div class="line">	<span class="number">99</span>,  <span class="number">99</span>,  <span class="number">99</span>,  <span class="number">99</span>,  <span class="number">99</span>,  <span class="number">99</span>,  <span class="number">99</span>,  <span class="number">99</span>,</div><div class="line">	<span class="number">99</span>,  <span class="number">99</span>,  <span class="number">99</span>,  <span class="number">99</span>,  <span class="number">99</span>,  <span class="number">99</span>,  <span class="number">99</span>,  <span class="number">99</span>,</div><div class="line">	<span class="number">99</span>,  <span class="number">99</span>,  <span class="number">99</span>,  <span class="number">99</span>,  <span class="number">99</span>,  <span class="number">99</span>,  <span class="number">99</span>,  <span class="number">99</span>,</div><div class="line">	<span class="number">99</span>,  <span class="number">99</span>,  <span class="number">99</span>,  <span class="number">99</span>,  <span class="number">99</span>,  <span class="number">99</span>,  <span class="number">99</span>,  <span class="number">99</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li>标准直流分量色度亮度哈夫曼表</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> Standard_DC_Luminance_NRCodes[] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</div><div class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> Standard_DC_Luminance_Values[] = &#123; <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span> &#125;;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> Standard_DC_Chrominance_NRCodes[] = &#123; <span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</div><div class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> Standard_DC_Chrominance_Values[] = &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span> &#125;;</div></pre></td></tr></table></figure>
<ul>
<li>标准交流分量色度亮度哈夫曼表</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> Standard_AC_Luminance_NRCodes[] = &#123; <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>,</div><div class="line">	<span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0x7d</span> &#125;;</div><div class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> Standard_AC_Luminance_Values[] = &#123;</div><div class="line">	<span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x04</span>, <span class="number">0x11</span>, <span class="number">0x05</span>, <span class="number">0x12</span>,</div><div class="line">	<span class="number">0x21</span>, <span class="number">0x31</span>, <span class="number">0x41</span>, <span class="number">0x06</span>, <span class="number">0x13</span>, <span class="number">0x51</span>, <span class="number">0x61</span>, <span class="number">0x07</span>,</div><div class="line">	<span class="number">0x22</span>, <span class="number">0x71</span>, <span class="number">0x14</span>, <span class="number">0x32</span>, <span class="number">0x81</span>, <span class="number">0x91</span>, <span class="number">0xa1</span>, <span class="number">0x08</span>,</div><div class="line">	<span class="number">0x23</span>, <span class="number">0x42</span>, <span class="number">0xb1</span>, <span class="number">0xc1</span>, <span class="number">0x15</span>, <span class="number">0x52</span>, <span class="number">0xd1</span>, <span class="number">0xf0</span>,</div><div class="line">	<span class="number">0x24</span>, <span class="number">0x33</span>, <span class="number">0x62</span>, <span class="number">0x72</span>, <span class="number">0x82</span>, <span class="number">0x09</span>, <span class="number">0x0a</span>, <span class="number">0x16</span>,</div><div class="line">	<span class="number">0x17</span>, <span class="number">0x18</span>, <span class="number">0x19</span>, <span class="number">0x1a</span>, <span class="number">0x25</span>, <span class="number">0x26</span>, <span class="number">0x27</span>, <span class="number">0x28</span>,</div><div class="line">	<span class="number">0x29</span>, <span class="number">0x2a</span>, <span class="number">0x34</span>, <span class="number">0x35</span>, <span class="number">0x36</span>, <span class="number">0x37</span>, <span class="number">0x38</span>, <span class="number">0x39</span>,</div><div class="line">	<span class="number">0x3a</span>, <span class="number">0x43</span>, <span class="number">0x44</span>, <span class="number">0x45</span>, <span class="number">0x46</span>, <span class="number">0x47</span>, <span class="number">0x48</span>, <span class="number">0x49</span>,</div><div class="line">	<span class="number">0x4a</span>, <span class="number">0x53</span>, <span class="number">0x54</span>, <span class="number">0x55</span>, <span class="number">0x56</span>, <span class="number">0x57</span>, <span class="number">0x58</span>, <span class="number">0x59</span>,</div><div class="line">	<span class="number">0x5a</span>, <span class="number">0x63</span>, <span class="number">0x64</span>, <span class="number">0x65</span>, <span class="number">0x66</span>, <span class="number">0x67</span>, <span class="number">0x68</span>, <span class="number">0x69</span>,</div><div class="line">	<span class="number">0x6a</span>, <span class="number">0x73</span>, <span class="number">0x74</span>, <span class="number">0x75</span>, <span class="number">0x76</span>, <span class="number">0x77</span>, <span class="number">0x78</span>, <span class="number">0x79</span>,</div><div class="line">	<span class="number">0x7a</span>, <span class="number">0x83</span>, <span class="number">0x84</span>, <span class="number">0x85</span>, <span class="number">0x86</span>, <span class="number">0x87</span>, <span class="number">0x88</span>, <span class="number">0x89</span>,</div><div class="line">	<span class="number">0x8a</span>, <span class="number">0x92</span>, <span class="number">0x93</span>, <span class="number">0x94</span>, <span class="number">0x95</span>, <span class="number">0x96</span>, <span class="number">0x97</span>, <span class="number">0x98</span>,</div><div class="line">	<span class="number">0x99</span>, <span class="number">0x9a</span>, <span class="number">0xa2</span>, <span class="number">0xa3</span>, <span class="number">0xa4</span>, <span class="number">0xa5</span>, <span class="number">0xa6</span>, <span class="number">0xa7</span>,</div><div class="line">	<span class="number">0xa8</span>, <span class="number">0xa9</span>, <span class="number">0xaa</span>, <span class="number">0xb2</span>, <span class="number">0xb3</span>, <span class="number">0xb4</span>, <span class="number">0xb5</span>, <span class="number">0xb6</span>,</div><div class="line">	<span class="number">0xb7</span>, <span class="number">0xb8</span>, <span class="number">0xb9</span>, <span class="number">0xba</span>, <span class="number">0xc2</span>, <span class="number">0xc3</span>, <span class="number">0xc4</span>, <span class="number">0xc5</span>,</div><div class="line">	<span class="number">0xc6</span>, <span class="number">0xc7</span>, <span class="number">0xc8</span>, <span class="number">0xc9</span>, <span class="number">0xca</span>, <span class="number">0xd2</span>, <span class="number">0xd3</span>, <span class="number">0xd4</span>,</div><div class="line">	<span class="number">0xd5</span>, <span class="number">0xd6</span>, <span class="number">0xd7</span>, <span class="number">0xd8</span>, <span class="number">0xd9</span>, <span class="number">0xda</span>, <span class="number">0xe1</span>, <span class="number">0xe2</span>,</div><div class="line">	<span class="number">0xe3</span>, <span class="number">0xe4</span>, <span class="number">0xe5</span>, <span class="number">0xe6</span>, <span class="number">0xe7</span>, <span class="number">0xe8</span>, <span class="number">0xe9</span>, <span class="number">0xea</span>,</div><div class="line">	<span class="number">0xf1</span>, <span class="number">0xf2</span>, <span class="number">0xf3</span>, <span class="number">0xf4</span>, <span class="number">0xf5</span>, <span class="number">0xf6</span>, <span class="number">0xf7</span>, <span class="number">0xf8</span>,</div><div class="line">	<span class="number">0xf9</span>, <span class="number">0xfa</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> Standard_AC_Chrominance_NRCodes[] = &#123; <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>,</div><div class="line">	<span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0x77</span> &#125;;</div><div class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> Standard_AC_Chrominance_Values[] = &#123;</div><div class="line">	<span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x11</span>, <span class="number">0x04</span>, <span class="number">0x05</span>, <span class="number">0x21</span>,</div><div class="line">	<span class="number">0x31</span>, <span class="number">0x06</span>, <span class="number">0x12</span>, <span class="number">0x41</span>, <span class="number">0x51</span>, <span class="number">0x07</span>, <span class="number">0x61</span>, <span class="number">0x71</span>,</div><div class="line">	<span class="number">0x13</span>, <span class="number">0x22</span>, <span class="number">0x32</span>, <span class="number">0x81</span>, <span class="number">0x08</span>, <span class="number">0x14</span>, <span class="number">0x42</span>, <span class="number">0x91</span>,</div><div class="line">	<span class="number">0xa1</span>, <span class="number">0xb1</span>, <span class="number">0xc1</span>, <span class="number">0x09</span>, <span class="number">0x23</span>, <span class="number">0x33</span>, <span class="number">0x52</span>, <span class="number">0xf0</span>,</div><div class="line">	<span class="number">0x15</span>, <span class="number">0x62</span>, <span class="number">0x72</span>, <span class="number">0xd1</span>, <span class="number">0x0a</span>, <span class="number">0x16</span>, <span class="number">0x24</span>, <span class="number">0x34</span>,</div><div class="line">	<span class="number">0xe1</span>, <span class="number">0x25</span>, <span class="number">0xf1</span>, <span class="number">0x17</span>, <span class="number">0x18</span>, <span class="number">0x19</span>, <span class="number">0x1a</span>, <span class="number">0x26</span>,</div><div class="line">	<span class="number">0x27</span>, <span class="number">0x28</span>, <span class="number">0x29</span>, <span class="number">0x2a</span>, <span class="number">0x35</span>, <span class="number">0x36</span>, <span class="number">0x37</span>, <span class="number">0x38</span>,</div><div class="line">	<span class="number">0x39</span>, <span class="number">0x3a</span>, <span class="number">0x43</span>, <span class="number">0x44</span>, <span class="number">0x45</span>, <span class="number">0x46</span>, <span class="number">0x47</span>, <span class="number">0x48</span>,</div><div class="line">	<span class="number">0x49</span>, <span class="number">0x4a</span>, <span class="number">0x53</span>, <span class="number">0x54</span>, <span class="number">0x55</span>, <span class="number">0x56</span>, <span class="number">0x57</span>, <span class="number">0x58</span>,</div><div class="line">	<span class="number">0x59</span>, <span class="number">0x5a</span>, <span class="number">0x63</span>, <span class="number">0x64</span>, <span class="number">0x65</span>, <span class="number">0x66</span>, <span class="number">0x67</span>, <span class="number">0x68</span>,</div><div class="line">	<span class="number">0x69</span>, <span class="number">0x6a</span>, <span class="number">0x73</span>, <span class="number">0x74</span>, <span class="number">0x75</span>, <span class="number">0x76</span>, <span class="number">0x77</span>, <span class="number">0x78</span>,</div><div class="line">	<span class="number">0x79</span>, <span class="number">0x7a</span>, <span class="number">0x82</span>, <span class="number">0x83</span>, <span class="number">0x84</span>, <span class="number">0x85</span>, <span class="number">0x86</span>, <span class="number">0x87</span>,</div><div class="line">	<span class="number">0x88</span>, <span class="number">0x89</span>, <span class="number">0x8a</span>, <span class="number">0x92</span>, <span class="number">0x93</span>, <span class="number">0x94</span>, <span class="number">0x95</span>, <span class="number">0x96</span>,</div><div class="line">	<span class="number">0x97</span>, <span class="number">0x98</span>, <span class="number">0x99</span>, <span class="number">0x9a</span>, <span class="number">0xa2</span>, <span class="number">0xa3</span>, <span class="number">0xa4</span>, <span class="number">0xa5</span>,</div><div class="line">	<span class="number">0xa6</span>, <span class="number">0xa7</span>, <span class="number">0xa8</span>, <span class="number">0xa9</span>, <span class="number">0xaa</span>, <span class="number">0xb2</span>, <span class="number">0xb3</span>, <span class="number">0xb4</span>,</div><div class="line">	<span class="number">0xb5</span>, <span class="number">0xb6</span>, <span class="number">0xb7</span>, <span class="number">0xb8</span>, <span class="number">0xb9</span>, <span class="number">0xba</span>, <span class="number">0xc2</span>, <span class="number">0xc3</span>,</div><div class="line">	<span class="number">0xc4</span>, <span class="number">0xc5</span>, <span class="number">0xc6</span>, <span class="number">0xc7</span>, <span class="number">0xc8</span>, <span class="number">0xc9</span>, <span class="number">0xca</span>, <span class="number">0xd2</span>,</div><div class="line">	<span class="number">0xd3</span>, <span class="number">0xd4</span>, <span class="number">0xd5</span>, <span class="number">0xd6</span>, <span class="number">0xd7</span>, <span class="number">0xd8</span>, <span class="number">0xd9</span>, <span class="number">0xda</span>,</div><div class="line">	<span class="number">0xe2</span>, <span class="number">0xe3</span>, <span class="number">0xe4</span>, <span class="number">0xe5</span>, <span class="number">0xe6</span>, <span class="number">0xe7</span>, <span class="number">0xe8</span>, <span class="number">0xe9</span>,</div><div class="line">	<span class="number">0xea</span>, <span class="number">0xf2</span>, <span class="number">0xf3</span>, <span class="number">0xf4</span>, <span class="number">0xf5</span>, <span class="number">0xf6</span>, <span class="number">0xf7</span>, <span class="number">0xf8</span>,</div><div class="line">	<span class="number">0xf9</span>, <span class="number">0xfa</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li>计算哈夫曼编码</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> JpegEncoder::_computeHuffmanTable(<span class="keyword">const</span> <span class="keyword">char</span>* nr_codes,</div><div class="line">	<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>* std_table, BitString* huffman_table) &#123;</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span> pos_in_table = <span class="number">0</span>;</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">short</span> code_value = <span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= <span class="number">16</span>; k++) &#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= nr_codes[k<span class="number">-1</span>]; j++) &#123;</div><div class="line">			huffman_table[std_table[pos_in_table]].value = code_value;</div><div class="line">			huffman_table[std_table[pos_in_table]].length = k;</div><div class="line">			pos_in_table++;</div><div class="line">			code_value++;</div><div class="line">		&#125;</div><div class="line">		code_value &lt;&lt;= <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>初始化量化表<br>根据传入的参数调整量化程度，因为这个量化过程是有损的。所以其结果对图像质量有较大影响。</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 初始化量化表</span></div><div class="line"><span class="keyword">void</span> JpegEncoder::_initQualityTables(<span class="keyword">int</span> quality_scale) &#123;</div><div class="line">	<span class="keyword">if</span>(quality_scale &lt;= <span class="number">0</span>) &#123;</div><div class="line">		quality_scale = <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>(quality_scale &gt;= <span class="number">100</span>) &#123;</div><div class="line">		quality_scale = <span class="number">99</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++) &#123;</div><div class="line">		<span class="keyword">int</span> temp = ((<span class="keyword">int</span>)(Luminance_Quantization_Table[i] * quality_scale + <span class="number">50</span>) / <span class="number">100</span>);</div><div class="line">		<span class="keyword">if</span> (temp &lt;= <span class="number">0</span>) &#123;</div><div class="line">			temp = <span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (temp &gt; <span class="number">0xFF</span>) &#123;</div><div class="line">			temp = <span class="number">0xFF</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		m_YTable[ZigZag[i]] = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)temp;</div><div class="line"></div><div class="line">		temp = ((<span class="keyword">int</span>)(Chrominance_Quantization_Table[i] * quality_scale + <span class="number">50</span>) / <span class="number">100</span>);</div><div class="line">		<span class="keyword">if</span> (temp&lt;=<span class="number">0</span>) &#123;</div><div class="line">			temp = <span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (temp&gt;<span class="number">0xFF</span>) &#123;</div><div class="line">			temp = <span class="number">0xFF</span>;</div><div class="line">		&#125;</div><div class="line">		m_CbCrTable[ZigZag[i]] = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)temp;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>写文件头<br>到这里文件头基本已经确定，可以写入JPEG文件了。</p>
</li>
<li><p>RGB 转化成 YCbCr<br>每读取一个 8*8 的方块区域，就进行颜色空间转化。转换式和代码如下：</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">Y= <span class="number">0.299</span>*R + <span class="number">0.587</span>*G + <span class="number">0.114</span>*B</div><div class="line">C_b= <span class="number">-0.168</span>*R – <span class="number">0.331</span>*G + <span class="number">0.449</span>*B</div><div class="line">C_r= <span class="number">0.5</span>*R – <span class="number">0.419</span>*G – <span class="number">0.018</span>*B </div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">void</span> JpegEncoder::_convertColorSpace(<span class="keyword">int</span> xPos, <span class="keyword">int</span> yPos, <span class="keyword">char</span>* yData, <span class="keyword">char</span>* cbData, <span class="keyword">char</span>* crData) &#123;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="number">8</span>; y++) &#123;</div><div class="line">		<span class="comment">// 跳行</span></div><div class="line">		<span class="keyword">unsigned</span> <span class="keyword">char</span>* p = m_rgbBuffer + (y + yPos) * m_width * <span class="number">3</span> + xPos * <span class="number">3</span>;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">8</span>; x++) &#123;</div><div class="line">			<span class="keyword">unsigned</span> <span class="keyword">char</span> B = *p++;</div><div class="line">			<span class="keyword">unsigned</span> <span class="keyword">char</span> G = *p++;</div><div class="line">			<span class="keyword">unsigned</span> <span class="keyword">char</span> R = *p++;</div><div class="line"></div><div class="line">			yData[y * <span class="number">8</span> + x] = (<span class="keyword">char</span>)(<span class="number">0.299f</span> * R + <span class="number">0.587f</span> * G + <span class="number">0.114f</span> * B - <span class="number">128</span>);</div><div class="line">			<span class="comment">// yData[y * 8 + x] = 0;</span></div><div class="line">			cbData[y * <span class="number">8</span> + x] = (<span class="keyword">char</span>)(<span class="number">-0.1687f</span> * R - <span class="number">0.3313f</span> * G + <span class="number">0.5f</span> * B );</div><div class="line">			<span class="comment">// cbData[y * 8 + x] = 0;</span></div><div class="line">			crData[y * <span class="number">8</span> + x] = (<span class="keyword">char</span>)(<span class="number">0.5f</span> * R - <span class="number">0.4187f</span> * G - <span class="number">0.0813f</span> * B);</div><div class="line">			<span class="comment">// crData[y * 8 + x] = 0;</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>DCT变换和量化<br>DCT变换式和量化代码：<br><img src="/2017/06/13/BMP2JPEG/dct.png" alt=""></li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// DCT变化 + 量化（未优化）</span></div><div class="line"><span class="keyword">void</span> JpegEncoder::_forward_DCT(<span class="keyword">const</span> <span class="keyword">char</span>* channel_data, <span class="keyword">short</span>* fdc_data) &#123;</div><div class="line">	<span class="keyword">const</span> <span class="keyword">float</span> PI = <span class="number">3.1415926f</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; <span class="number">8</span>; v++) &#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> u = <span class="number">0</span>; u &lt; <span class="number">8</span>; u++) &#123;</div><div class="line">			<span class="keyword">float</span> alpha_u = (u==<span class="number">0</span>) ? <span class="number">1</span> / <span class="built_in">sqrt</span>(<span class="number">8.0f</span>) : <span class="number">0.5f</span>;</div><div class="line">			<span class="keyword">float</span> alpha_v = (v==<span class="number">0</span>) ? <span class="number">1</span> / <span class="built_in">sqrt</span>(<span class="number">8.0f</span>) : <span class="number">0.5f</span>;</div><div class="line"></div><div class="line">			<span class="keyword">float</span> temp = <span class="number">0.f</span>;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">8</span>; x++) &#123;</div><div class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="number">8</span>; y++) &#123;</div><div class="line">					<span class="keyword">float</span> data = channel_data[y * <span class="number">8</span> + x];</div><div class="line"></div><div class="line">					data *= <span class="built_in">cos</span>((<span class="number">2</span> * x + <span class="number">1</span>) * u * PI / <span class="number">16.0f</span>);</div><div class="line">					data *= <span class="built_in">cos</span>((<span class="number">2</span> * y + <span class="number">1</span>) * v * PI / <span class="number">16.0f</span>);</div><div class="line"></div><div class="line">					temp += data;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			temp *= alpha_u * alpha_v / m_YTable[ZigZag[v * <span class="number">8</span> + u]];</div><div class="line">			fdc_data[ZigZag[v*<span class="number">8</span>+u]] = (<span class="keyword">short</span>) ((<span class="keyword">short</span>)(temp + <span class="number">16384.5</span>) - <span class="number">16384</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>哈夫曼编码</p>
<ul>
<li>直流分量差分编码</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> 	<span class="comment">// encode DC</span></div><div class="line"><span class="keyword">int</span> dcDiff = (<span class="keyword">int</span>)(DU[<span class="number">0</span>] - prevDC);</div><div class="line">prevDC = DU[<span class="number">0</span>];</div><div class="line"></div><div class="line"><span class="keyword">if</span> (dcDiff == <span class="number">0</span>) &#123;</div><div class="line">	outputBitString[index++] = HTDC[<span class="number">0</span>];</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">	BitString bs = _getBitCode(dcDiff);</div><div class="line"></div><div class="line">	outputBitString[index++] = HTDC[bs.length];</div><div class="line">	outputBitString[index++] = bs;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>交流分量游长编码</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"> 	<span class="comment">// encode ACs</span></div><div class="line"><span class="keyword">int</span> endPos=<span class="number">63</span>; <span class="comment">//end0pos = first element in reverse order != 0</span></div><div class="line"><span class="keyword">while</span>((endPos &gt; <span class="number">0</span>) &amp;&amp; (DU[endPos] == <span class="number">0</span>)) &#123;</div><div class="line">	endPos--;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= endPos; ) &#123;</div><div class="line">	<span class="keyword">int</span> startPos = i;</div><div class="line"></div><div class="line">	<span class="keyword">while</span>((DU[i] == <span class="number">0</span>) &amp;&amp; (i &lt;= endPos)) &#123;</div><div class="line">		i++;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">int</span> zeroCounts = i - startPos;</div><div class="line">	<span class="keyword">if</span> (zeroCounts &gt;= <span class="number">16</span>) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= zeroCounts / <span class="number">16</span>; j++) &#123;</div><div class="line">			outputBitString[index++] = SIXTEEN_ZEROS;</div><div class="line">		&#125;</div><div class="line">		zeroCounts = zeroCounts % <span class="number">16</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	BitString bs = _getBitCode(DU[i]);</div><div class="line"></div><div class="line">	outputBitString[index++] = HTAC[(zeroCounts &lt;&lt; <span class="number">4</span>) | bs.length];</div><div class="line">	outputBitString[index++] = bs;</div><div class="line">	i++;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>对三个通道进行以上同样的操作。（DCT变化-哈夫曼编码-写入）</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">BitString outputBitString[<span class="number">128</span>];</div><div class="line"><span class="keyword">int</span> bitStringCounts;</div><div class="line"></div><div class="line"><span class="comment">// Y通道压缩</span></div><div class="line">_forward_DCT(yData, yQuant);</div><div class="line">_doHuffmanEncoding(yQuant, prev_DC_Y, m_Y_DC_Huffman_Table, m_Y_AC_Huffman_Table,</div><div class="line">	outputBitString, bitStringCounts);</div><div class="line">_write_bitstring_(outputBitString, bitStringCounts, newByte, newBytePos, fp);</div><div class="line"></div><div class="line"><span class="comment">// Cb通道压缩</span></div><div class="line">_forward_DCT(cbData, cbQuant);</div><div class="line">_doHuffmanEncoding(cbQuant, prev_DC_Cb, m_CbCr_DC_Huffman_Table, m_CbCr_AC_Huffman_Table,</div><div class="line">	outputBitString, bitStringCounts);</div><div class="line">_write_bitstring_(outputBitString, bitStringCounts, newByte, newBytePos, fp);</div><div class="line"></div><div class="line"><span class="comment">// Cr通道压缩</span></div><div class="line">_forward_DCT(crData, crQuant);</div><div class="line">_doHuffmanEncoding(crQuant, prev_DC_Cr, m_CbCr_DC_Huffman_Table, m_CbCr_AC_Huffman_Table,</div><div class="line">	outputBitString, bitStringCounts);</div><div class="line">_write_bitstring_(outputBitString, bitStringCounts, newByte, newBytePos, fp);</div></pre></td></tr></table></figure>
<p>整个流程就是如下图所示：<br><img src="/2017/06/13/BMP2JPEG/t.png" alt=""></p>
<h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h3><p>测试图片 pic1.bmp<br><img src="/2017/06/13/BMP2JPEG/pic1.bmp" alt=""></p>
<p>16进制<br><img src="/2017/06/13/BMP2JPEG/bmp0x.png" alt=""></p>
<p>测试代码</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">char</span>* inputFileName = <span class="string">"pic1.bmp"</span>;</div><div class="line"></div><div class="line">JpegEncoder encoder;</div><div class="line"><span class="comment">// 读取BMP格式的文件</span></div><div class="line"><span class="keyword">if</span>(!encoder.readFromBMP(inputFileName)) &#123;</div><div class="line">	<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 将BMP格式的文件按照JPEG标准压缩成JPEG文件</span></div><div class="line"><span class="keyword">if</span>(!encoder.encodeToJPG(<span class="string">"out.jpeg"</span>, <span class="number">50</span>)) &#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"jpg\n"</span>);</div><div class="line">	<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>读取的BMP文件信息，大小和尺寸都符合原图<br><img src="/2017/06/13/BMP2JPEG/bmpinfo.png" alt=""></p>
<p>测试结果 out.jpeg<br><img src="/2017/06/13/BMP2JPEG/ybr.jpeg" alt=""></p>
<p>十六进制，可以和标准格式比较确实是通过BMP转成了JPEG格式<br><img src="/2017/06/13/BMP2JPEG/jpeg0x.png" alt=""></p>
<p><img src="/2017/06/13/BMP2JPEG/size.png" alt=""><br>可以看到，压缩效果还是比较比较明显的，但是编码性能不是最好的，没有对数据前期进行优化，效率只是中规中矩。<br>下面介绍对流程和结果的测试分析<br>过程流程：<br><img src="/2017/06/13/BMP2JPEG/flowchart.png" alt=""></p>
<p>分析为什么转换成YCbCr域对色域的压缩会让人接受：<br>从RGB到YCbCr的转换公式我们可以分析出Y所占比重较高，说明应该存储的细节相对较多，和人眼对亮度更加敏感符合。那么事实是否如此？ <br><br><img src="https://raw.githubusercontent.com/mk43/Algo-Math/master/bmp2jpeg/y.jpeg" width="240" height="240"> <img src="https://raw.githubusercontent.com/mk43/Algo-Math/master/bmp2jpeg/b.jpeg" width="240" height="240"> <img src="https://raw.githubusercontent.com/mk43/Algo-Math/master/bmp2jpeg/r.jpeg" width="240" height="240"></p>
<p>从左到右依次是 Y（72.8k），Cb（37.4k），Cr（33.9k）分量，从光感上说，明显是Y的灰度图像给出了细节，其它两个分量只是给出色彩，没有细节。接着从大小分析也和我们的预测符合，大概比例是 2：1：1，说明存储的细节越多所需的空间自然越大。<br>接下来对BMP原始通道RGB加扰动和YCbCr加相同的扰动，对图像的影响又会怎样？</p>
<p><img src="/2017/06/13/BMP2JPEG/rgb.jpeg" alt=""> <img src="/2017/06/13/BMP2JPEG/ybr.jpeg" alt=""><br>从左到右一次是在RGB通道和YCbCr通道加干扰。可以看到RGB收干扰的程度更大，原因不大好用数学分析，我觉得很可能是RGB通道对干扰是没有减弱直接进入通道转换，而YCrCb则是在色度通道进行压缩了，同时也是对干扰的舍弃，所以效果比较好。</p>
<p>下面分析为什么量化矩阵对结果会有很大影响，可以做一个实验，改变生成量化矩阵的算法，看看结果如何。<br><img src="/2017/06/13/BMP2JPEG/q1.jpeg" alt=""> <img src="/2017/06/13/BMP2JPEG/q2.jpeg" alt=""></p>
<p>这两张的量化程度不同，但是可以看到的是他们都有或多或少的呈色块显示迹象，所以应该存储的空间应该是很小的。<br><img src="/2017/06/13/BMP2JPEG/qsize.png" alt=""><br>结果也确实如此，回到问题，我们的量化矩阵没有优化，造成数值过大，在量化过程中，导致过多数为0，也就是那些高频分量，而高频正是细节的体现，失去高频自然就失去了细节。所以量化矩阵的取值直接关系到了生成图像的品质。</p>
<p>以上是我对BMP转换成JPEG的过程分析，同时也辅以代码加以实现和测试。对于JPEG的解码过程那就是过程的逆过程了，但是由于编码是有损的，而且编码表量化表都是有转型损失的，所以解码之后的图像也会有部分损失。着呢个过程和读取解码BMP一样。先读取文件头，接下来初始化表，再就是直接读取数据根据表解码出YCbCr的值，反量化之后通过DCT逆变换还原。</p>
<p>其中的源码是<a href="https://thecodeway.com/blog/?p=522" target="_blank" rel="external">thecodeway</a>提供的，欢迎大家去他的 Blog 看看他的图像分析文章，我只是对他的代码加以自己的理解。</p>
<p>最后：如有不足，欢迎指正，共同进步。</p>
<p>多谢阅读</p>
<ul>
<li>参考资料<br>[1] 足迹 : <a href="https://www.cnblogs.com/Matrix_Yao/archive/2009/12/02/1615295.html" target="_blank" rel="external">https://www.cnblogs.com/Matrix_Yao/archive/2009/12/02/1615295.html</a> <br><br>[2] lakeone : <a href="https://www.cnblogs.com/lakeone/p/3596996.html" target="_blank" rel="external">https://www.cnblogs.com/lakeone/p/3596996.html</a> <br><br>[3] thecodeway : <a href="https://thecodeway.com/blog/?p=522" target="_blank" rel="external">https://thecodeway.com/blog/?p=522</a> <br><br>[4] SoC Design Lab <a href="http://twins.ee.nctu.edu.tw/courses/soclab_04/lab_hw_pdf/proj1_jpeg_introduction.pdf" target="_blank" rel="external">http://twins.ee.nctu.edu.tw/courses/soclab_04/lab_hw_pdf/proj1_jpeg_introduction.pdf</a> <br></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/mk43/Algo-Math/tree/master/bmp2jpeg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;由于最近做了图像相关的学习，所以想再深入点，但是自己的知识有限，目前只能把自己所学的通过这个小小的实验来加深理解。参考大牛的 Blog 加上自己亲手实践，写了这篇文章。以后还会继续添加图像处理的相关知识。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/mk43/Algo-Math/master/bmp2jpeg/y.jpeg&quot; width=&quot;240&quot; height=&quot;240&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/mk43/Algo-Math/master/bmp2jpeg/b.jpeg&quot; width=&quot;240&quot; height=&quot;240&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/mk43/Algo-Math/master/bmp2jpeg/r.jpeg&quot; width=&quot;240&quot; height=&quot;240&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Algo" scheme="http://fitzeng.org/tags/Algo/"/>
    
      <category term="Math" scheme="http://fitzeng.org/tags/Math/"/>
    
      <category term="C/C++" scheme="http://fitzeng.org/tags/C-C/"/>
    
      <category term="图像处理" scheme="http://fitzeng.org/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
</feed>
